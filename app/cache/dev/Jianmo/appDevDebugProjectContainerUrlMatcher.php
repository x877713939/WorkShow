<?php

use Symfony\Component\Routing\Exception\MethodNotAllowedException;
use Symfony\Component\Routing\Exception\ResourceNotFoundException;
use Symfony\Component\Routing\RequestContext;

/**
 * This class has been auto-generated
 * by the Symfony Routing Component.
 */
class appDevDebugProjectContainerUrlMatcher extends Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher
{
    public function __construct(RequestContext $context)
    {
        $this->context = $context;
    }

    public function match($rawPathinfo)
    {
        $allow = [];
        $pathinfo = rawurldecode($rawPathinfo);
        $trimmedPathinfo = rtrim($pathinfo, '/');
        $context = $this->context;
        $request = $this->request ?: $this->createRequest($pathinfo);
        $requestMethod = $canonicalMethod = $context->getMethod();

        if ('HEAD' === $requestMethod) {
            $canonicalMethod = 'GET';
        }

        if (0 === strpos($pathinfo, '/_')) {
            // _wdt
            if (0 === strpos($pathinfo, '/_wdt') && preg_match('#^/_wdt/(?P<token>[^/]++)$#sD', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, ['_route' => '_wdt']), array (  '_controller' => 'web_profiler.controller.profiler:toolbarAction',  '_permission' => '',  '_h5' => false,));
            }

            if (0 === strpos($pathinfo, '/_profiler')) {
                // _profiler_home
                if ('/_profiler' === $trimmedPathinfo) {
                    return array (  '_controller' => 'web_profiler.controller.profiler:homeAction',  '_route' => '_profiler_home',  '_permission' => '',  '_h5' => false,);
                    if ('/' === substr($pathinfo, -1)) {
                        // no-op
                    } elseif ('GET' !== $canonicalMethod) {
                        goto not__profiler_home;
                    } else {
                        return array_replace($ret, $this->redirect($rawPathinfo.'/', '_profiler_home'));
                    }

                    return $ret;
                }
                not__profiler_home:

                if (0 === strpos($pathinfo, '/_profiler/search')) {
                    // _profiler_search
                    if ('/_profiler/search' === $pathinfo) {
                        return array (  '_controller' => 'web_profiler.controller.profiler:searchAction',  '_route' => '_profiler_search',  '_permission' => '',  '_h5' => false,);
                    }

                    // _profiler_search_bar
                    if ('/_profiler/search_bar' === $pathinfo) {
                        return array (  '_controller' => 'web_profiler.controller.profiler:searchBarAction',  '_route' => '_profiler_search_bar',  '_permission' => '',  '_h5' => false,);
                    }

                }

                // _profiler_phpinfo
                if ('/_profiler/phpinfo' === $pathinfo) {
                    return array (  '_controller' => 'web_profiler.controller.profiler:phpinfoAction',  '_route' => '_profiler_phpinfo',  '_permission' => '',  '_h5' => false,);
                }

                // _profiler_search_results
                if (preg_match('#^/_profiler/(?P<token>[^/]++)/search/results$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => '_profiler_search_results']), array (  '_controller' => 'web_profiler.controller.profiler:searchResultsAction',  '_permission' => '',  '_h5' => false,));
                }

                // _profiler_open_file
                if ('/_profiler/open' === $pathinfo) {
                    return array (  '_controller' => 'web_profiler.controller.profiler:openAction',  '_route' => '_profiler_open_file',  '_permission' => '',  '_h5' => false,);
                }

                // _profiler
                if (preg_match('#^/_profiler/(?P<token>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => '_profiler']), array (  '_controller' => 'web_profiler.controller.profiler:panelAction',  '_permission' => '',  '_h5' => false,));
                }

                // _profiler_router
                if (preg_match('#^/_profiler/(?P<token>[^/]++)/router$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => '_profiler_router']), array (  '_controller' => 'web_profiler.controller.router:panelAction',  '_permission' => '',  '_h5' => false,));
                }

                // _profiler_exception
                if (preg_match('#^/_profiler/(?P<token>[^/]++)/exception$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => '_profiler_exception']), array (  '_controller' => 'web_profiler.controller.exception:showAction',  '_permission' => '',  '_h5' => false,));
                }

                // _profiler_exception_css
                if (preg_match('#^/_profiler/(?P<token>[^/]++)/exception\\.css$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => '_profiler_exception_css']), array (  '_controller' => 'web_profiler.controller.exception:cssAction',  '_permission' => '',  '_h5' => false,));
                }

            }

            // _twig_error_test
            if (0 === strpos($pathinfo, '/_error') && preg_match('#^/_error/(?P<code>\\d+)(?:\\.(?P<_format>[^/]++))?$#sD', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, ['_route' => '_twig_error_test']), array (  '_controller' => 'twig.controller.preview_error:previewErrorPageAction',  '_format' => 'html',  '_permission' => '',  '_h5' => false,));
            }

        }

        elseif (0 === strpos($pathinfo, '/qrcode')) {
            // endroid_qrcode
            if (preg_match('#^/qrcode/(?P<text>[\\w\\W]+)\\.(?P<extension>jpg|png|gif)$#sD', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, ['_route' => 'endroid_qrcode']), array (  '_controller' => 'Endroid\\QrCode\\Bundle\\Controller\\QrCodeController::generateAction',  '_permission' => '',  '_h5' => false,));
            }

            // common_parse_qrcode
            if (0 === strpos($pathinfo, '/qrcode/parse') && preg_match('#^/qrcode/parse/(?P<token>[^/]++)$#sD', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, ['_route' => 'common_parse_qrcode']), array (  '_controller' => 'AppBundle\\Controller\\CommonController::parseQrcodeAction',  '_permission' =>   array (  ),  '_h5' => false,));
            }

        }

        elseif (0 === strpos($pathinfo, '/question')) {
            // question_re_edit
            if (0 === strpos($pathinfo, '/question/re_edit') && preg_match('#^/question/re_edit/(?P<token>[^/]++)$#sD', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_re_edit']), array (  '_controller' => 'AppBundle\\Controller\\Question\\ManageController::reEditAction',  '_permission' =>   array (  ),  '_h5' => false,));
            }

            // questions_import_save
            if (0 === strpos($pathinfo, '/questions') && preg_match('#^/questions/(?P<token>[^/]++)/import_save$#sD', $pathinfo, $matches)) {
                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'questions_import_save']), array (  '_controller' => 'AppBundle\\Controller\\Question\\ManageController::saveImportQuestionsAction',  '_permission' =>   array (  ),  '_h5' => false,));
                if (!in_array($requestMethod, ['POST'])) {
                    $allow = array_merge($allow, ['POST']);
                    goto not_questions_import_save;
                }

                return $ret;
            }
            not_questions_import_save:

            if (0 === strpos($pathinfo, '/question_bank')) {
                // question_bank_create
                if ('/question_bank/create' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\ManageController::createAction',  '_route' => 'question_bank_create',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // question_bank_manage
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/manage$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\ManageController::manageAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // question_bank_member_match
                if ('/question_bank/member_match' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\ManageController::memberMatchAction',  '_route' => 'question_bank_member_match',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // question_bank_manage_question_category
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/question/category$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_question_category']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\QuestionCategoryController::indexAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // question_bank_manage_question_category_batch_create
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/question/category/batch_create$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_question_category_batch_create']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\QuestionCategoryController::batchCreateAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                if (0 === strpos($pathinfo, '/question_bank/question/category')) {
                    // question_bank_manage_question_category_edit
                    if (preg_match('#^/question_bank/question/category/(?P<id>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_question_category_edit']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\QuestionCategoryController::editAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // question_bank_manage_question_category_delete
                    if (preg_match('#^/question_bank/question/category/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_question_category_delete']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\QuestionCategoryController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_question_bank_manage_question_category_delete;
                        }

                        return $ret;
                    }
                    not_question_bank_manage_question_category_delete:

                    // question_bank_manage_question_category_question_count
                    if (preg_match('#^/question_bank/question/category/(?P<id>[^/]++)/question_count$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_question_category_question_count']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\QuestionCategoryController::getQuestionCountAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                }

                // question_bank_manage_question_list
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/questions$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_question_list']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\QuestionController::indexAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // question_bank_manage_question_show_ajax
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/questions/show/ajax$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_question_show_ajax']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\QuestionController::getQuestionsHtmlAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // question_bank_manage_question_import
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/question/import$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_question_import']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\QuestionController::importAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // question_bank_manage_question_create
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/question/(?P<type>[^/]++)/create$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_question_create']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\QuestionController::createAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // question_bank_manage_question_update
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/question/(?P<questionId>[^/]++)/update$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_question_update']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\QuestionController::updateAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // question_bank_manage_question_batch_delete
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/questions/delete$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_question_batch_delete']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\QuestionController::deleteQuestionsAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_question_bank_manage_question_batch_delete;
                    }

                    return $ret;
                }
                not_question_bank_manage_question_batch_delete:

                // question_bank_manage_question_preview
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/question/(?P<questionId>[^/]++)/preview$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_question_preview']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\QuestionController::previewAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // question_bank_manage_question_delete
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/question/(?P<itemId>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_question_delete']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\QuestionController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // question_bank_manage_question_export
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/questions/export$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_question_export']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\QuestionController::exportAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // question_bank_manage_question_category_show
                if ('/question_bank/question/show/category' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\QuestionCategoryController::showCategoriesAction',  '_route' => 'question_bank_manage_question_category_show',  '_permission' =>   array (  ),  '_h5' => false,);
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_question_bank_manage_question_category_show;
                    }

                    return $ret;
                }
                not_question_bank_manage_question_category_show:

                // question_bank_manage_question_set_category
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/questions/set_category$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_question_set_category']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\QuestionController::setCategoryAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_question_bank_manage_question_set_category;
                    }

                    return $ret;
                }
                not_question_bank_manage_question_set_category:

                // question_bank_manage_question_check_num
                if ('/question_bank/manage/question/check/num' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\QuestionController::showQuestionTypesNumAction',  '_route' => 'question_bank_manage_question_check_num',  '_permission' =>   array (  ),  '_h5' => false,);
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_question_bank_manage_question_check_num;
                    }

                    return $ret;
                }
                not_question_bank_manage_question_check_num:

                // question_bank_manage_testpaper_list
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/testpapers$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_testpaper_list']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\TestpaperController::indexAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // question_bank_manage_testpaper_import
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/testpaper/import$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_testpaper_import']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\TestpaperController::importAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // question_bank_manage_testpaper_show_ajax
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/testpaper/show/ajax$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_testpaper_show_ajax']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\TestpaperController::getTestpaperHtmlAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // question_bank_manage_testpaper_batch_delete
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/testpapers/delete$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_testpaper_batch_delete']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\TestpaperController::deleteTestpapersAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_question_bank_manage_testpaper_batch_delete;
                    }

                    return $ret;
                }
                not_question_bank_manage_testpaper_batch_delete:

                // question_bank_manage_testpaper_create
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/testpaper/create$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_testpaper_create']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\TestpaperController::createAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // question_bank_manage_random_testpaper_create
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/random_testpaper/create$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_random_testpaper_create']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\TestpaperController::createRandomTestpaperAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // question_bank_manage_random_testpaper_build_check
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/random_testpaper/(?P<type>[^/]++)/check$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_random_testpaper_build_check']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\TestpaperController::buildCheckAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // question_bank_manage_testpaper_edit
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/testpaper/(?P<assessmentId>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_testpaper_edit']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\TestpaperController::editAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // question_bank_manage_testpaper_publish
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/testpaper/(?P<assessmentId>[^/]++)/publish$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_testpaper_publish']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\TestpaperController::publishAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_question_bank_manage_testpaper_publish;
                    }

                    return $ret;
                }
                not_question_bank_manage_testpaper_publish:

                // question_bank_manage_testpaper_close
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/testpaper/(?P<assessmentId>[^/]++)/close$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_testpaper_close']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\TestpaperController::closeAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_question_bank_manage_testpaper_close;
                    }

                    return $ret;
                }
                not_question_bank_manage_testpaper_close:

                // question_bank_manage_testpaper_preview
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/testpaper/(?P<assessmentId>[^/]++)/preview$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_testpaper_preview']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\TestpaperController::previewAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // question_bank_manage_testpaper_delete
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/testpaper/(?P<assessmentId>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_testpaper_delete']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\TestpaperController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // question_bank_manage_testpaper_export
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/testpaper/(?P<assessmentId>[^/]++)/export$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_testpaper_export']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\TestpaperController::exportAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // question_bank_manage_testpaper_json
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/testpapers/json$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_testpaper_json']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\TestpaperController::jsonAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // question_bank_manage_question_pick
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/question/pick$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_question_pick']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\TestpaperController::questionPickAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // question_bank_manage_question_search
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/question/search$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_question_search']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\TestpaperController::questionSearchAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // question_bank_manage_question_picked
                if (preg_match('#^/question_bank/(?P<id>[^/]++)/question/picked$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'question_bank_manage_question_picked']), array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\TestpaperController::pickedQuestionAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

            }

        }

        elseif (0 === strpos($pathinfo, '/a')) {
            if (0 === strpos($pathinfo, '/api')) {
                // api_entrypoint_start
                if (preg_match('#^/api/(?P<res1>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'api_entrypoint_start']), array (  '_controller' => 'ApiBundle\\Controller\\EntryPointController::startAction',  '_permission' => '',  '_h5' => false,));
                }

                // api_entrypoint_start_1
                if (preg_match('#^/api/(?P<res1>[^/]++)/(?P<slug1>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'api_entrypoint_start_1']), array (  '_controller' => 'ApiBundle\\Controller\\EntryPointController::startAction',  '_permission' => '',  '_h5' => false,));
                }

                // api_entrypoint_start_2
                if (preg_match('#^/api/(?P<res1>[^/]++)/(?P<slug1>[^/]++)/(?P<res2>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'api_entrypoint_start_2']), array (  '_controller' => 'ApiBundle\\Controller\\EntryPointController::startAction',  '_permission' => '',  '_h5' => false,));
                }

                // api_entrypoint_start_3
                if (preg_match('#^/api/(?P<res1>[^/]++)/(?P<slug1>[^/]++)/(?P<res2>[^/]++)/(?P<slug2>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'api_entrypoint_start_3']), array (  '_controller' => 'ApiBundle\\Controller\\EntryPointController::startAction',  '_permission' => '',  '_h5' => false,));
                }

                // api_entrypoint_start_4
                if (preg_match('#^/api/(?P<res1>[^/]++)/(?P<slug1>[^/]++)/(?P<res2>[^/]++)/(?P<slug2>[^/]++)/(?P<res3>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'api_entrypoint_start_4']), array (  '_controller' => 'ApiBundle\\Controller\\EntryPointController::startAction',  '_permission' => '',  '_h5' => false,));
                }

                // api_entrypoint_start_5
                if (preg_match('#^/api/(?P<res1>[^/]++)/(?P<slug1>[^/]++)/(?P<res2>[^/]++)/(?P<slug2>[^/]++)/(?P<res3>[^/]++)/(?P<slug3>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'api_entrypoint_start_5']), array (  '_controller' => 'ApiBundle\\Controller\\EntryPointController::startAction',  '_permission' => '',  '_h5' => false,));
                }

                // api_entrypoint_start_6
                if (preg_match('#^/api/(?P<res1>[^/]++)/(?P<slug1>[^/]++)/(?P<res2>[^/]++)/(?P<slug2>[^/]++)/(?P<res3>[^/]++)/(?P<slug3>[^/]++)/(?P<res4>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'api_entrypoint_start_6']), array (  '_controller' => 'ApiBundle\\Controller\\EntryPointController::startAction',  '_permission' => '',  '_h5' => false,));
                }

                // api_entrypoint_start_7
                if (preg_match('#^/api/(?P<res1>[^/]++)/(?P<slug1>[^/]++)/(?P<res2>[^/]++)/(?P<slug2>[^/]++)/(?P<res3>[^/]++)/(?P<slug3>[^/]++)/(?P<res4>[^/]++)/(?P<slug4>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'api_entrypoint_start_7']), array (  '_controller' => 'ApiBundle\\Controller\\EntryPointController::startAction',  '_permission' => '',  '_h5' => false,));
                }

            }

            // app_download
            if ('/app/download' === $pathinfo) {
                return array (  '_controller' => 'CustomBundle\\Controller\\DefaultController::appDownloadAction',  '_route' => 'app_download',  '_permission' =>   array (  ),  '_h5' => false,);
            }

            if (0 === strpos($pathinfo, '/an')) {
                // crontab_web
                if ('/anon/crontab' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\CommonController::crontabAction',  '_route' => 'crontab_web',  '_permission' =>   array (  ),  '_h5' => false,);
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_crontab_web;
                    }

                    return $ret;
                }
                not_crontab_web:

                // jstranslation_js
                if (0 === strpos($pathinfo, '/anon/translations') && preg_match('#^/anon/translations(?:/(?P<domain>[\\w]+)(?:\\.(?P<_format>js|json))?)?$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'jstranslation_js']), array (  '_controller' => 'bazinga.jstranslation.controller:getTranslationsAction',  'domain' => 'messages',  '_format' => 'js',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($canonicalMethod, ['GET'])) {
                        $allow = array_merge($allow, ['GET']);
                        goto not_jstranslation_js;
                    }

                    return $ret;
                }
                not_jstranslation_js:

                if (0 === strpos($pathinfo, '/announcement')) {
                    // announcement_list
                    if (preg_match('#^/announcement/(?P<targetType>[^/]++)/(?P<targetId>[^/]++)/list$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'announcement_list']), array (  '_controller' => 'AppBundle\\Controller\\AnnouncementController::listAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // announcement_show_all
                    if (preg_match('#^/announcement/(?P<targetType>[^/]++)/(?P<targetId>[^/]++)/all$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'announcement_show_all']), array (  '_controller' => 'AppBundle\\Controller\\AnnouncementController::showAllAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // announcement_add
                    if (0 === strpos($pathinfo, '/announcement/manage') && preg_match('#^/announcement/manage/(?P<targetType>[^/]++)/(?P<targetId>[^/]++)/create$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'announcement_add']), array (  '_controller' => 'AppBundle\\Controller\\AnnouncementController::createAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // announcement_show
                    if (preg_match('#^/announcement/(?P<id>[^/]++)/(?P<targetId>[^/]++)/show$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'announcement_show']), array (  '_controller' => 'AppBundle\\Controller\\AnnouncementController::showAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // announcement_manage
                    if (preg_match('#^/announcement/(?P<targetType>[^/]++)/(?P<targetId>[^/]++)/manage$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'announcement_manage']), array (  '_controller' => 'AppBundle\\Controller\\AnnouncementController::manageAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // announcement_update
                    if (preg_match('#^/announcement/(?P<id>[^/]++)/(?P<targetType>[^/]++)/(?P<targetId>[^/]++)/update$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'announcement_update']), array (  '_controller' => 'AppBundle\\Controller\\AnnouncementController::updateAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // announcement_delete
                    if (preg_match('#^/announcement/(?P<id>[^/]++)/(?P<targetType>[^/]++)/(?P<targetId>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'announcement_delete']), array (  '_controller' => 'AppBundle\\Controller\\AnnouncementController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_announcement_delete;
                        }

                        return $ret;
                    }
                    not_announcement_delete:

                    // announcement_global_show
                    if (preg_match('#^/announcement/(?P<id>[^/]++)/opreate/global/show$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'announcement_global_show']), array (  '_controller' => 'AppBundle\\Controller\\AnnouncementController::globalShowAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                }

                elseif (0 === strpos($pathinfo, '/answer_engine')) {
                    // answer_engine_submit
                    if ('/answer_engine/submit' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\AnswerEngine\\AnswerEngineController::submitAnswerAction',  '_route' => 'answer_engine_submit',  '_permission' =>   array (  ),  '_h5' => false,);
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_answer_engine_submit;
                        }

                        return $ret;
                    }
                    not_answer_engine_submit:

                    // answer_engine_save
                    if ('/answer_engine/save' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\AnswerEngine\\AnswerEngineController::saveAnswerAction',  '_route' => 'answer_engine_save',  '_permission' =>   array (  ),  '_h5' => false,);
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_answer_engine_save;
                        }

                        return $ret;
                    }
                    not_answer_engine_save:

                    // answer_engine_review
                    if ('/answer_engine/review' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\AnswerEngine\\AnswerEngineController::reviewSaveAction',  '_route' => 'answer_engine_review',  '_permission' =>   array (  ),  '_h5' => false,);
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_answer_engine_review;
                        }

                        return $ret;
                    }
                    not_answer_engine_review:

                }

            }

            elseif (0 === strpos($pathinfo, '/attachment')) {
                // attachment_list
                if (0 === strpos($pathinfo, '/attachments') && preg_match('#^/attachments/(?P<targetType>[^/]++)/(?P<targetId>[^/]++)$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'attachment_list']), array (  '_controller' => 'AppBundle:Attachment:list',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($canonicalMethod, ['GET'])) {
                        $allow = array_merge($allow, ['GET']);
                        goto not_attachment_list;
                    }

                    return $ret;
                }
                not_attachment_list:

                // attachment_form_fields
                if (preg_match('#^/attachment/(?P<targetType>[^/]++)/(?P<targetId>[^/]++)/formFields$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'attachment_form_fields']), array (  '_controller' => 'AppBundle:Attachment:formFields',  'targetId' => 0,  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($canonicalMethod, ['GET'])) {
                        $allow = array_merge($allow, ['GET']);
                        goto not_attachment_form_fields;
                    }

                    return $ret;
                }
                not_attachment_form_fields:

                // attachment_upload
                if ('/attachment/upload' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\File\\AttachmentController::uploadAction',  '_route' => 'attachment_upload',  '_permission' =>   array (  ),  '_h5' => false,);
                    if (!in_array($canonicalMethod, ['GET'])) {
                        $allow = array_merge($allow, ['GET']);
                        goto not_attachment_upload;
                    }

                    return $ret;
                }
                not_attachment_upload:

                // attachment_item_show
                if (0 === strpos($pathinfo, '/attachment/file') && preg_match('#^/attachment/file/(?P<fileId>[^/]++)/show$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'attachment_item_show']), array (  '_controller' => 'AppBundle\\Controller\\File\\AttachmentController::fileShowAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($canonicalMethod, ['GET'])) {
                        $allow = array_merge($allow, ['GET']);
                        goto not_attachment_item_show;
                    }

                    return $ret;
                }
                not_attachment_item_show:

                // attachment_delete
                if (preg_match('#^/attachment/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'attachment_delete']), array (  '_controller' => 'AppBundle\\Controller\\File\\AttachmentController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_attachment_delete;
                    }

                    return $ret;
                }
                not_attachment_delete:

                // attachment_preview
                if (preg_match('#^/attachment/(?P<id>[^/]++)/preview$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'attachment_preview']), array (  '_controller' => 'AppBundle\\Controller\\File\\AttachmentController::previewAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($canonicalMethod, ['GET'])) {
                        $allow = array_merge($allow, ['GET']);
                        goto not_attachment_preview;
                    }

                    return $ret;
                }
                not_attachment_preview:

                // attachment_direct_video_preview
                if (preg_match('#^/attachment/(?P<id>[^/]++)/direct_video_preview$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'attachment_direct_video_preview']), array (  '_controller' => 'AppBundle\\Controller\\File\\AttachmentController::directVideoPreviewAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($canonicalMethod, ['GET'])) {
                        $allow = array_merge($allow, ['GET']);
                        goto not_attachment_direct_video_preview;
                    }

                    return $ret;
                }
                not_attachment_direct_video_preview:

                // attachment_player
                if (preg_match('#^/attachment/(?P<id>[^/]++)/player$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'attachment_player']), array (  '_controller' => 'AppBundle\\Controller\\File\\AttachmentController::playerAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($canonicalMethod, ['GET'])) {
                        $allow = array_merge($allow, ['GET']);
                        goto not_attachment_player;
                    }

                    return $ret;
                }
                not_attachment_player:

                // attachment_download
                if (preg_match('#^/attachment/(?P<id>[^/]++)/download$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'attachment_download']), array (  '_controller' => 'AppBundle\\Controller\\File\\AttachmentController::downloadAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($canonicalMethod, ['GET'])) {
                        $allow = array_merge($allow, ['GET']);
                        goto not_attachment_download;
                    }

                    return $ret;
                }
                not_attachment_download:

            }

            // auth_email_confirm
            if ('/auth/email/confirm' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\AuthController::emailConfirmAction',  '_route' => 'auth_email_confirm',  '_permission' =>   array (  ),  '_h5' => false,);
            }

            if (0 === strpos($pathinfo, '/activity')) {
                // content_activity_show
                if (preg_match('#^/activity/(?P<alias>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'content_activity_show']), array (  '_controller' => 'AppBundle\\Controller\\ContentController::activityShowAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // content_activity_list
                if ('/activity' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\ContentController::activityListAction',  '_route' => 'content_activity_list',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // activity_ppt_token
                if (0 === strpos($pathinfo, '/activity/ppt/token') && preg_match('#^/activity/ppt/token/(?P<mediaId>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'activity_ppt_token']), array (  '_controller' => 'AppBundle\\Controller\\Activity\\PptController::getPptTokenAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

            }

            elseif (0 === strpos($pathinfo, '/article')) {
                // article_show
                if ('/article' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\ArticleController::indexAction',  '_route' => 'article_show',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // article_detail
                if (preg_match('#^/article/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'article_detail']), array (  '_controller' => 'AppBundle\\Controller\\ArticleController::detailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // article_category
                if (0 === strpos($pathinfo, '/article/category') && preg_match('#^/article/category/(?P<categoryCode>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'article_category']), array (  '_controller' => 'AppBundle\\Controller\\ArticleController::categoryAction',  'category' => '',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // article_post
                if (preg_match('#^/article/(?P<id>[^/]++)/post$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'article_post']), array (  '_controller' => 'AppBundle\\Controller\\ArticleController::postAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_article_post;
                    }

                    return $ret;
                }
                not_article_post:

                // article_post_reply
                if (preg_match('#^/article/(?P<articleId>[^/]++)/post/(?P<postId>[^/]++)/$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'article_post_reply']), array (  '_controller' => 'AppBundle\\Controller\\ArticleController::postReplyAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_article_post_reply;
                    }

                    return $ret;
                }
                not_article_post_reply:

                // article_like
                if (preg_match('#^/article/(?P<articleId>[^/]++)/like$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'article_like']), array (  '_controller' => 'AppBundle\\Controller\\ArticleController::likeAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_article_like;
                    }

                    return $ret;
                }
                not_article_like:

                // article_cancel_like
                if (preg_match('#^/article/(?P<articleId>[^/]++)/canceLike$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'article_cancel_like']), array (  '_controller' => 'AppBundle\\Controller\\ArticleController::cancelLikeAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_article_cancel_like;
                    }

                    return $ret;
                }
                not_article_cancel_like:

                // article_post_jump
                if (preg_match('#^/article/(?P<articleId>[^/]++)/post/(?P<postId>[^/]++)/jump$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'article_post_jump']), array (  '_controller' => 'AppBundle\\Controller\\ArticleController::postJumpAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // article_tag_show
                if (0 === strpos($pathinfo, '/article/tag') && preg_match('#^/article/tag/(?P<name>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'article_tag_show']), array (  '_controller' => 'AppBundle\\Controller\\ArticleController::tagAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // article_post_subposts
                if (preg_match('#^/article/(?P<targetId>[^/]++)/post/(?P<postId>[^/]++)/subposts$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'article_post_subposts']), array (  '_controller' => 'AppBundle\\Controller\\ArticleController::subpostsAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

            }

            elseif (0 === strpos($pathinfo, '/archive/course')) {
                // course_set_archive
                if ('/archive/course' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseSetController::archiveAction',  '_route' => 'course_set_archive',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // course_set_archive_show
                if (preg_match('#^/archive/course/(?P<courseSetId>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_archive_show']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseSetController::archiveDetailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // course_set_archive_task
                if (preg_match('#^/archive/course/(?P<courseSetId>[^/]++)/lesson/(?P<taskId>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_archive_task']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseSetController::archiveTaskAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

            }

            // ajax_thread_member_show
            if (0 === strpos($pathinfo, '/ajax/thread') && preg_match('#^/ajax/thread/(?P<threadId>[^/]++)/members$#sD', $pathinfo, $matches)) {
                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'ajax_thread_member_show']), array (  '_controller' => 'AppBundle\\Controller\\Thread\\MemberController::ajaxFindMembersAction',  '_permission' =>   array (  ),  '_h5' => false,));
                if (!in_array($canonicalMethod, ['GET'])) {
                    $allow = array_merge($allow, ['GET']);
                    goto not_ajax_thread_member_show;
                }

                return $ret;
            }
            not_ajax_thread_member_show:

            if (0 === strpos($pathinfo, '/admin')) {
                // admin
                if ('/admin' === $trimmedPathinfo) {
                    return array (  '_controller' => 'CustomBundle\\Controller\\Admin\\DefaultController::indexAction',  '_route' => 'admin',  '_permission' =>   array (  ),  '_h5' => false,);
                    if ('/' === substr($pathinfo, -1)) {
                        // no-op
                    } elseif ('GET' !== $canonicalMethod) {
                        goto not_admin;
                    } else {
                        return array_replace($ret, $this->redirect($rawPathinfo.'/', 'admin'));
                    }

                    return $ret;
                }
                not_admin:

                if (0 === strpos($pathinfo, '/admin/d')) {
                    if (0 === strpos($pathinfo, '/admin/discovery_column')) {
                        // admin_discovery_column_category_tree
                        if ('/admin/discovery_column/category/tree' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\DiscoveryColumnController::categoryTreeAction',  '_route' => 'admin_discovery_column_category_tree',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // admin_discovery_column_delete
                        if (preg_match('#^/admin/discovery_column/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_discovery_column_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\DiscoveryColumnController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_discovery_column_delete;
                            }

                            return $ret;
                        }
                        not_admin_discovery_column_delete:

                        // admin_discovery_column_edit
                        if (preg_match('#^/admin/discovery_column/(?P<id>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_discovery_column_edit']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\DiscoveryColumnController::editAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // admin_discovery_column_title_check
                        if (preg_match('#^/admin/discovery_column/(?P<id>[^/]++)/title_check$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_discovery_column_title_check']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\DiscoveryColumnController::checkTitleAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // admin_discovery_column_sort
                        if ('/admin/discovery_column/sort' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\DiscoveryColumnController::sortAction',  '_route' => 'admin_discovery_column_sort',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // admin_discovery_column_index
                        if ('/admin/discovery_column/index' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\DiscoveryColumnController::indexAction',  '_route' => 'admin_discovery_column_index',  '_permission' =>   array (    0 => 'admin_discovery_column_index',  ),  '_h5' => false,);
                        }

                        // admin_discovery_column_create
                        if ('/admin/discovery_column/create' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\DiscoveryColumnController::createAction',  '_route' => 'admin_discovery_column_create',  '_permission' =>   array (    0 => 'admin_discovery_column_create',  ),  '_h5' => false,);
                        }

                    }

                    elseif (0 === strpos($pathinfo, '/admin/da')) {
                        // admin_dashboard
                        if ('/admin/dashboard' === $pathinfo) {
                            return array (  '_controller' => 'CustomBundle\\Controller\\Admin\\DefaultController::dashboardAction',  '_route' => 'admin_dashboard',  '_permission' =>   array (    0 => 'admin',  ),  '_h5' => false,);
                        }

                        // admin_cloud_data_lab
                        if ('/admin/data/lab' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\DataLabController::dataAction',  '_route' => 'admin_cloud_data_lab',  '_permission' =>   array (    0 => 'admin_cloud_data_lab',  ),  '_h5' => false,);
                        }

                        if (0 === strpos($pathinfo, '/admin/data/lab/setting')) {
                            // admin_cloud_data_lab_setting
                            if ('/admin/data/lab/setting' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\DataLabController::setttingAction',  '_route' => 'admin_cloud_data_lab_setting',  '_permission' =>   array (    0 => 'admin_cloud_data_lab_setting',  ),  '_h5' => false,);
                            }

                            // admin_cloud_data_lab_setting_enable_modal
                            if ('/admin/data/lab/setting/modal/enable' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\DataLabController::enableAction',  '_route' => 'admin_cloud_data_lab_setting_enable_modal',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_cloud_data_lab_setting_disable_modal
                            if ('/admin/data/lab/setting/modal/disable' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\DataLabController::disableAction',  '_route' => 'admin_cloud_data_lab_setting_disable_modal',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                        }

                    }

                    // admin_message_delete_messages
                    if ('/admin/delete/choosed/messages' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\MessageController::deleteChoosedMessagesAction',  '_route' => 'admin_message_delete_messages',  '_permission' =>   array (    0 => 'admin_message_manage',  ),  '_h5' => false,);
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_admin_message_delete_messages;
                        }

                        return $ret;
                    }
                    not_admin_message_delete_messages:

                }

                elseif (0 === strpos($pathinfo, '/admin/s')) {
                    if (0 === strpos($pathinfo, '/admin/setting')) {
                        if (0 === strpos($pathinfo, '/admin/setting/s')) {
                            // admin_setting_security
                            if ('/admin/setting/security' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SiteSettingController::securityAction',  '_route' => 'admin_setting_security',  '_permission' =>   array (    0 => 'admin_setting_security',  ),  '_h5' => false,);
                            }

                            if (0 === strpos($pathinfo, '/admin/setting/site')) {
                                // admin_setting_site
                                if ('/admin/setting/site' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SiteSettingController::siteAction',  '_route' => 'admin_setting_site',  '_permission' =>   array (    0 => 'admin_setting_message',  ),  '_h5' => false,);
                                }

                                // admin_setting_site_save
                                if ('/admin/setting/site/save' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SiteSettingController::saveSiteAction',  '_route' => 'admin_setting_site_save',  '_permission' =>   array (    0 => 'admin_setting_message',  ),  '_h5' => false,);
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_setting_site_save;
                                    }

                                    return $ret;
                                }
                                not_admin_setting_site_save:

                            }

                            // admin_setting_share
                            if ('/admin/setting/share' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SiteSettingController::shareAction',  '_route' => 'admin_setting_share',  '_permission' =>   array (    0 => 'admin_setting_share',  ),  '_h5' => false,);
                            }

                            // admin_edu_cloud_sms_status
                            if ('/admin/setting/sms/status' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::smsStatusAction',  '_route' => 'admin_edu_cloud_sms_status',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/setting/navigation')) {
                            // admin_navigation
                            if ('/admin/setting/navigation' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\NavigationController::indexAction',  '_route' => 'admin_navigation',  '_permission' =>   array (    0 => 'admin_top_navigation',    1 => 'admin_foot_navigation',  ),  '_h5' => false,);
                            }

                            // admin_navigation_seqs_update
                            if ('/admin/setting/navigation/seqs/update' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\NavigationController::updateSeqsAction',  '_route' => 'admin_navigation_seqs_update',  '_permission' =>   array (    0 => 'admin_top_navigation',    1 => 'admin_foot_navigation',  ),  '_h5' => false,);
                            }

                            // admin_navigation_create
                            if ('/admin/setting/navigation/create' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\NavigationController::createAction',  '_route' => 'admin_navigation_create',  '_permission' =>   array (    0 => 'admin_top_navigation',    1 => 'admin_foot_navigation',  ),  '_h5' => false,);
                            }

                            // admin_navigation_update
                            if (preg_match('#^/admin/setting/navigation/(?P<id>[^/]++)/update$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_navigation_update']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\NavigationController::updateAction',  '_permission' =>   array (    0 => 'admin_top_navigation',    1 => 'admin_foot_navigation',  ),  '_h5' => false,));
                            }

                            // admin_navigation_delete
                            if (preg_match('#^/admin/setting/navigation/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_navigation_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\NavigationController::deleteAction',  '_permission' =>   array (    0 => 'admin_top_navigation',    1 => 'admin_foot_navigation',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_navigation_delete;
                                }

                                return $ret;
                            }
                            not_admin_navigation_delete:

                        }

                        elseif (0 === strpos($pathinfo, '/admin/setting/m')) {
                            if (0 === strpos($pathinfo, '/admin/setting/mobile')) {
                                // admin_setting_mobile_discoveries
                                if ('/admin/setting/mobile_discoveries' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SettingController::mobileDiscoveriesAction',  '_route' => 'admin_setting_mobile_discoveries',  '_permission' =>   array (    0 => 'admin_setting_mobile_settings',  ),  '_h5' => false,);
                                }

                                // admin_setting_mobile
                                if ('/admin/setting/mobile' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SettingController::mobileAction',  '_route' => 'admin_setting_mobile',  '_permission' =>   array (    0 => 'admin_setting_mobile_settings',  ),  '_h5' => false,);
                                }

                                if (0 === strpos($pathinfo, '/admin/setting/mobile_iap_product')) {
                                    // admin_setting_mobile_iap_product
                                    if ('/admin/setting/mobile_iap_product' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SettingController::mobileIapProductAction',  '_route' => 'admin_setting_mobile_iap_product',  '_permission' =>   array (    0 => 'admin_setting_mobile_iap_product',  ),  '_h5' => false,);
                                    }

                                    // admin_setting_mobile_iap_product_delete
                                    if (0 === strpos($pathinfo, '/admin/setting/mobile_iap_product_delete') && preg_match('#^/admin/setting/mobile_iap_product_delete/(?P<productId>[^/]++)$#sD', $pathinfo, $matches)) {
                                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_setting_mobile_iap_product_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\SettingController::mobileIapProductDeleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                        if (!in_array($requestMethod, ['POST'])) {
                                            $allow = array_merge($allow, ['POST']);
                                            goto not_admin_setting_mobile_iap_product_delete;
                                        }

                                        return $ret;
                                    }
                                    not_admin_setting_mobile_iap_product_delete:

                                }

                                // admin_setting_mobile_picture_upload
                                if (0 === strpos($pathinfo, '/admin/setting/mobile/picture/upload') && preg_match('#^/admin/setting/mobile/picture/upload/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_setting_mobile_picture_upload']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\SettingController::mobilePictureUploadAction',  '_permission' =>   array (    0 => 'admin_setting_mobile_settings',  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_setting_mobile_picture_upload;
                                    }

                                    return $ret;
                                }
                                not_admin_setting_mobile_picture_upload:

                                // admin_setting_mobile_picture_remove
                                if (0 === strpos($pathinfo, '/admin/setting/mobile/picture/remove') && preg_match('#^/admin/setting/mobile/picture/remove/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_setting_mobile_picture_remove']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\SettingController::mobilePictureRemoveAction',  '_permission' =>   array (    0 => 'admin_setting_mobile_settings',  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_setting_mobile_picture_remove;
                                    }

                                    return $ret;
                                }
                                not_admin_setting_mobile_picture_remove:

                            }

                            elseif (0 === strpos($pathinfo, '/admin/setting/mailer')) {
                                // admin_setting_mailer
                                if ('/admin/setting/mailer' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SettingController::mailerAction',  '_route' => 'admin_setting_mailer',  '_permission' =>   array (    0 => 'admin_setting_mailer',  ),  '_h5' => false,);
                                }

                                // admin_setting_mailer_test
                                if ('/admin/setting/mailer/test' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SettingController::mailerTestAction',  '_route' => 'admin_setting_mailer_test',  '_permission' =>   array (  ),  '_h5' => false,);
                                    if (!in_array($canonicalMethod, ['GET'])) {
                                        $allow = array_merge($allow, ['GET']);
                                        goto not_admin_setting_mailer_test;
                                    }

                                    return $ret;
                                }
                                not_admin_setting_mailer_test:

                            }

                            elseif (0 === strpos($pathinfo, '/admin/setting/message')) {
                                // admin_setting_user_message
                                if ('/admin/setting/message' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserSettingController::messageAction',  '_route' => 'admin_setting_user_message',  '_permission' =>   array (    0 => 'admin_setting_user_message',  ),  '_h5' => false,);
                                }

                                // admin_message_setting
                                if ('/admin/setting/message-setting' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\MessageSettingController::messageSettingAction',  '_route' => 'admin_message_setting',  '_permission' =>   array (    0 => 'admin_message_course',  ),  '_h5' => false,);
                                }

                            }

                            elseif (0 === strpos($pathinfo, '/admin/setting/my/cloud')) {
                                // admin_my_cloud
                                if ('/admin/setting/my/cloud' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::myCloudAction',  '_route' => 'admin_my_cloud',  '_permission' =>   array (    0 => 'admin_my_cloud_overview',  ),  '_h5' => false,);
                                }

                                // admin_my_cloud_overview
                                if ('/admin/setting/my/cloud/overview' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::myCloudOverviewAction',  '_route' => 'admin_my_cloud_overview',  '_permission' =>   array (    0 => 'admin_my_cloud_overview',  ),  '_h5' => false,);
                                }

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/setting/l')) {
                            if (0 === strpos($pathinfo, '/admin/setting/log')) {
                                // admin_setting_logo_upload
                                if ('/admin/setting/logo/upload' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SettingController::logoUploadAction',  '_route' => 'admin_setting_logo_upload',  '_permission' =>   array (    0 => 'admin_setting_message',  ),  '_h5' => false,);
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_setting_logo_upload;
                                    }

                                    return $ret;
                                }
                                not_admin_setting_logo_upload:

                                // admin_setting_logo_remove
                                if ('/admin/setting/logo/remove' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SettingController::logoRemoveAction',  '_route' => 'admin_setting_logo_remove',  '_permission' =>   array (    0 => 'admin_setting_message',  ),  '_h5' => false,);
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_setting_logo_remove;
                                    }

                                    return $ret;
                                }
                                not_admin_setting_logo_remove:

                                // admin_setting_login_bind
                                if ('/admin/setting/login-connect' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserSettingController::loginConnectAction',  '_route' => 'admin_setting_login_bind',  '_permission' =>   array (    0 => 'admin_setting_login_bind',  ),  '_h5' => false,);
                                }

                                if (0 === strpos($pathinfo, '/admin/setting/logs')) {
                                    // admin_logs
                                    if ('/admin/setting/logs' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\LogController::indexAction',  '_route' => 'admin_logs',  '_permission' =>   array (    0 => 'admin_logs',  ),  '_h5' => false,);
                                    }

                                    // admin_logs_field_change
                                    if ('/admin/setting/logs/logFieldChange' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\LogController::logFieldChangeAction',  '_route' => 'admin_logs_field_change',  '_permission' =>   array (  ),  '_h5' => false,);
                                    }

                                    // admin_logs_action_dicts
                                    if ('/admin/setting/logs/logActions' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\LogController::logActionsAction',  '_route' => 'admin_logs_action_dicts',  '_permission' =>   array (  ),  '_h5' => false,);
                                    }

                                    // admin_logs_prod
                                    if ('/admin/setting/logs/prod' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\LogController::prodAction',  '_route' => 'admin_logs_prod',  '_permission' =>   array (    0 => 'admin_logs_prod',  ),  '_h5' => false,);
                                    }

                                    // admin_logs_username_match
                                    if ('/admin/setting/logs/usernameMatchUsers' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\LogController::usernameMatchUsersAction',  '_route' => 'admin_logs_username_match',  '_permission' =>   array (  ),  '_h5' => false,);
                                    }

                                    // admin_logs_old
                                    if ('/admin/setting/logs/old' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\LogController::oldAction',  '_route' => 'admin_logs_old',  '_permission' =>   array (  ),  '_h5' => false,);
                                    }

                                }

                            }

                            // admin_setting_live_logo_upload
                            if ('/admin/setting/live/logo/upload' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SettingController::liveLogoUploadAction',  '_route' => 'admin_setting_live_logo_upload',  '_permission' =>   array (    0 => 'admin_setting_live_course',  ),  '_h5' => false,);
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_setting_live_logo_upload;
                                }

                                return $ret;
                            }
                            not_admin_setting_live_logo_upload:

                            // admin_setting_live_course_setting
                            if ('/admin/setting/live-course-setting' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseSettingController::liveCourseSettingAction',  '_route' => 'admin_setting_live_course_setting',  '_permission' =>   array (    0 => 'admin_setting_live_course',  ),  '_h5' => false,);
                            }

                        }

                        // admin_setting_favicon_upload
                        if ('/admin/setting/favicon/upload' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SettingController::faviconUploadAction',  '_route' => 'admin_setting_favicon_upload',  '_permission' =>   array (    0 => 'admin_setting_message',  ),  '_h5' => false,);
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_setting_favicon_upload;
                            }

                            return $ret;
                        }
                        not_admin_setting_favicon_upload:

                        // admin_setting_favicon_remove
                        if ('/admin/setting/favicon/remove' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SettingController::faviconRemoveAction',  '_route' => 'admin_setting_favicon_remove',  '_permission' =>   array (    0 => 'admin_setting_message',  ),  '_h5' => false,);
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_setting_favicon_remove;
                            }

                            return $ret;
                        }
                        not_admin_setting_favicon_remove:

                        if (0 === strpos($pathinfo, '/admin/setting/a')) {
                            // admin_setting_auth
                            if ('/admin/setting/auth' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserSettingController::authAction',  '_route' => 'admin_setting_auth',  '_permission' =>   array (    0 => 'admin_user_auth',  ),  '_h5' => false,);
                            }

                            // admin_setting_admin_sync
                            if ('/admin/setting/admin_sync' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SettingController::adminSyncAction',  '_route' => 'admin_setting_admin_sync',  '_permission' =>   array (    0 => 'admin_setting_user_center',  ),  '_h5' => false,);
                            }

                            // admin_article_setting
                            if ('/admin/setting/article' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\OperationSettingController::articleSetAction',  '_route' => 'admin_article_setting',  '_permission' =>   array (    0 => 'admin_article_setting',  ),  '_h5' => false,);
                            }

                            if (0 === strpos($pathinfo, '/admin/setting/app/im')) {
                                // admin_app_im
                                if ('/admin/setting/app/im' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::appImAction',  '_route' => 'admin_app_im',  '_permission' =>   array (    0 => 'admin_app_im',  ),  '_h5' => false,);
                                }

                                // admin_app_im_update
                                if ('/admin/setting/app/im/update' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::appImUpdateStatusAction',  '_route' => 'admin_app_im_update',  '_permission' =>   array (  ),  '_h5' => false,);
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_app_im_update;
                                    }

                                    return $ret;
                                }
                                not_admin_app_im_update:

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/setting/p')) {
                            // admin_setting_payment
                            if ('/admin/setting/payment' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\FinanceSettingController::paymentAction',  '_route' => 'admin_setting_payment',  '_permission' =>   array (    0 => 'admin_payment',  ),  '_h5' => false,);
                            }

                            // admin_setting_post_num_rules
                            if ('/admin/setting/post_num_rules' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SettingController::postNumRulesAction',  '_route' => 'admin_setting_post_num_rules',  '_permission' =>   array (    0 => 'admin_setting_post_num_rules_settings',  ),  '_h5' => false,);
                            }

                            // admin_performance
                            if ('/admin/setting/performance' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SettingController::performanceAction',  '_route' => 'admin_performance',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/setting/c')) {
                            if (0 === strpos($pathinfo, '/admin/setting/cloud')) {
                                // admin_cloud_setting_video
                                if ('/admin/setting/cloud/video' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::videoSettingAction',  '_route' => 'admin_cloud_setting_video',  '_permission' =>   array (    0 => 'admin_cloud_setting_video',  ),  '_h5' => false,);
                                }

                                // admin_cloud_normal_video_delete
                                if ('/admin/setting/cloud/normal/video/delete' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::deleteVideoAction',  '_route' => 'admin_cloud_normal_video_delete',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_setting_cloud
                                if ('/admin/setting/cloud' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::keyAction',  '_route' => 'admin_setting_cloud',  '_permission' =>   array (    0 => 'admin_setting_my_cloud',  ),  '_h5' => false,);
                                }

                                if (0 === strpos($pathinfo, '/admin/setting/cloud/key')) {
                                    // admin_setting_cloud_key
                                    if ('/admin/setting/cloud/key' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::keyAction',  '_route' => 'admin_setting_cloud_key',  '_permission' =>   array (    0 => 'admin_setting_my_cloud',  ),  '_h5' => false,);
                                    }

                                    // admin_setting_cloud_key_info
                                    if ('/admin/setting/cloud/key/info' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::keyInfoAction',  '_route' => 'admin_setting_cloud_key_info',  '_permission' =>   array (    0 => 'admin_setting_my_cloud',  ),  '_h5' => false,);
                                    }

                                    // admin_setting_cloud_key_bind
                                    if ('/admin/setting/cloud/key/bind' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::keyBindAction',  '_route' => 'admin_setting_cloud_key_bind',  '_permission' =>   array (    0 => 'admin_setting_my_cloud',  ),  '_h5' => false,);
                                    }

                                    // admin_setting_cloud_key_update
                                    if ('/admin/setting/cloud/key/update' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::keyUpdateAction',  '_route' => 'admin_setting_cloud_key_update',  '_permission' =>   array (    0 => 'admin_setting_my_cloud',  ),  '_h5' => false,);
                                    }

                                    // admin_setting_cloud_key_apply
                                    if ('/admin/setting/cloud/key/apply' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::keyApplyAction',  '_route' => 'admin_setting_cloud_key_apply',  '_permission' =>   array (    0 => 'admin_setting_my_cloud',  ),  '_h5' => false,);
                                        if (!in_array($requestMethod, ['POST'])) {
                                            $allow = array_merge($allow, ['POST']);
                                            goto not_admin_setting_cloud_key_apply;
                                        }

                                        return $ret;
                                    }
                                    not_admin_setting_cloud_key_apply:

                                    // admin_setting_cloud_key_copyright
                                    if ('/admin/setting/cloud/key/copyright' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::keyCopyrightAction',  '_route' => 'admin_setting_cloud_key_copyright',  '_permission' =>   array (    0 => 'admin_setting_my_cloud',  ),  '_h5' => false,);
                                        if (!in_array($requestMethod, ['POST'])) {
                                            $allow = array_merge($allow, ['POST']);
                                            goto not_admin_setting_cloud_key_copyright;
                                        }

                                        return $ret;
                                    }
                                    not_admin_setting_cloud_key_copyright:

                                }

                                elseif (0 === strpos($pathinfo, '/admin/setting/cloud/video_')) {
                                    // admin_setting_cloud_video_watermark_upload
                                    if ('/admin/setting/cloud/video_watermark/upload' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::videoWatermarkUploadAction',  '_route' => 'admin_setting_cloud_video_watermark_upload',  '_permission' =>   array (    0 => 'admin_cloud_video_overview',  ),  '_h5' => false,);
                                        if (!in_array($requestMethod, ['POST'])) {
                                            $allow = array_merge($allow, ['POST']);
                                            goto not_admin_setting_cloud_video_watermark_upload;
                                        }

                                        return $ret;
                                    }
                                    not_admin_setting_cloud_video_watermark_upload:

                                    // admin_setting_cloud_video_watermark_remove
                                    if ('/admin/setting/cloud/video_watermark/remove' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::videoWatermarkRemoveAction',  '_route' => 'admin_setting_cloud_video_watermark_remove',  '_permission' =>   array (    0 => 'admin_cloud_video_overview',  ),  '_h5' => false,);
                                        if (!in_array($requestMethod, ['POST'])) {
                                            $allow = array_merge($allow, ['POST']);
                                            goto not_admin_setting_cloud_video_watermark_remove;
                                        }

                                        return $ret;
                                    }
                                    not_admin_setting_cloud_video_watermark_remove:

                                    // admin_setting_cloud_video_embed_watermark_upload
                                    if ('/admin/setting/cloud/video_embed_watermark/upload' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::videoEmbedWatermarkUploadAction',  '_route' => 'admin_setting_cloud_video_embed_watermark_upload',  '_permission' =>   array (    0 => 'admin_cloud_video_overview',  ),  '_h5' => false,);
                                        if (!in_array($requestMethod, ['POST'])) {
                                            $allow = array_merge($allow, ['POST']);
                                            goto not_admin_setting_cloud_video_embed_watermark_upload;
                                        }

                                        return $ret;
                                    }
                                    not_admin_setting_cloud_video_embed_watermark_upload:

                                    // admin_setting_cloud_video_embed_watermark_remove
                                    if ('/admin/setting/cloud/video_embed_watermark/remove' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::videoWatermarkRemoveAction',  '_route' => 'admin_setting_cloud_video_embed_watermark_remove',  '_permission' =>   array (    0 => 'admin_cloud_video_overview',  ),  '_h5' => false,);
                                        if (!in_array($requestMethod, ['POST'])) {
                                            $allow = array_merge($allow, ['POST']);
                                            goto not_admin_setting_cloud_video_embed_watermark_remove;
                                        }

                                        return $ret;
                                    }
                                    not_admin_setting_cloud_video_embed_watermark_remove:

                                }

                                // admin_setting_cloud_edulive
                                if ('/admin/setting/cloud/edulive' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::liveSettingAction',  '_route' => 'admin_setting_cloud_edulive',  '_permission' =>   array (    0 => 'admin_setting_cloud_edulive',  ),  '_h5' => false,);
                                }

                            }

                            // admin_classroom_setting
                            if ('/admin/setting/classroom' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ClassroomAdminController::setAction',  '_route' => 'admin_classroom_setting',  '_permission' =>   array (    0 => 'admin_classroom_setting',  ),  '_h5' => false,);
                            }

                            if (0 === strpos($pathinfo, '/admin/setting/co')) {
                                if (0 === strpos($pathinfo, '/admin/setting/cou')) {
                                    // admin_setting_course_setting
                                    if ('/admin/setting/course-setting' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseSettingController::courseSettingAction',  '_route' => 'admin_setting_course_setting',  '_permission' =>   array (    0 => 'admin_setting_course',  ),  '_h5' => false,);
                                    }

                                    // admin_setting_course_avatar
                                    if ('/admin/setting/course-avatar' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseSettingController::courseAvatarAction',  '_route' => 'admin_setting_course_avatar',  '_permission' =>   array (    0 => 'admin_setting_course_avatar',  ),  '_h5' => false,);
                                    }

                                    // admin_coupon_setting
                                    if ('/admin/setting/coupon' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CouponController::settingAction',  '_route' => 'admin_coupon_setting',  '_permission' =>   array (    0 => 'admin_coupon_setting',  ),  '_h5' => false,);
                                    }

                                }

                                elseif (0 === strpos($pathinfo, '/admin/setting/consult-')) {
                                    // admin_setting_consult_setting
                                    if ('/admin/setting/consult-setting' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SiteSettingController::consultSettingAction',  '_route' => 'admin_setting_consult_setting',  '_permission' =>   array (    0 => 'admin_setting_consult_setting',  ),  '_h5' => false,);
                                    }

                                    // admin_setting_consult_upload
                                    if ('/admin/setting/consult-upload' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SiteSettingController::consultUploadAction',  '_route' => 'admin_setting_consult_upload',  '_permission' =>   array (    0 => 'admin_setting_consult_setting',  ),  '_h5' => false,);
                                    }

                                    // admin_setting_consult_webchat_delete
                                    if ('/admin/setting/consult-webchat-delete' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SiteSettingController::deleteWebchatAction',  '_route' => 'admin_setting_consult_webchat_delete',  '_permission' =>   array (    0 => 'admin_setting_consult_setting',  ),  '_h5' => false,);
                                        if (!in_array($requestMethod, ['POST'])) {
                                            $allow = array_merge($allow, ['POST']);
                                            goto not_admin_setting_consult_webchat_delete;
                                        }

                                        return $ret;
                                    }
                                    not_admin_setting_consult_webchat_delete:

                                }

                                // admin_coin_settings
                                if ('/admin/setting/coin' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CoinController::settingsAction',  '_route' => 'admin_coin_settings',  '_permission' =>   array (    0 => 'admin_coin_settings',  ),  '_h5' => false,);
                                }

                                if (0 === strpos($pathinfo, '/admin/setting/coin/model')) {
                                    // admin_coin_model
                                    if ('/admin/setting/coin/model' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CoinController::modelAction',  '_route' => 'admin_coin_model',  '_permission' =>   array (    0 => 'admin_coin_settings',  ),  '_h5' => false,);
                                    }

                                    // admin_coin_model_ajax
                                    if ('/admin/setting/coin/model/ajax' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CoinController::tableAjaxAction',  '_route' => 'admin_coin_model_ajax',  '_permission' =>   array (    0 => 'admin_coin_user_records',  ),  '_h5' => false,);
                                    }

                                }

                            }

                            // admin_setting_cdn
                            if ('/admin/setting/cdn' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CdnSettingController::indexAction',  '_route' => 'admin_setting_cdn',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                        }

                        // admin_setting_refund
                        if ('/admin/setting/refund' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\FinanceSettingController::refundAction',  '_route' => 'admin_setting_refund',  '_permission' =>   array (    0 => 'admin_setting_refund',  ),  '_h5' => false,);
                        }

                        if (0 === strpos($pathinfo, '/admin/setting/de')) {
                            // admin_setting_default_avatar_crop
                            if ('/admin/setting/default/avatar/crop' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SystemDefaultSettingController::defaultAvatarCropAction',  '_route' => 'admin_setting_default_avatar_crop',  '_permission' =>   array (    0 => 'admin_setting_avatar',  ),  '_h5' => false,);
                            }

                            // admin_setting_default_course_picture_crop
                            if ('/admin/setting/default/course/picture/crop' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SystemDefaultSettingController::defaultCoursePictureCropAction',  '_route' => 'admin_setting_default_course_picture_crop',  '_permission' =>   array (    0 => 'admin_setting_avatar',    1 => 'course_manage_picture',  ),  '_h5' => false,);
                            }

                            if (0 === strpos($pathinfo, '/admin/setting/developer')) {
                                // admin_setting_developer
                                if ('/admin/setting/developer' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\DeveloperSettingController::indexAction',  '_route' => 'admin_setting_developer',  '_permission' =>   array (    0 => 'admin',  ),  '_h5' => false,);
                                }

                                // admin_setting_developer_version
                                if ('/admin/setting/developer/version' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\DeveloperSettingController::versionAction',  '_route' => 'admin_setting_developer_version',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_setting_developer_magic
                                if ('/admin/setting/developer/magic' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\DeveloperSettingController::magicAction',  '_route' => 'admin_setting_developer_magic',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                            }

                        }

                        // admin_setting_ip_blacklist
                        if ('/admin/setting/ip-blacklist' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SettingController::ipBlacklistAction',  '_route' => 'admin_setting_ip_blacklist',  '_permission' =>   array (    0 => 'admin_setting_ip_blacklist_manage',  ),  '_h5' => false,);
                        }

                        // admin_invite_set
                        if ('/admin/setting/invite' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\OperationSettingController::inviteSetAction',  '_route' => 'admin_invite_set',  '_permission' =>   array (    0 => 'admin_invite_set',  ),  '_h5' => false,);
                        }

                        if (0 === strpos($pathinfo, '/admin/setting/theme')) {
                            // admin_setting_theme
                            if ('/admin/setting/theme' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ThemeController::indexAction',  '_route' => 'admin_setting_theme',  '_permission' =>   array (    0 => 'admin_setting_theme',  ),  '_h5' => false,);
                            }

                            // admin_setting_theme_change
                            if ('/admin/setting/theme/change' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ThemeController::changeAction',  '_route' => 'admin_setting_theme_change',  '_permission' =>   array (    0 => 'admin_setting_theme',  ),  '_h5' => false,);
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_setting_theme_change;
                                }

                                return $ret;
                            }
                            not_admin_setting_theme_change:

                        }

                        elseif (0 === strpos($pathinfo, '/admin/setting/user-')) {
                            // admin_setting_user_center
                            if ('/admin/setting/user-center' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserSettingController::userCenterAction',  '_route' => 'admin_setting_user_center',  '_permission' =>   array (    0 => 'admin_setting_user_center',  ),  '_h5' => false,);
                            }

                            // admin_setting_avatar
                            if ('/admin/setting/user-avatar' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserSettingController::userAvatarAction',  '_route' => 'admin_setting_avatar',  '_permission' =>   array (    0 => 'admin_setting_avatar',  ),  '_h5' => false,);
                            }

                            // admin_setting_user_fields
                            if ('/admin/setting/user-fields' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserSettingController::userFieldsAction',  '_route' => 'admin_setting_user_fields',  '_permission' =>   array (    0 => 'admin_setting_user_fields',  ),  '_h5' => false,);
                            }

                        }

                        // admin_open_course_setting
                        if ('/admin/setting/open-course-setting' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\OpenCourseSettingController::openCourseSettingAction',  '_route' => 'admin_open_course_setting',  '_permission' =>   array (    0 => 'admin_open_course_setting',  ),  '_h5' => false,);
                        }

                        if (0 === strpos($pathinfo, '/admin/setting/optimize')) {
                            // admin_optimize
                            if ('/admin/setting/optimize' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\OptimizeController::indexAction',  '_route' => 'admin_optimize',  '_permission' =>   array (    0 => 'admin_optimize_settings',  ),  '_h5' => false,);
                            }

                            // admin_optimize_remove_cache
                            if ('/admin/setting/optimize/remove-cache' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\OptimizeController::removeCacheAction',  '_route' => 'admin_optimize_remove_cache',  '_permission' =>   array (    0 => 'admin_optimize_settings',  ),  '_h5' => false,);
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_optimize_remove_cache;
                                }

                                return $ret;
                            }
                            not_admin_optimize_remove_cache:

                            // admin_optimize_remove_backup
                            if ('/admin/setting/optimize/remove-backup' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\OptimizeController::removeBackupAction',  '_route' => 'admin_optimize_remove_backup',  '_permission' =>   array (    0 => 'admin_optimize_settings',  ),  '_h5' => false,);
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_optimize_remove_backup;
                                }

                                return $ret;
                            }
                            not_admin_optimize_remove_backup:

                            // admin_optimize_backupdb
                            if ('/admin/setting/optimize/backupdb' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\OptimizeController::backupdbAction',  '_route' => 'admin_optimize_backupdb',  '_permission' =>   array (    0 => 'admin_optimize_settings',  ),  '_h5' => false,);
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_optimize_backupdb;
                                }

                                return $ret;
                            }
                            not_admin_optimize_backupdb:

                            // admin_optimize_remove_show_progressbar
                            if ('/admin/setting/optimize/show-progressbar' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\OptimizeController::showProgressbarAction',  '_route' => 'admin_optimize_remove_show_progressbar',  '_permission' =>   array (    0 => 'admin_optimize_settings',  ),  '_h5' => false,);
                            }

                        }

                        // admin_setting_questions_setting
                        if ('/admin/setting/questions-setting' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseSettingController::questionsSettingAction',  '_route' => 'admin_setting_questions_setting',  '_permission' =>   array (    0 => 'admin_setting_questions_setting',  ),  '_h5' => false,);
                        }

                        // admin_setting_es_bar
                        if ('/admin/setting/es-bar' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SiteSettingController::esBarSettingAction',  '_route' => 'admin_setting_es_bar',  '_permission' =>   array (    0 => 'admin_setting_es_bar',  ),  '_h5' => false,);
                        }

                        if (0 === strpos($pathinfo, '/admin/setting/edu_cloud')) {
                            if (0 === strpos($pathinfo, '/admin/setting/edu_cloud/search')) {
                                // admin_edu_cloud_search_result_type
                                if ('/admin/setting/edu_cloud/search_result/type' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::setSearchResultTypeAction',  '_route' => 'admin_edu_cloud_search_result_type',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_edu_cloud_setting_search
                                if ('/admin/setting/edu_cloud/search' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::searchSettingAction',  '_route' => 'admin_edu_cloud_setting_search',  '_permission' =>   array (    0 => 'admin_edu_cloud_setting_search',  ),  '_h5' => false,);
                                }

                                // admin_edu_cloud_search_clause
                                if ('/admin/setting/edu_cloud/search/clause' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::searchClauseAction',  '_route' => 'admin_edu_cloud_search_clause',  '_permission' =>   array (    0 => 'admin_edu_cloud_search',  ),  '_h5' => false,);
                                }

                                // admin_edu_cloud_search_close
                                if ('/admin/setting/edu_cloud/search/close' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::searchCloseAction',  '_route' => 'admin_edu_cloud_search_close',  '_permission' =>   array (    0 => 'admin_edu_cloud_search',  ),  '_h5' => false,);
                                }

                                // admin_edu_cloud_search_reapply
                                if ('/admin/setting/edu_cloud/search/reapply' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::searchReapplyAction',  '_route' => 'admin_edu_cloud_search_reapply',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_edu_cloud_search_open
                                if ('/admin/setting/edu_cloud/search/open' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::searchOpenAction',  '_route' => 'admin_edu_cloud_search_open',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                            }

                            // admin_edu_cloud_setting_sms
                            if ('/admin/setting/edu_cloud/sms' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::smsSettingAction',  '_route' => 'admin_edu_cloud_setting_sms',  '_permission' =>   array (    0 => 'admin_edu_cloud_setting_sms',  ),  '_h5' => false,);
                            }

                            // admin_edu_cloud_attachment
                            if ('/admin/setting/edu_cloud/attachment' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::attachmentAction',  '_route' => 'admin_edu_cloud_attachment',  '_permission' =>   array (    0 => 'admin_edu_cloud_attachment',  ),  '_h5' => false,);
                            }

                        }

                        // admin_wap_set
                        if ('/admin/setting/wap' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\OperationSettingController::wapSetAction',  '_route' => 'admin_wap_set',  '_permission' =>   array (    0 => 'admin_wap_set',  ),  '_h5' => false,);
                        }

                        // admin_group_set
                        if ('/admin/setting/group' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\OperationSettingController::groupSetAction',  '_route' => 'admin_group_set',  '_permission' =>   array (    0 => 'admin_group_set',  ),  '_h5' => false,);
                        }

                    }

                    // admin_study_statistic
                    if (0 === strpos($pathinfo, '/admin/study/statistic') && preg_match('#^/admin/study/statistic/(?P<period>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_study_statistic']), array (  '_controller' => 'CustomBundle\\Controller\\Admin\\DefaultController::studyStatisticAction',  '_permission' =>   array (    0 => 'admin',  ),  '_h5' => false,));
                    }

                    // admin_system_status
                    if ('/admin/system/status' === $pathinfo) {
                        return array (  '_controller' => 'CustomBundle\\Controller\\Admin\\DefaultController::systemStatusAction',  '_route' => 'admin_system_status',  '_permission' =>   array (    0 => 'admin',  ),  '_h5' => false,);
                    }

                    // sms_prepare
                    if (0 === strpos($pathinfo, '/admin/sms/prepare') && preg_match('#^/admin/sms/prepare/(?P<targetType>[^/]++)/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'sms_prepare']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\SmsController::prepareAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                }

                // admin_notice_modal
                if ('/admin/notice/modal' === $pathinfo) {
                    return array (  '_controller' => 'CustomBundle\\Controller\\Admin\\DefaultController::noticeAction',  '_route' => 'admin_notice_modal',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                if (0 === strpos($pathinfo, '/admin/note')) {
                    // admin_course_note
                    if ('/admin/note' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseNoteController::indexAction',  '_route' => 'admin_course_note',  '_permission' =>   array (    0 => 'admin_course_note_manage',  ),  '_h5' => false,);
                    }

                    // admin_note_delete
                    if (preg_match('#^/admin/note/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_note_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseNoteController::deleteAction',  '_permission' =>   array (    0 => 'admin_course_note_manage',  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_admin_note_delete;
                        }

                        return $ret;
                    }
                    not_admin_note_delete:

                    // admin_note_batch_delete
                    if ('/admin/note/batch_delete' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseNoteController::batchDeleteAction',  '_route' => 'admin_note_batch_delete',  '_permission' =>   array (    0 => 'admin_course_note_manage',  ),  '_h5' => false,);
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_admin_note_batch_delete;
                        }

                        return $ret;
                    }
                    not_admin_note_batch_delete:

                }

                elseif (0 === strpos($pathinfo, '/admin/c')) {
                    if (0 === strpos($pathinfo, '/admin/co')) {
                        if (0 === strpos($pathinfo, '/admin/course')) {
                            // admin_question_remind_teachers
                            if (preg_match('#^/admin/course/(?P<courseId>[^/]++)/question/(?P<questionId>[^/]++)/remindTeachers$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_question_remind_teachers']), array (  '_controller' => 'CustomBundle\\Controller\\Admin\\DefaultController::questionRemindTeachersAction',  '_permission' =>   array (    0 => 'admin',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_question_remind_teachers;
                                }

                                return $ret;
                            }
                            not_admin_question_remind_teachers:

                            // admin_course_explore
                            if (0 === strpos($pathinfo, '/admin/course/explore') && preg_match('#^/admin/course/explore/(?P<period>[^/]++)$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_course_explore']), array (  '_controller' => 'CustomBundle\\Controller\\Admin\\DefaultController::courseExploreAction',  '_permission' =>   array (    0 => 'admin',  ),  '_h5' => false,));
                            }

                            if (0 === strpos($pathinfo, '/admin/course_set')) {
                                // admin_course_set
                                if (preg_match('#^/admin/course_set/(?P<filter>[^/]++)/index$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_course_set']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseSetController::indexAction',  'filter' => 'normal',  '_permission' =>   array (    0 => 'admin_course_manage',  ),  '_h5' => false,));
                                }

                                // admin_course_list
                                if (preg_match('#^/admin/course_set/(?P<id>[^/]++)/course/list$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_course_list']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseSetController::courseListAction',  '_permission' =>   array (    0 => 'admin_course_manage',  ),  '_h5' => false,));
                                }

                                // admin_course_set_clone_by_web
                                if (preg_match('#^/admin/course_set/(?P<courseSetId>[^/]++)/clone_by_web$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_course_set_clone_by_web']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseSetController::cloneByWebAction',  '_permission' =>   array (    0 => 'admin_course_manage',  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_course_set_clone_by_web;
                                    }

                                    return $ret;
                                }
                                not_admin_course_set_clone_by_web:

                                // admin_course_set_clone_by_crontab
                                if (preg_match('#^/admin/course_set/(?P<courseSetId>[^/]++)/clone_by_crontab$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_course_set_clone_by_crontab']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseSetController::cloneByCrontabAction',  '_permission' =>   array (    0 => 'admin_course_manage',  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_course_set_clone_by_crontab;
                                    }

                                    return $ret;
                                }
                                not_admin_course_set_clone_by_crontab:

                                // admin_course_set_delete
                                if (preg_match('#^/admin/course_set/(?P<id>[^/]++)/delete(?:/(?P<type>[^/]++))?$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_course_set_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseSetController::deleteAction',  'type' => '',  '_permission' =>   array (    0 => 'admin_course_manage',  ),  '_h5' => false,));
                                }

                                // admin_course_set_clone
                                if (preg_match('#^/admin/course_set/(?P<courseSetId>[^/]++)/clone$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_course_set_clone']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseSetController::cloneAction',  'type' => 'web',  '_permission' =>   array (    0 => 'admin_course_manage',  ),  '_h5' => false,));
                                }

                                // admin_course_set_publish
                                if (preg_match('#^/admin/course_set/(?P<id>[^/]++)/publish$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_course_set_publish']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseSetController::publishAction',  '_permission' =>   array (    0 => 'admin_course_manage',  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_course_set_publish;
                                    }

                                    return $ret;
                                }
                                not_admin_course_set_publish:

                                // admin_course_set_close
                                if (preg_match('#^/admin/course_set/(?P<id>[^/]++)/close$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_course_set_close']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseSetController::closeAction',  '_permission' =>   array (    0 => 'admin_course_set_close',  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_course_set_close;
                                    }

                                    return $ret;
                                }
                                not_admin_course_set_close:

                                // admin_course_set_recommend
                                if (preg_match('#^/admin/course_set/(?P<id>[^/]++)/recommend$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_course_set_recommend']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseSetController::recommendAction',  '_permission' =>   array (    0 => 'admin_course_set_recommend_list',    1 => 'admin_course_set_recommend',  ),  '_h5' => false,));
                                }

                                // admin_course_set_cancel_recommend
                                if (preg_match('#^/admin/course_set/(?P<id>[^/]++)/recommend/cancel/(?P<target>[^/]++)$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_course_set_cancel_recommend']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseSetController::cancelRecommendAction',  '_permission' =>   array (    0 => 'admin_course_set_recommend_list',    1 => 'admin_course_set_cancel_recommend',  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_course_set_cancel_recommend;
                                    }

                                    return $ret;
                                }
                                not_admin_course_set_cancel_recommend:

                                // admin_course_chooser
                                if ('/admin/course_set/chooser' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseSetController::chooserAction',  '_route' => 'admin_course_chooser',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_course_set_recommend_list
                                if ('/admin/course_set/recommend/list' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseSetController::recommendListAction',  '_route' => 'admin_course_set_recommend_list',  '_permission' =>   array (    0 => 'admin_course_set_recommend_list',  ),  '_h5' => false,);
                                }

                                // admin_course_set_data
                                if (preg_match('#^/admin/course_set/(?P<filter>[^/]++)/data$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_course_set_data']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseSetController::dataAction',  'filter' => 'normal',  '_permission' =>   array (    0 => 'admin_course_set_data',  ),  '_h5' => false,));
                                }

                                if (0 === strpos($pathinfo, '/admin/course_set/detail/data')) {
                                    // course_set_detail_data
                                    if (preg_match('#^/admin/course_set/detail/data/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_detail_data']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseSetController::detailDataAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                    }

                                    // admin_course_set_detail_data_export_prepare
                                    if (preg_match('#^/admin/course_set/detail/data/(?P<courseId>[^/]++)/export/prepare$#sD', $pathinfo, $matches)) {
                                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_course_set_detail_data_export_prepare']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseSetController::prepareForExportCourseDetailDataAction',  '_permission' =>   array (    0 => 'admin_course_set_data',  ),  '_h5' => false,));
                                    }

                                    // admin_course_set_detail_data_export
                                    if (preg_match('#^/admin/course_set/detail/data/(?P<courseId>[^/]++)/export$#sD', $pathinfo, $matches)) {
                                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_course_set_detail_data_export']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseSetController::exportCourseDetailDataAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                    }

                                }

                            }

                            // admin_course_category
                            if ('/admin/course/category' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseController::categoryAction',  '_route' => 'admin_course_category',  '_permission' =>   array (    0 => 'admin_course_category_manage',  ),  '_h5' => false,);
                            }

                            // admin_courses_data
                            if (0 === strpos($pathinfo, '/admin/courses/data') && preg_match('#^/admin/courses/data/(?P<courseSetId>[^/]++)$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_courses_data']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseController::coursesDataAction',  '_permission' =>   array (    0 => 'admin_course_set_data',  ),  '_h5' => false,));
                            }

                            if (0 === strpos($pathinfo, '/admin/course/search')) {
                                // admin_course_search
                                if ('/admin/course/search' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseController::searchAction',  '_route' => 'admin_course_search',  '_permission' =>   array (    0 => 'admin_operation_mobile_select_manage',  ),  '_h5' => false,);
                                }

                                // admin_course_search_to_fill_banner
                                if ('/admin/course/search_to_fill_banner' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseController::searchToFillBannerAction',  '_route' => 'admin_course_search_to_fill_banner',  '_permission' =>   array (    0 => 'admin_operation_mobile_select_manage',  ),  '_h5' => false,);
                                }

                            }

                            // admin_course_task_data_export_prepare
                            if (preg_match('#^/admin/course/(?P<courseId>[^/]++)/datas/export/prepare$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_course_task_data_export_prepare']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseController::prepareForExportTasksDatasAction',  '_permission' =>   array (    0 => 'admin_course_set_data',  ),  '_h5' => false,));
                            }

                            // admin_course_task_data_export
                            if (preg_match('#^/admin/course/(?P<courseId>[^/]++)/datas/export$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_course_task_data_export']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseController::exportTaskDatasAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_course_tag_match
                            if ('/admin/course_set/tag/match' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseSetController::courseTagMatchAction',  '_route' => 'admin_course_tag_match',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/coupon')) {
                            // admin_coupon
                            if ('/admin/coupon' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CouponBatchController::indexAction',  '_route' => 'admin_coupon',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_coupon_generate
                            if ('/admin/coupon/generate' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CouponBatchController::generateAction',  '_route' => 'admin_coupon_generate',  '_permission' =>   array (    0 => 'admin_coupon_generate',  ),  '_h5' => false,);
                            }

                            // admin_coupon_batch_create
                            if (0 === strpos($pathinfo, '/admin/coupon/batch') && preg_match('#^/admin/coupon/batch/(?P<batchId>[^/]++)/create$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_coupon_batch_create']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CouponBatchController::batchCreateAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_coupon_batch_create;
                                }

                                return $ret;
                            }
                            not_admin_coupon_batch_create:

                            // admin_coupon_checkprefix
                            if ('/admin/coupon/checkprefix' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CouponBatchController::checkPrefixAction',  '_route' => 'admin_coupon_checkprefix',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_coupon_delete
                            if (preg_match('#^/admin/coupon/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_coupon_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CouponBatchController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_coupon_delete;
                                }

                                return $ret;
                            }
                            not_admin_coupon_delete:

                            // admin_coupon_batch_export
                            if (0 === strpos($pathinfo, '/admin/coupon/export/csv') && preg_match('#^/admin/coupon/export/csv/(?P<batchId>[^/]++)$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_coupon_batch_export']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CouponBatchController::exportCsvAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            if (0 === strpos($pathinfo, '/admin/coupon/show')) {
                                // admin_coupon_show
                                if (preg_match('#^/admin/coupon/show/(?P<batchId>[^/]++)$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_coupon_show']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CouponBatchController::detailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                }

                                // admin_coupon_show_target
                                if (0 === strpos($pathinfo, '/admin/coupon/show/target') && preg_match('#^/admin/coupon/show/target/(?P<targetType>[^/]++)/(?P<batchId>[^/]++)$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_coupon_show_target']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CouponBatchController::targetDetailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                }

                            }

                            // admin_coupon_get_receive_url
                            if (0 === strpos($pathinfo, '/admin/coupon/getreceiveurl') && preg_match('#^/admin/coupon/getreceiveurl/(?P<batchId>[^/]++)$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_coupon_get_receive_url']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CouponBatchController::getReceiveUrlAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_coupon_query
                            if ('/admin/coupon/index' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CouponController::indexAction',  '_route' => 'admin_coupon_query',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            if (0 === strpos($pathinfo, '/admin/coupon/batch')) {
                                // admin_coupon_chooser
                                if (0 === strpos($pathinfo, '/admin/coupon/batch/chooser') && preg_match('#^/admin/coupon/batch/chooser/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_coupon_chooser']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CouponBatchController::chooserCouponAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                }

                                // admin_coupon_chooser_resource_list
                                if (preg_match('#^/admin/coupon/batch/(?P<batchId>[^/]++)/chooser/resource/list$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_coupon_chooser_resource_list']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CouponBatchController::chooserResourceListAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                }

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/content')) {
                            // admin_content
                            if ('/admin/content' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ContentController::indexAction',  '_route' => 'admin_content',  '_permission' =>   array (    0 => 'admin_content',  ),  '_h5' => false,);
                            }

                            // admin_content_create
                            if (0 === strpos($pathinfo, '/admin/content/create') && preg_match('#^/admin/content/create/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_content_create']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\ContentController::createAction',  '_permission' =>   array (    0 => 'admin_content',  ),  '_h5' => false,));
                            }

                            // admin_content_edit
                            if (preg_match('#^/admin/content/(?P<id>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_content_edit']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\ContentController::editAction',  '_permission' =>   array (    0 => 'admin_content',  ),  '_h5' => false,));
                            }

                            // admin_content_publish
                            if (preg_match('#^/admin/content/(?P<id>[^/]++)/publish$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_content_publish']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\ContentController::publishAction',  '_permission' =>   array (    0 => 'admin_content',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_content_publish;
                                }

                                return $ret;
                            }
                            not_admin_content_publish:

                            // admin_content_trash
                            if (preg_match('#^/admin/content/(?P<id>[^/]++)/trash$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_content_trash']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\ContentController::trashAction',  '_permission' =>   array (    0 => 'admin_content',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_content_trash;
                                }

                                return $ret;
                            }
                            not_admin_content_trash:

                            // admin_content_delete
                            if (preg_match('#^/admin/content/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_content_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\ContentController::deleteAction',  '_permission' =>   array (    0 => 'admin_content',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_content_delete;
                                }

                                return $ret;
                            }
                            not_admin_content_delete:

                            // admin_content_alias_check
                            if ('/admin/content/alias/check' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ContentController::aliasCheckAction',  '_route' => 'admin_content_alias_check',  '_permission' =>   array (    0 => 'admin_content',  ),  '_h5' => false,);
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/coin')) {
                            if (0 === strpos($pathinfo, '/admin/coin/picture')) {
                                // admin_coin_picture
                                if ('/admin/coin/picture' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CoinController::pictureAction',  '_route' => 'admin_coin_picture',  '_permission' =>   array (    0 => 'admin_coin_settings',  ),  '_h5' => false,);
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_coin_picture;
                                    }

                                    return $ret;
                                }
                                not_admin_coin_picture:

                                // admin_coin_picture_remove
                                if ('/admin/coin/picture/remove' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CoinController::pictureRemoveAction',  '_route' => 'admin_coin_picture_remove',  '_permission' =>   array (    0 => 'admin_coin_settings',  ),  '_h5' => false,);
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_coin_picture_remove;
                                    }

                                    return $ret;
                                }
                                not_admin_coin_picture_remove:

                            }

                            elseif (0 === strpos($pathinfo, '/admin/coin/records')) {
                                // admin_coin_records
                                if ('/admin/coin/records' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CoinController::recordsAction',  '_route' => 'admin_coin_records',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_coin_user_records
                                if ('/admin/coin/records/user' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CoinController::userRecordsAction',  '_route' => 'admin_coin_user_records',  '_permission' =>   array (    0 => 'admin_coin_user_records',  ),  '_h5' => false,);
                                }

                            }

                            // admin_coin_flow_detail
                            if ('/admin/coin/flow/detail' === $trimmedPathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CoinController::flowDetailAction',  '_route' => 'admin_coin_flow_detail',  '_permission' =>   array (    0 => 'admin_coin_user_records',  ),  '_h5' => false,);
                                if ('/' === substr($pathinfo, -1)) {
                                    // no-op
                                } elseif ('GET' !== $canonicalMethod) {
                                    goto not_admin_coin_flow_detail;
                                } else {
                                    return array_replace($ret, $this->redirect($rawPathinfo.'/', 'admin_coin_flow_detail'));
                                }

                                return $ret;
                            }
                            not_admin_coin_flow_detail:

                            // admin_coin_model_save
                            if ('/admin/coin/model/save' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CoinController::modelSaveAction',  '_route' => 'admin_coin_model_save',  '_permission' =>   array (    0 => 'admin_coin_user_records',  ),  '_h5' => false,);
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/common')) {
                            // admin_common_add
                            if ('/admin/common/add' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CommonAdminController::addCommonAdminAction',  '_route' => 'admin_common_add',  '_permission' =>   array (    0 => 'admin',  ),  '_h5' => false,);
                            }

                            // admin_common_admin
                            if ('/admin/common/admin' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CommonAdminController::commonAdminAction',  '_route' => 'admin_common_admin',  '_permission' =>   array (    0 => 'admin',  ),  '_h5' => false,);
                            }

                            // admin_common_remove
                            if (0 === strpos($pathinfo, '/admin/common/remove') && preg_match('#^/admin/common/remove/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_common_remove']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CommonAdminController::commonRemoveAction',  '_permission' =>   array (    0 => 'admin',  ),  '_h5' => false,));
                            }

                        }

                    }

                    // admin_check_password
                    if ('/admin/check/password' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseController::checkPasswordAction',  '_route' => 'admin_check_password',  '_permission' =>   array (    0 => 'admin_course_manage',  ),  '_h5' => false,);
                    }

                    if (0 === strpos($pathinfo, '/admin/cloud')) {
                        // admin_cloud_video_overview
                        if ('/admin/cloud/video/overview' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::videoOverviewAction',  '_route' => 'admin_cloud_video_overview',  '_permission' =>   array (    0 => 'admin_cloud_video_overview',  ),  '_h5' => false,);
                        }

                        // admin_cloud_video_overview_renew
                        if ('/admin/cloud/video/renew/modal' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::showRenewVideoAction',  '_route' => 'admin_cloud_video_overview_renew',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // admin_cloud_access
                        if ('/admin/cloud/access' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::accessAction',  '_route' => 'admin_cloud_access',  '_permission' =>   array (    0 => 'admin_my_cloud_overview',  ),  '_h5' => false,);
                        }

                        // admin_cloud_account_person
                        if ('/admin/cloud/account/person' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::accountPersonAction',  '_route' => 'admin_cloud_account_person',  '_permission' =>   array (    0 => 'admin_my_cloud_overview',  ),  '_h5' => false,);
                        }

                        // admin_cloud_recharge
                        if ('/admin/cloud/recharge' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::rechargeAction',  '_route' => 'admin_cloud_recharge',  '_permission' =>   array (    0 => 'admin_my_cloud_overview',  ),  '_h5' => false,);
                        }

                        // admin_cloud_list_coupon
                        if ('/admin/cloud/list/coupon' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::listCouponAction',  '_route' => 'admin_cloud_list_coupon',  '_permission' =>   array (    0 => 'admin_my_cloud_overview',  ),  '_h5' => false,);
                        }

                        // admin_cloud_service_overview
                        if (0 === strpos($pathinfo, '/admin/cloud/service') && preg_match('#^/admin/cloud/service/(?P<type>[^/]++)/overview$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_cloud_service_overview']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::serviceOverviewAction',  '_permission' =>   array (    0 => 'admin_my_cloud_overview',  ),  '_h5' => false,));
                        }

                        // admin_cloud_detail
                        if ('/admin/cloud/detail' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::detailAction',  '_route' => 'admin_cloud_detail',  '_permission' =>   array (    0 => 'admin_my_cloud_overview',  ),  '_h5' => false,);
                        }

                        // admin_cloud_buy
                        if (preg_match('#^/admin/cloud/(?P<type>[^/]++)/buy$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_cloud_buy']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::buyAction',  '_permission' =>   array (    0 => 'admin_my_cloud_overview',  ),  '_h5' => false,));
                        }

                        // admin_cloud_live_more
                        if ('/admin/cloud/live/more' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::liveMoreAction',  '_route' => 'admin_cloud_live_more',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // admin_cloud_tlp
                        if ('/admin/cloud/tlp' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::tlpAction',  '_route' => 'admin_cloud_tlp',  '_permission' =>   array (    0 => 'admin_my_cloud_overview',  ),  '_h5' => false,);
                        }

                        if (0 === strpos($pathinfo, '/admin/cloud/video')) {
                            // admin_cloud_video
                            if ('/admin/cloud/video' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::videoAction',  '_route' => 'admin_cloud_video',  '_permission' =>   array (    0 => 'admin_my_cloud_overview',  ),  '_h5' => false,);
                            }

                            // admin_cloud_video_detail
                            if ('/admin/cloud/video/detail' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::videoDetailAction',  '_route' => 'admin_cloud_video_detail',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_cloud_video_switch
                            if ('/admin/cloud/video/switch' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::videoSwitchAction',  '_route' => 'admin_cloud_video_switch',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                        }

                        // admin_cloud_show
                        if (preg_match('#^/admin/cloud/(?P<type>[^/]++)/show$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_cloud_show']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::cloudShowAction',  'type' => 'video',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // admin_cloud_email_buy
                        if (preg_match('#^/admin/cloud/(?P<type>[^/]++)/buy/custom$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_cloud_email_buy']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::emailBuyAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        if (0 === strpos($pathinfo, '/admin/cloud/sms')) {
                            if (0 === strpos($pathinfo, '/admin/cloud/sms/s')) {
                                // admin_cloud_sms_sign
                                if ('/admin/cloud/sms/sign' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::smsSignAction',  '_route' => 'admin_cloud_sms_sign',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_cloud_sms_statistics
                                if ('/admin/cloud/sms/statistics' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::smsStatisticsAction',  '_route' => 'admin_cloud_sms_statistics',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_cloud_sms_setting
                                if ('/admin/cloud/sms/setting' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::smsSettingAction',  '_route' => 'admin_cloud_sms_setting',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                            }

                            // admin_cloud_sms_account
                            if ('/admin/cloud/sms/account' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::smsAccountAction',  '_route' => 'admin_cloud_sms_account',  '_permission' =>   array (    0 => 'admin_my_cloud_overview',  ),  '_h5' => false,);
                            }

                            // admin_cloud_sms_detail
                            if ('/admin/cloud/sms/detail' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::smsDetailAction',  '_route' => 'admin_cloud_sms_detail',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/cloud/search')) {
                            // admin_cloud_search
                            if ('/admin/cloud/search' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::searchAction',  '_route' => 'admin_cloud_search',  '_permission' =>   array (    0 => 'admin_my_cloud_overview',  ),  '_h5' => false,);
                            }

                            // admin_cloud_search_detail
                            if ('/admin/cloud/search/detail' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::searchDetailAction',  '_route' => 'admin_cloud_search_detail',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/cloud/e')) {
                            // admin_cloud_email_account
                            if ('/admin/cloud/email/count' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::emailAccountAction',  '_route' => 'admin_cloud_email_account',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            if (0 === strpos($pathinfo, '/admin/cloud/email/list')) {
                                // admin_cloud_email_list
                                if ('/admin/cloud/email/list' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::emailListAction',  '_route' => 'admin_cloud_email_list',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_cloud_email_count
                                if ('/admin/cloud/email/list' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::emailCountAction',  '_route' => 'admin_cloud_email_count',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                            }

                            elseif (0 === strpos($pathinfo, '/admin/cloud/edulive')) {
                                // admin_cloud_edulive_overview
                                if ('/admin/cloud/edulive/overview' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::liveOverviewAction',  '_route' => 'admin_cloud_edulive_overview',  '_permission' =>   array (    0 => 'admin_cloud_edulive_overview',  ),  '_h5' => false,);
                                }

                                // admin_cloud_edulive_logo_crop
                                if (preg_match('#^/admin/cloud/edulive/(?P<type>[^/]++)/logo/crop$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_cloud_edulive_logo_crop']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::logoCropAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                }

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/cloud/live')) {
                            // admin_cloud_live_upgrade
                            if ('/admin/cloud/live/upgrade' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::liveUpgradeAction',  '_route' => 'admin_cloud_live_upgrade',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_cloud_live_renew
                            if ('/admin/cloud/live/renew' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::liveRenewAction',  '_route' => 'admin_cloud_live_renew',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_cloud_live
                            if ('/admin/cloud/live' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::liveAction',  '_route' => 'admin_cloud_live',  '_permission' =>   array (    0 => 'admin_my_cloud_overview',  ),  '_h5' => false,);
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/cloud/video')) {
                            // admin_cloud_video_account
                            if ('/admin/cloud/video/account' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::videoAccountAction',  '_route' => 'admin_cloud_video_account',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_cloud_video_upgrade
                            if ('/admin/cloud/video/upgrade' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::videoUpgradeAction',  '_route' => 'admin_cloud_video_upgrade',  '_permission' =>   array (    0 => 'admin_my_cloud_overview',  ),  '_h5' => false,);
                            }

                            // admin_cloud_video_renew
                            if ('/admin/cloud/video/renew' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::videoRenewAction',  '_route' => 'admin_cloud_video_renew',  '_permission' =>   array (    0 => 'admin_my_cloud_overview',  ),  '_h5' => false,);
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/cloud_file')) {
                            if (0 === strpos($pathinfo, '/admin/cloud_files')) {
                                // admin_cloud_file
                                if ('/admin/cloud_files' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudFileController::indexAction',  '_route' => 'admin_cloud_file',  '_permission' =>   array (    0 => 'admin_cloud_file',  ),  '_h5' => false,);
                                }

                                // admin_cloud_file_manage
                                if ('/admin/cloud_files/manage' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudFileController::manageAction',  '_route' => 'admin_cloud_file_manage',  '_permission' =>   array (    0 => 'admin_cloud_file_manage',  ),  '_h5' => false,);
                                }

                                // admin_cloud_file_render_table
                                if ('/admin/cloud_files/table/render' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudFileController::renderAction',  '_route' => 'admin_cloud_file_render_table',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                            }

                            // admin_cloud_file_detail
                            if (preg_match('#^/admin/cloud_file/(?P<globalId>[^/]++)/detail$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_cloud_file_detail']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudFileController::detailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_cloud_file_edit
                            if (preg_match('#^/admin/cloud_file/(?P<globalId>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_cloud_file_edit']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudFileController::editAction',  'fields' => '',  '_permission' =>   array (  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_cloud_file_edit;
                                }

                                return $ret;
                            }
                            not_admin_cloud_file_edit:

                            // admin_cloud_file_preview
                            if (preg_match('#^/admin/cloud_file/(?P<globalId>[^/]++)/preview$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_cloud_file_preview']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudFileController::previewAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_cloud_file_reconvert
                            if (preg_match('#^/admin/cloud_file/(?P<globalId>[^/]++)/reconvert$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_cloud_file_reconvert']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudFileController::reconvertAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_cloud_file_download
                            if (preg_match('#^/admin/cloud_file/(?P<globalId>[^/]++)/download$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_cloud_file_download']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudFileController::downloadAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_cloud_file_delete
                            if (preg_match('#^/admin/cloud_file/(?P<globalId>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_cloud_file_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudFileController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_cloud_file_delete;
                                }

                                return $ret;
                            }
                            not_admin_cloud_file_delete:

                            // admin_cloud_file_batch_delete
                            if ('/admin/cloud_file/delete/batch' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudFileController::batchDeleteAction',  '_route' => 'admin_cloud_file_batch_delete',  '_permission' =>   array (  ),  '_h5' => false,);
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_cloud_file_batch_delete;
                                }

                                return $ret;
                            }
                            not_admin_cloud_file_batch_delete:

                            // admin_cloud_file_delete_modal_show
                            if ('/admin/cloud_file/delete/show' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudFileController::deleteShowAction',  '_route' => 'admin_cloud_file_delete_modal_show',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_cloud_file_tag_show
                            if ('/admin/cloud_file/tag/show' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudFileController::batchTagShowAction',  '_route' => 'admin_cloud_file_tag_show',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                        }

                        // admin_cloud_attachment
                        if ('/admin/cloud_attachment' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudAttachmentController::indexAction',  '_route' => 'admin_cloud_attachment',  '_permission' =>   array (    0 => 'admin_cloud_attachment_manage',  ),  '_h5' => false,);
                        }

                        // admin_cloud_consult_setting
                        if ('/admin/cloud/consult/setting' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::consultSettingAction',  '_route' => 'admin_cloud_consult_setting',  '_permission' =>   array (    0 => 'admin_cloud_consult_setting',  ),  '_h5' => false,);
                        }

                        // admin_cloud_ad
                        if ('/admin/cloud/ad' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::getAdAction',  '_route' => 'admin_cloud_ad',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // admin_wechat_app_access
                        if ('/admin/cloud/accessWechat' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CloudController::accessWechatAction',  '_route' => 'admin_wechat_app_access',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                    }

                    elseif (0 === strpos($pathinfo, '/admin/classroom')) {
                        // admin_classroom
                        if ('/admin/classroom/index' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ClassroomAdminController::indexAction',  '_route' => 'admin_classroom',  '_permission' =>   array (    0 => 'admin_classroom',  ),  '_h5' => false,);
                        }

                        // admin_classroom_create
                        if ('/admin/classroom/create' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ClassroomAdminController::addClassroomAction',  '_route' => 'admin_classroom_create',  '_permission' =>   array (    0 => 'admin_classroom_create',  ),  '_h5' => false,);
                        }

                        // admin_classroom_close
                        if (preg_match('#^/admin/classroom/(?P<id>[^/]++)/close$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_classroom_close']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\ClassroomAdminController::closeClassroomAction',  '_permission' =>   array (    0 => 'admin_classroom_close',  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_classroom_close;
                            }

                            return $ret;
                        }
                        not_admin_classroom_close:

                        // admin_classroom_open
                        if (preg_match('#^/admin/classroom/(?P<id>[^/]++)/open$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_classroom_open']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\ClassroomAdminController::openClassroomAction',  '_permission' =>   array (    0 => 'admin_classroom_open',  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_classroom_open;
                            }

                            return $ret;
                        }
                        not_admin_classroom_open:

                        // admin_classroom_delete
                        if (preg_match('#^/admin/classroom/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_classroom_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\ClassroomAdminController::deleteClassroomAction',  '_permission' =>   array (    0 => 'admin_classroom_delete',  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_classroom_delete;
                            }

                            return $ret;
                        }
                        not_admin_classroom_delete:

                        // admin_classroom_category
                        if ('/admin/classroom/category' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ClassroomCategoryController::indexAction',  '_route' => 'admin_classroom_category',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        if (0 === strpos($pathinfo, '/admin/classroom/thread')) {
                            // admin_classroom_thread
                            if ('/admin/classroom/thread' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ClassroomThreadAdminController::indexAction',  '_route' => 'admin_classroom_thread',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_classroom_thread_delete
                            if (preg_match('#^/admin/classroom/thread/(?P<threadId>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_classroom_thread_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\ClassroomThreadAdminController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_classroom_thread_delete;
                                }

                                return $ret;
                            }
                            not_admin_classroom_thread_delete:

                            // admin_classroom_thread_batch_delete
                            if ('/admin/classroom/thread/batch_delete' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ClassroomThreadAdminController::batchDeleteAction',  '_route' => 'admin_classroom_thread_batch_delete',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                        }

                        // admin_classroom_set_recommend
                        if (preg_match('#^/admin/classroom/(?P<id>[^/]++)/recommend$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_classroom_set_recommend']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\ClassroomAdminController::recommendAction',  '_permission' =>   array (    0 => 'admin_classroom_set_recommend',  ),  '_h5' => false,));
                        }

                        // admin_classroom_cancel_recommend
                        if (preg_match('#^/admin/classroom/(?P<id>[^/]++)/recommend/cancel$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_classroom_cancel_recommend']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\ClassroomAdminController::cancelRecommendAction',  '_permission' =>   array (    0 => 'admin_classroom_cancel_recommend',  ),  '_h5' => false,));
                        }

                        // admin_classroom_recommend_list
                        if ('/admin/classroom/recommend/list' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ClassroomAdminController::recommendListAction',  '_route' => 'admin_classroom_recommend_list',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        if (0 === strpos($pathinfo, '/admin/classroom/review')) {
                            // admin_classroom_review
                            if ('/admin/classroom/review' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ClassroomReviewController::indexAction',  '_route' => 'admin_classroom_review',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_classroom_review_delete
                            if (preg_match('#^/admin/classroom/review/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_classroom_review_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\ClassroomReviewController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_classroom_review_delete;
                                }

                                return $ret;
                            }
                            not_admin_classroom_review_delete:

                            // admin_classroom_review_batch_delete
                            if ('/admin/classroom/review/batch_delete' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ClassroomReviewController::batchDeleteAction',  '_route' => 'admin_classroom_review_batch_delete',  '_permission' =>   array (  ),  '_h5' => false,);
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_classroom_review_batch_delete;
                                }

                                return $ret;
                            }
                            not_admin_classroom_review_batch_delete:

                        }

                        // admin_classroom_chooser
                        if ('/admin/classroom/chooser' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ClassroomAdminController::chooserAction',  '_route' => 'admin_classroom_chooser',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                    }

                    elseif (0 === strpos($pathinfo, '/admin/category')) {
                        // admin_category_create
                        if ('/admin/category/create' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CategoryController::createAction',  '_route' => 'admin_category_create',  '_permission' =>   array (    0 => 'admin_category_create',  ),  '_h5' => false,);
                        }

                        // admin_category_checkcode
                        if ('/admin/category/checkcode' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CategoryController::checkCodeAction',  '_route' => 'admin_category_checkcode',  '_permission' =>   array (    0 => 'admin_course_category_manage',  ),  '_h5' => false,);
                        }

                        // admin_category_edit
                        if (preg_match('#^/admin/category/(?P<id>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_category_edit']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CategoryController::editAction',  '_permission' =>   array (    0 => 'admin_course_category_manage',  ),  '_h5' => false,));
                        }

                        // admin_category_delete
                        if (preg_match('#^/admin/category/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_category_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CategoryController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_category_delete;
                            }

                            return $ret;
                        }
                        not_admin_category_delete:

                        // admin_category_sort
                        if ('/admin/category/sort' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CategoryController::sortAction',  '_route' => 'admin_category_sort',  '_permission' =>   array (  ),  '_h5' => false,);
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_category_sort;
                            }

                            return $ret;
                        }
                        not_admin_category_sort:

                    }

                    elseif (0 === strpos($pathinfo, '/admin/crontab')) {
                        // admin_crontab
                        if ('/admin/crontab' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CrontabController::indexAction',  '_route' => 'admin_crontab',  '_permission' =>   array (    0 => 'admin_crontab',  ),  '_h5' => false,);
                        }

                        // admin_crontab_resotre
                        if ('/admin/crontab/restore' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CrontabController::restoreAction',  '_route' => 'admin_crontab_resotre',  '_permission' =>   array (  ),  '_h5' => false,);
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_crontab_resotre;
                            }

                            return $ret;
                        }
                        not_admin_crontab_resotre:

                    }

                }

                elseif (0 === strpos($pathinfo, '/admin/o')) {
                    if (0 === strpos($pathinfo, '/admin/ope')) {
                        if (0 === strpos($pathinfo, '/admin/operation/analysis')) {
                            // admin_operation_analysis
                            if ('/admin/operation/analysis' === $pathinfo) {
                                return array (  '_controller' => 'CustomBundle\\Controller\\Admin\\DefaultController::operationAnalysisDashbordBlockAction',  '_route' => 'admin_operation_analysis',  '_permission' =>   array (    0 => 'admin',  ),  '_h5' => false,);
                            }

                            // admin_operation_analysis_register
                            if (0 === strpos($pathinfo, '/admin/operation/analysis/register') && preg_match('#^/admin/operation/analysis/register/(?P<tab>[^/]++)$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_operation_analysis_register']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AnalysisController::registerAction',  '_permission' =>   array (    0 => 'admin_operation_analysis',  ),  '_h5' => false,));
                            }

                            // admin_operation_analysis_rount
                            if (0 === strpos($pathinfo, '/admin/operation/analysis/route_analysis_data_type') && preg_match('#^/admin/operation/analysis/route_analysis_data_type/(?P<tab>[^/]++)$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_operation_analysis_rount']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AnalysisController::routeAnalysisDataTypeAction',  '_permission' =>   array (    0 => 'admin_operation_analysis',  ),  '_h5' => false,));
                            }

                            if (0 === strpos($pathinfo, '/admin/operation/analysis/l')) {
                                // admin_operation_analysis_login
                                if (0 === strpos($pathinfo, '/admin/operation/analysis/login') && preg_match('#^/admin/operation/analysis/login/(?P<tab>[^/]++)$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_operation_analysis_login']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AnalysisController::loginAction',  '_permission' =>   array (    0 => 'admin_operation_analysis',  ),  '_h5' => false,));
                                }

                                // admin_operation_analysis_lesson_join
                                if (0 === strpos($pathinfo, '/admin/operation/analysis/lesson/join') && preg_match('#^/admin/operation/analysis/lesson/join/(?P<tab>[^/]++)$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_operation_analysis_lesson_join']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AnalysisController::joinLessonAction',  '_permission' =>   array (    0 => 'admin_operation_analysis',  ),  '_h5' => false,));
                                }

                                // admin_operation_analysis_lesson_exit
                                if (0 === strpos($pathinfo, '/admin/operation/analysis/lesson/exit') && preg_match('#^/admin/operation/analysis/lesson/exit/(?P<tab>[^/]++)$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_operation_analysis_lesson_exit']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AnalysisController::exitLessonAction',  '_permission' =>   array (    0 => 'admin_operation_analysis',  ),  '_h5' => false,));
                                }

                            }

                            elseif (0 === strpos($pathinfo, '/admin/operation/analysis/c')) {
                                if (0 === strpos($pathinfo, '/admin/operation/analysis/course')) {
                                    if (0 === strpos($pathinfo, '/admin/operation/analysis/course_set')) {
                                        // admin_operation_analysis_course_set
                                        if (preg_match('#^/admin/operation/analysis/course_set/(?P<tab>[^/]++)$#sD', $pathinfo, $matches)) {
                                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_operation_analysis_course_set']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AnalysisController::courseSetAction',  '_permission' =>   array (    0 => 'admin_operation_analysis',  ),  '_h5' => false,));
                                        }

                                        // admin_operation_analysis_course_set_income
                                        if (0 === strpos($pathinfo, '/admin/operation/analysis/course_set/income') && preg_match('#^/admin/operation/analysis/course_set/income/(?P<tab>[^/]++)$#sD', $pathinfo, $matches)) {
                                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_operation_analysis_course_set_income']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AnalysisController::courseSetIncomeAction',  '_permission' =>   array (    0 => 'admin_operation_analysis',  ),  '_h5' => false,));
                                        }

                                        // admin_operation_analysis_course_set_sum
                                        if (0 === strpos($pathinfo, '/admin/operation/analysis/course_set/sum') && preg_match('#^/admin/operation/analysis/course_set/sum/(?P<tab>[^/]++)$#sD', $pathinfo, $matches)) {
                                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_operation_analysis_course_set_sum']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AnalysisController::courseSetSumAction',  '_permission' =>   array (    0 => 'admin_operation_analysis',  ),  '_h5' => false,));
                                        }

                                    }

                                    // admin_operation_analysis_course_paid
                                    if (0 === strpos($pathinfo, '/admin/operation/analysis/course/paid') && preg_match('#^/admin/operation/analysis/course/paid/(?P<tab>[^/]++)$#sD', $pathinfo, $matches)) {
                                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_operation_analysis_course_paid']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AnalysisController::paidCourseAction',  '_permission' =>   array (    0 => 'admin_operation_analysis',  ),  '_h5' => false,));
                                    }

                                    // admin_operation_analysis_course_sum
                                    if (0 === strpos($pathinfo, '/admin/operation/analysis/course/sum') && preg_match('#^/admin/operation/analysis/course/sum/(?P<tab>[^/]++)$#sD', $pathinfo, $matches)) {
                                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_operation_analysis_course_sum']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AnalysisController::courseSumAction',  '_permission' =>   array (    0 => 'admin_operation_analysis',  ),  '_h5' => false,));
                                    }

                                }

                                // admin_operation_analysis_classroom_paid
                                if (0 === strpos($pathinfo, '/admin/operation/analysis/classroom/paid') && preg_match('#^/admin/operation/analysis/classroom/paid/(?P<tab>[^/]++)$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_operation_analysis_classroom_paid']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AnalysisController::paidClassroomAction',  '_permission' =>   array (    0 => 'admin_operation_analysis',  ),  '_h5' => false,));
                                }

                                // admin_operation_analysis_classroom_income
                                if (0 === strpos($pathinfo, '/admin/operation/analysis/classroom/income') && preg_match('#^/admin/operation/analysis/classroom/income/(?P<tab>[^/]++)$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_operation_analysis_classroom_income']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AnalysisController::classroomIncomeAction',  '_permission' =>   array (    0 => 'admin_operation_analysis',  ),  '_h5' => false,));
                                }

                            }

                            elseif (0 === strpos($pathinfo, '/admin/operation/analysis/task')) {
                                // admin_operation_analysis_task
                                if (preg_match('#^/admin/operation/analysis/task/(?P<tab>[^/]++)$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_operation_analysis_task']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AnalysisController::taskAction',  '_permission' =>   array (    0 => 'admin_operation_analysis',  ),  '_h5' => false,));
                                }

                                // admin_operation_analysis_task_completed
                                if (0 === strpos($pathinfo, '/admin/operation/analysis/task/completed') && preg_match('#^/admin/operation/analysis/task/completed/(?P<tab>[^/]++)$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_operation_analysis_task_completed']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AnalysisController::completedTaskAction',  '_permission' =>   array (    0 => 'admin_operation_analysis',  ),  '_h5' => false,));
                                }

                            }

                            elseif (0 === strpos($pathinfo, '/admin/operation/analysis/video')) {
                                // admin_operation_analysis_video_viewed
                                if (0 === strpos($pathinfo, '/admin/operation/analysis/video/viewed') && preg_match('#^/admin/operation/analysis/video/viewed/(?P<tab>[^/]++)$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_operation_analysis_video_viewed']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AnalysisController::videoViewedAction',  '_permission' =>   array (    0 => 'admin_operation_analysis',  ),  '_h5' => false,));
                                }

                                // admin_operation_analysis_video_cloud_viewed
                                if (0 === strpos($pathinfo, '/admin/operation/analysis/video/cloud/viewed') && preg_match('#^/admin/operation/analysis/video/cloud/viewed/(?P<tab>[^/]++)$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_operation_analysis_video_cloud_viewed']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AnalysisController::cloudVideoViewedAction',  '_permission' =>   array (    0 => 'admin_operation_analysis',  ),  '_h5' => false,));
                                }

                                // admin_operation_analysis_video_local_viewed
                                if (0 === strpos($pathinfo, '/admin/operation/analysis/video/local/viewed') && preg_match('#^/admin/operation/analysis/video/local/viewed/(?P<tab>[^/]++)$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_operation_analysis_video_local_viewed']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AnalysisController::localVideoViewedAction',  '_permission' =>   array (    0 => 'admin_operation_analysis',  ),  '_h5' => false,));
                                }

                                // admin_operation_analysis_video_net_viewed
                                if (0 === strpos($pathinfo, '/admin/operation/analysis/video/net/viewed') && preg_match('#^/admin/operation/analysis/video/net/viewed/(?P<tab>[^/]++)$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_operation_analysis_video_net_viewed']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AnalysisController::netVideoViewedAction',  '_permission' =>   array (    0 => 'admin_operation_analysis',  ),  '_h5' => false,));
                                }

                            }

                            // admin_operation_analysis_vip_income
                            if (0 === strpos($pathinfo, '/admin/operation/analysis/vip/income') && preg_match('#^/admin/operation/analysis/vip/income/(?P<tab>[^/]++)$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_operation_analysis_vip_income']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AnalysisController::vipIncomeAction',  '_permission' =>   array (    0 => 'admin_operation_analysis',  ),  '_h5' => false,));
                            }

                            // admin_operation_analysis_income
                            if (0 === strpos($pathinfo, '/admin/operation/analysis/income') && preg_match('#^/admin/operation/analysis/income/(?P<tab>[^/]++)$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_operation_analysis_income']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AnalysisController::incomeAction',  '_permission' =>   array (    0 => 'admin_operation_analysis',  ),  '_h5' => false,));
                            }

                            // admin_operation_analysis_user_sum
                            if (0 === strpos($pathinfo, '/admin/operation/analysis/user/sum') && preg_match('#^/admin/operation/analysis/user/sum/(?P<tab>[^/]++)$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_operation_analysis_user_sum']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AnalysisController::userSumAction',  '_permission' =>   array (    0 => 'admin_operation_analysis',  ),  '_h5' => false,));
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/operation/mobile')) {
                            // admin_operation_mobile
                            if ('/admin/operation/mobile' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\MobileController::mobileAction',  '_route' => 'admin_operation_mobile',  '_permission' =>   array (    0 => 'admin_operation_mobile_banner_manage',  ),  '_h5' => false,);
                            }

                            // admin_operation_mobile_upgrade
                            if ('/admin/operation/mobile_upgrade' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\MobileController::mobileUpgradeAction',  '_route' => 'admin_operation_mobile_upgrade',  '_permission' =>   array (    0 => 'admin_operation_mobile_banner_manage',  ),  '_h5' => false,);
                            }

                            // admin_operation_mobile_select
                            if ('/admin/operation/mobile/select' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\MobileController::mobileSelectAction',  '_route' => 'admin_operation_mobile_select',  '_permission' =>   array (    0 => 'admin_operation_mobile_select_manage',  ),  '_h5' => false,);
                            }

                            // admin_operation_mobile_customization_upgrade
                            if ('/admin/operation/mobile/customization_upgrade' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\MobileController::customizationUpgradeAction',  '_route' => 'admin_operation_mobile_customization_upgrade',  '_permission' =>   array (  ),  '_h5' => false,);
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_operation_mobile_customization_upgrade;
                                }

                                return $ret;
                            }
                            not_admin_operation_mobile_customization_upgrade:

                            // admin_operation_mobile_picture_upload
                            if (0 === strpos($pathinfo, '/admin/operation/mobile/picture/upload') && preg_match('#^/admin/operation/mobile/picture/upload/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_operation_mobile_picture_upload']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\MobileController::mobilePictureUploadAction',  '_permission' =>   array (    0 => 'admin_operation_mobile_banner_manage',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_operation_mobile_picture_upload;
                                }

                                return $ret;
                            }
                            not_admin_operation_mobile_picture_upload:

                            // admin_operation_mobile_picture_remove
                            if (0 === strpos($pathinfo, '/admin/operation/mobile/picture/remove') && preg_match('#^/admin/operation/mobile/picture/remove/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_operation_mobile_picture_remove']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\MobileController::mobilePictureRemoveAction',  '_permission' =>   array (    0 => 'admin_operation_mobile_banner_manage',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_operation_mobile_picture_remove;
                                }

                                return $ret;
                            }
                            not_admin_operation_mobile_picture_remove:

                        }

                        elseif (0 === strpos($pathinfo, '/admin/opencourse')) {
                            if (0 === strpos($pathinfo, '/admin/opencourse/analysis')) {
                                // admin_opencourse_analysis
                                if ('/admin/opencourse/analysis' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\OpenCourseAnalysisController::indexAction',  '_route' => 'admin_opencourse_analysis',  '_permission' =>   array (    0 => 'admin_opencourse_analysis',  ),  '_h5' => false,);
                                }

                                // admin_opencourse_analysis_referer_summary
                                if ('/admin/opencourse/analysis/referer/summary' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\OpenCourseAnalysisController::summaryAction',  '_route' => 'admin_opencourse_analysis_referer_summary',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_opencourse_analysis_referer_summary_list
                                if ('/admin/opencourse/analysis/referer/list' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\OpenCourseAnalysisController::summaryListAction',  '_route' => 'admin_opencourse_analysis_referer_summary_list',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_opencourse_analysis_referer_watch_statistics
                                if ('/admin/opencourse/analysis/watch' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\OpenCourseAnalysisController::watchAction',  '_route' => 'admin_opencourse_analysis_referer_watch_statistics',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                            }

                            // admin_opencourse_analysis_referer_detail
                            if (preg_match('#^/admin/opencourse/(?P<id>[^/]++)/analysis/referer/detail$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_opencourse_analysis_referer_detail']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\OpenCourseAnalysisController::detailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_opencourse_analysis_referer_detail_list
                            if (preg_match('#^/admin/opencourse/(?P<id>[^/]++)/analysis/referer/detailList$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_opencourse_analysis_referer_detail_list']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\OpenCourseAnalysisController::detailListAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_opencourse_analysis_conversion
                            if ('/admin/opencourse/analysis/conversion' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\OpenCourseAnalysisController::conversionAction',  '_route' => 'admin_opencourse_analysis_conversion',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_opencourse_analysis_conversion_result
                            if (preg_match('#^/admin/opencourse/(?P<courseId>[^/]++)/analysis/conversion/result$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_opencourse_analysis_conversion_result']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\OpenCourseAnalysisController::conversionResultAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/open/course')) {
                            // admin_open_course_delete
                            if (preg_match('#^/admin/open/course/(?P<courseId>[^/]++)/delete(?:/(?P<type>[^/]++))?$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_open_course_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\OpenCourseController::deleteAction',  'type' => '',  '_permission' =>   array (  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_open_course_delete;
                                }

                                return $ret;
                            }
                            not_admin_open_course_delete:

                            // admin_open_course_publish
                            if (preg_match('#^/admin/open/course/(?P<id>[^/]++)/publish$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_open_course_publish']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\OpenCourseController::publishAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_open_course_publish;
                                }

                                return $ret;
                            }
                            not_admin_open_course_publish:

                            // admin_open_course_close
                            if (preg_match('#^/admin/open/course/(?P<id>[^/]++)/close$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_open_course_close']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\OpenCourseController::closeAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_open_course_close;
                                }

                                return $ret;
                            }
                            not_admin_open_course_close:

                            // admin_open_course_recommend_list
                            if ('/admin/open/course/recommend/list' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\OpenCourseController::recommendListAction',  '_route' => 'admin_open_course_recommend_list',  '_permission' =>   array (    0 => 'admin_open_course_recommend_list',  ),  '_h5' => false,);
                            }

                            // admin_open_course_recommend
                            if (preg_match('#^/admin/open/course/(?P<id>[^/]++)/recommend$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_open_course_recommend']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\OpenCourseController::recommendAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_open_course_cancel_recommend
                            if (preg_match('#^/admin/open/course/(?P<id>[^/]++)/recommend/cancel/(?P<target>[^/]++)$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_open_course_cancel_recommend']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\OpenCourseController::cancelRecommendAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_open_course_cancel_recommend;
                                }

                                return $ret;
                            }
                            not_admin_open_course_cancel_recommend:

                            // admin_open_course
                            if (preg_match('#^/admin/open/course(?:/(?P<filter>[^/]++))?$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_open_course']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\OpenCourseController::indexAction',  'filter' => 'open',  '_permission' =>   array (    0 => 'admin_open_course',  ),  '_h5' => false,));
                            }

                        }

                    }

                    // admin_optimize_remove_tmp
                    if ('/admin/optimize/remove-tmp' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\OptimizeController::removeTempAction',  '_route' => 'admin_optimize_remove_tmp',  '_permission' =>   array (    0 => 'admin_optimize_settings',  ),  '_h5' => false,);
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_admin_optimize_remove_tmp;
                        }

                        return $ret;
                    }
                    not_admin_optimize_remove_tmp:

                    if (0 === strpos($pathinfo, '/admin/order')) {
                        // admin_order_statistic
                        if (0 === strpos($pathinfo, '/admin/order/statistic') && preg_match('#^/admin/order/statistic/(?P<period>[^/]++)$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_order_statistic']), array (  '_controller' => 'CustomBundle\\Controller\\Admin\\DefaultController::orderStatisticAction',  '_permission' =>   array (    0 => 'admin',  ),  '_h5' => false,));
                        }

                        // admin_order_manage
                        if ('/admin/order/manage' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\OrderController::manageAction',  '_route' => 'admin_order_manage',  '_permission' =>   array (    0 => 'admin_order_manage',  ),  '_h5' => false,);
                        }

                        // admin_order_detail
                        if (preg_match('#^/admin/order/(?P<id>[^/]++)/detail$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_order_detail']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\OrderController::detailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // admin_order_adjust_price
                        if (preg_match('#^/admin/order/(?P<id>[^/]++)/adjust_price$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_order_adjust_price']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\OrderController::adjustPriceAction',  '_permission' =>   array (    0 => 'admin_finance',  ),  '_h5' => false,));
                        }

                        if (0 === strpos($pathinfo, '/admin/order/refund')) {
                            // admin_order_refunds
                            if ('/admin/order/refunds' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\OrderRefundController::refundsAction',  '_route' => 'admin_order_refunds',  '_permission' =>   array (    0 => 'admin_finance',  ),  '_h5' => false,);
                            }

                            // admin_order_refund_detail
                            if (preg_match('#^/admin/order/refund/(?P<id>[^/]++)/detail$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_order_refund_detail']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\OrderRefundController::refundDetailAction',  '_permission' =>   array (    0 => 'admin_finance',  ),  '_h5' => false,));
                            }

                        }

                        // admin_order_audit_refund
                        if (preg_match('#^/admin/order/(?P<refundId>[^/]++)/audit_refund$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_order_audit_refund']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\OrderRefundController::auditRefundAction',  '_permission' =>   array (    0 => 'admin_finance',  ),  '_h5' => false,));
                        }

                        // admin_order_manage_export_csv
                        if ('/admin/order/manage/export' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\OrderController::exportCsvAction',  '_route' => 'admin_order_manage_export_csv',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                    }

                    elseif (0 === strpos($pathinfo, '/admin/org')) {
                        // admin_org
                        if ('/admin/org' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\OrgManageController::indexAction',  '_route' => 'admin_org',  '_permission' =>   array (    0 => 'admin_org',  ),  '_h5' => false,);
                        }

                        // admin_org_create
                        if ('/admin/org/create' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\OrgManageController::createAction',  '_route' => 'admin_org_create',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // admin_org_update
                        if (preg_match('#^/admin/org/(?P<id>[^/]++)/update$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_org_update']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\OrgManageController::updateAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // admin_org_delete
                        if (preg_match('#^/admin/org/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_org_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\OrgManageController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_org_delete;
                            }

                            return $ret;
                        }
                        not_admin_org_delete:

                        // admin_org_checkcode
                        if ('/admin/org/checkcode' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\OrgManageController::checkCodeAction',  '_route' => 'admin_org_checkcode',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // admin_org_checkname
                        if ('/admin/org/checkname' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\OrgManageController::checkNameAction',  '_route' => 'admin_org_checkname',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // admin_org_sort
                        if ('/admin/org/sort' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\OrgManageController::sortAction',  '_route' => 'admin_org_sort',  '_permission' =>   array (  ),  '_h5' => false,);
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_org_sort;
                            }

                            return $ret;
                        }
                        not_admin_org_sort:

                    }

                    // admin_official_messages
                    if ('/admin/official/messages' === $pathinfo) {
                        return array (  '_controller' => 'CustomBundle\\Controller\\Admin\\DefaultController::officialMessagesAction',  '_route' => 'admin_official_messages',  '_permission' =>   array (    0 => 'admin',  ),  '_h5' => false,);
                    }

                    // admin_online
                    if ('/admin/online' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\OnlineController::indexAction',  '_route' => 'admin_online',  '_permission' =>   array (    0 => 'admin_online',  ),  '_h5' => false,);
                    }

                }

                elseif (0 === strpos($pathinfo, '/admin/user')) {
                    // admin_user_statistic
                    if (0 === strpos($pathinfo, '/admin/user/statistic') && preg_match('#^/admin/user/statistic/(?P<period>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_user_statistic']), array (  '_controller' => 'CustomBundle\\Controller\\Admin\\DefaultController::userStatisticAction',  '_permission' =>   array (    0 => 'admin',  ),  '_h5' => false,));
                    }

                    // admin_user
                    if ('/admin/user' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserController::indexAction',  '_route' => 'admin_user',  '_permission' =>   array (    0 => 'admin_user_manage',  ),  '_h5' => false,);
                    }

                    if (0 === strpos($pathinfo, '/admin/user/create')) {
                        // admin_user_create
                        if ('/admin/user/create' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserController::createAction',  '_route' => 'admin_user_create',  '_permission' =>   array (    0 => 'admin_user_create',  ),  '_h5' => false,);
                        }

                        // admin_user_create_email_check
                        if ('/admin/user/create/email/check' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserController::emailCheckAction',  '_route' => 'admin_user_create_email_check',  '_permission' =>   array (    0 => 'admin_user_manage',  ),  '_h5' => false,);
                        }

                        // admin_user_create_email_or_mobile_check
                        if ('/admin/user/create/email_or_mobile/check' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserController::emailOrMobileCheckAction',  '_route' => 'admin_user_create_email_or_mobile_check',  '_permission' =>   array (    0 => 'admin_user_manage',  ),  '_h5' => false,);
                        }

                        // admin_user_create_mobile_check
                        if ('/admin/user/create/mobile/check' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserController::mobileCheckAction',  '_route' => 'admin_user_create_mobile_check',  '_permission' =>   array (    0 => 'admin_user_manage',  ),  '_h5' => false,);
                        }

                        // admin_user_create_nickname_check
                        if ('/admin/user/create/nickname/check' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserController::nicknameCheckAction',  '_route' => 'admin_user_create_nickname_check',  '_permission' =>   array (    0 => 'admin_user_manage',  ),  '_h5' => false,);
                        }

                    }

                    // admin_user_show
                    if (preg_match('#^/admin/user/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_user_show']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserController::showAction',  '_permission' =>   array (    0 => 'admin',  ),  '_h5' => false,));
                    }

                    // admin_user_edit
                    if (preg_match('#^/admin/user/(?P<id>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_user_edit']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserController::editAction',  '_permission' =>   array (    0 => 'admin_user_edit',  ),  '_h5' => false,));
                    }

                    // admin_user_org_update
                    if (preg_match('#^/admin/user/(?P<id>[^/]++)/org/update$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_user_org_update']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserController::orgUpdateAction',  '_permission' =>   array (    0 => 'admin_user_org_update',  ),  '_h5' => false,));
                    }

                    // admin_user_lock
                    if (preg_match('#^/admin/user/(?P<id>[^/]++)/lock$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_user_lock']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserController::lockAction',  '_permission' =>   array (    0 => 'admin_user_lock',  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_admin_user_lock;
                        }

                        return $ret;
                    }
                    not_admin_user_lock:

                    // admin_user_unlock
                    if (preg_match('#^/admin/user/(?P<id>[^/]++)/unlock$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_user_unlock']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserController::unlockAction',  '_permission' =>   array (    0 => 'admin_user_unlock',  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_admin_user_unlock;
                        }

                        return $ret;
                    }
                    not_admin_user_unlock:

                    // admin_user_roles
                    if (preg_match('#^/admin/user/(?P<id>[^/]++)/roles$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_user_roles']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserController::rolesAction',  '_permission' =>   array (    0 => 'admin_user_roles',  ),  '_h5' => false,));
                    }

                    // admin_user_avatar
                    if (preg_match('#^/admin/user/(?P<id>[^/]++)/avatar$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_user_avatar']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserController::avatarAction',  '_permission' =>   array (    0 => 'admin_user_avatar',  ),  '_h5' => false,));
                    }

                    // admin_user_avatar_crop
                    if (preg_match('#^/admin/user/(?P<id>[^/]++)/avatar/crop$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_user_avatar_crop']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserController::avatarCropAction',  '_permission' =>   array (    0 => 'admin_user_avatar',  ),  '_h5' => false,));
                    }

                    // admin_user_change_password
                    if (preg_match('#^/admin/user/(?P<userId>[^/]++)/change/password$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_user_change_password']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserController::changePasswordAction',  '_permission' =>   array (    0 => 'admin_user_change_password',  ),  '_h5' => false,));
                    }

                    // admin_user_send_passwordreset_email
                    if (preg_match('#^/admin/user/(?P<id>[^/]++)/send_passwordreset_email$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_user_send_passwordreset_email']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserController::sendPasswordResetEmailAction',  '_permission' =>   array (    0 => 'admin_user_send_passwordreset_email',  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_admin_user_send_passwordreset_email;
                        }

                        return $ret;
                    }
                    not_admin_user_send_passwordreset_email:

                    // admin_user_send_emailverify_email
                    if (preg_match('#^/admin/user/(?P<id>[^/]++)/send_emailverify_email$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_user_send_emailverify_email']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserController::sendEmailVerifyEmailAction',  '_permission' =>   array (    0 => 'admin_user_send_emailverify_email',  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_admin_user_send_emailverify_email;
                        }

                        return $ret;
                    }
                    not_admin_user_send_emailverify_email:

                    if (0 === strpos($pathinfo, '/admin/user_fields')) {
                        // admin_user_fields_add
                        if ('/admin/user_fields/add' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserSettingController::addUserFieldsAction',  '_route' => 'admin_user_fields_add',  '_permission' =>   array (    0 => 'admin_setting_user_fields',  ),  '_h5' => false,);
                        }

                        // admin_user_fields_edit
                        if (0 === strpos($pathinfo, '/admin/user_fields/edit') && preg_match('#^/admin/user_fields/edit/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_user_fields_edit']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserSettingController::editUserFieldsAction',  '_permission' =>   array (    0 => 'admin_setting_user_fields',  ),  '_h5' => false,));
                        }

                        // admin_user_fields_delete
                        if (0 === strpos($pathinfo, '/admin/user_fields/delete') && preg_match('#^/admin/user_fields/delete/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_user_fields_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserSettingController::deleteUserFieldsAction',  '_permission' =>   array (    0 => 'admin_setting_user_fields',  ),  '_h5' => false,));
                        }

                    }

                    elseif (0 === strpos($pathinfo, '/admin/user/learn')) {
                        // admin_user_learn_statistics
                        if ('/admin/user/learn/statistics' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserLearnStatisticsController::showAction',  '_route' => 'admin_user_learn_statistics',  '_permission' =>   array (    0 => 'admin_user_learn_statistics',  ),  '_h5' => false,);
                        }

                        // admin_user_learn_detail
                        if (preg_match('#^/admin/user/learn/(?P<userId>[^/]++)/detail$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_user_learn_detail']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserLearnStatisticsController::detailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // admin_user_learn_chart
                        if (preg_match('#^/admin/user/learn/(?P<userId>[^/]++)/chart$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_user_learn_chart']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserLearnStatisticsController::learnChartAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // admin_user_learn_statistics_info
                        if ('/admin/user/learn/statistics/info' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserLearnStatisticsController::syncInfoAction',  '_route' => 'admin_user_learn_statistics_info',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                    }

                }

                elseif (0 === strpos($pathinfo, '/admin/up')) {
                    // admin_oldUpgradeCheck
                    if ('/admin/upgrade/check' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\AppController::oldUpgradeCheckAction',  '_route' => 'admin_oldUpgradeCheck',  '_permission' =>   array (    0 => 'admin_app_upgrades',  ),  '_h5' => false,);
                    }

                    // admin_upgrade_v2_setting
                    if ('/admin/upgrade/v2_setting' === $pathinfo) {
                        return array (  '_controller' => 'CustomBundle\\Controller\\Admin\\DefaultController::upgradeV2SettingAction',  '_route' => 'admin_upgrade_v2_setting',  '_permission' =>   array (  ),  '_h5' => false,);
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_admin_upgrade_v2_setting;
                        }

                        return $ret;
                    }
                    not_admin_upgrade_v2_setting:

                    // admin_uploadfile_head_leader_params
                    if ('/admin/uploadfile/video/head/leader/params' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\UploadFileController::headLeaderParamsAction',  '_route' => 'admin_uploadfile_head_leader_params',  '_permission' =>   array (    0 => 'admin_setting_cloud_video',  ),  '_h5' => false,);
                    }

                }

                elseif (0 === strpos($pathinfo, '/admin/t')) {
                    // admin_task_learn_statistic
                    if (0 === strpos($pathinfo, '/admin/task/learn/statistic') && preg_match('#^/admin/task/learn/statistic/(?P<period>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_task_learn_statistic']), array (  '_controller' => 'CustomBundle\\Controller\\Admin\\DefaultController::completedTaskStatisticAction',  '_permission' =>   array (    0 => 'admin',  ),  '_h5' => false,));
                    }

                    if (0 === strpos($pathinfo, '/admin/tag')) {
                        // admin_tag
                        if ('/admin/tag' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\TagController::indexAction',  '_route' => 'admin_tag',  '_permission' =>   array (    0 => 'admin_course_tag_manage',  ),  '_h5' => false,);
                        }

                        // admin_tag_create
                        if ('/admin/tag/create' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\TagController::createAction',  '_route' => 'admin_tag_create',  '_permission' =>   array (    0 => 'admin_course_tag_add',  ),  '_h5' => false,);
                        }

                        // admin_tag_checkname
                        if ('/admin/tag/checkname' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\TagController::checkNameAction',  '_route' => 'admin_tag_checkname',  '_permission' =>   array (    0 => 'admin_course_tag_manage',  ),  '_h5' => false,);
                        }

                        // admin_tag_update
                        if (preg_match('#^/admin/tag/(?P<id>[^/]++)/update$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_tag_update']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\TagController::updateAction',  '_permission' =>   array (    0 => 'admin_course_tag_manage',  ),  '_h5' => false,));
                        }

                        // admin_tag_delete
                        if (preg_match('#^/admin/tag/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_tag_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\TagController::deleteAction',  '_permission' =>   array (    0 => 'admin_course_tag_manage',  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_tag_delete;
                            }

                            return $ret;
                        }
                        not_admin_tag_delete:

                        if (0 === strpos($pathinfo, '/admin/tag/group')) {
                            // admin_tag_group
                            if ('/admin/tag/group' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\TagGroupController::indexAction',  '_route' => 'admin_tag_group',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_tag_group_create
                            if ('/admin/tag/group/create' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\TagGroupController::createAction',  '_route' => 'admin_tag_group_create',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_tag_group_update
                            if (preg_match('#^/admin/tag/group/(?P<groupId>[^/]++)/update$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_tag_group_update']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\TagGroupController::updateAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_tag_group_checkname
                            if ('/admin/tag/group/checkname' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\TagGroupController::checkNameAction',  '_route' => 'admin_tag_group_checkname',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_tag_group_delete
                            if (preg_match('#^/admin/tag/group/(?P<tagId>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_tag_group_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\TagGroupController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                        }

                    }

                    elseif (0 === strpos($pathinfo, '/admin/teacher')) {
                        // admin_teacher
                        if ('/admin/teacher' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\TeacherController::indexAction',  '_route' => 'admin_teacher',  '_permission' =>   array (    0 => 'admin_teacher',  ),  '_h5' => false,);
                        }

                        // admin_teacher_promote
                        if (preg_match('#^/admin/teacher/(?P<id>[^/]++)/promote$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_teacher_promote']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\TeacherController::promoteAction',  '_permission' =>   array (    0 => 'admin_teacher_promote',  ),  '_h5' => false,));
                        }

                        // admin_teacher_promote_list
                        if ('/admin/teacher/promote/list' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\TeacherController::promoteListAction',  '_route' => 'admin_teacher_promote_list',  '_permission' =>   array (    0 => 'admin_teacher_promote',  ),  '_h5' => false,);
                        }

                        // admin_teacher_promote_cancel
                        if (preg_match('#^/admin/teacher/(?P<id>[^/]++)/promote/cancel$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_teacher_promote_cancel']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\TeacherController::promoteCancelAction',  '_permission' =>   array (    0 => 'admin_teacher',    1 => 'admin_teacher_promote',  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_teacher_promote_cancel;
                            }

                            return $ret;
                        }
                        not_admin_teacher_promote_cancel:

                    }

                    elseif (0 === strpos($pathinfo, '/admin/theme')) {
                        // admin_theme_manage
                        if (preg_match('#^/admin/theme/(?P<uri>[^/]++)/manage$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_theme_manage']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\ThemeController::manageIndexAction',  '_permission' =>   array (    0 => 'admin_setting_theme',  ),  '_h5' => false,));
                        }

                        // admin_reset_currentTheme_config
                        if (preg_match('#^/admin/theme/(?P<uri>[^/]++)/config/reset$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_reset_currentTheme_config']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\ThemeController::resetConfigAction',  '_permission' =>   array (    0 => 'admin_setting_theme',  ),  '_h5' => false,));
                        }

                        // admin_save_themes_config
                        if ('/admin/theme/config/save' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ThemeController::saveConfigAction',  '_route' => 'admin_save_themes_config',  '_permission' =>   array (    0 => 'admin_setting_theme',  ),  '_h5' => false,);
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_save_themes_config;
                            }

                            return $ret;
                        }
                        not_admin_save_themes_config:

                        // admin_confirm_themes_config
                        if (preg_match('#^/admin/theme/(?P<uri>[^/]++)/config/confirm$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_confirm_themes_config']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\ThemeController::confirmConfigAction',  '_permission' =>   array (    0 => 'admin_setting_theme',  ),  '_h5' => false,));
                        }

                        // admin_themes_show
                        if ('/admin/theme/show' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ThemeController::showAction',  '_route' => 'admin_themes_show',  '_permission' =>   array (    0 => 'admin_setting_theme',  ),  '_h5' => false,);
                        }

                        // admin_themes_config_edit
                        if ('/admin/theme/config/edit' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ThemeController::themeConfigEditAction',  '_route' => 'admin_themes_config_edit',  '_permission' =>   array (    0 => 'admin_setting_theme',  ),  '_h5' => false,);
                        }

                    }

                    elseif (0 === strpos($pathinfo, '/admin/thread')) {
                        // admin_thread
                        if ('/admin/thread' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseThreadController::indexAction',  '_route' => 'admin_thread',  '_permission' =>   array (    0 => 'admin_course_thread',  ),  '_h5' => false,);
                        }

                        // admin_thread_delete
                        if (preg_match('#^/admin/thread/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_thread_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseThreadController::deleteAction',  '_permission' =>   array (    0 => 'admin_course_thread',    1 => 'admin_course_question_manage',  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_thread_delete;
                            }

                            return $ret;
                        }
                        not_admin_thread_delete:

                        // admin_thread_batch_delete
                        if ('/admin/thread/batch_delete' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseThreadController::batchDeleteAction',  '_route' => 'admin_thread_batch_delete',  '_permission' =>   array (    0 => 'admin_course_thread',  ),  '_h5' => false,);
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_thread_batch_delete;
                            }

                            return $ret;
                        }
                        not_admin_thread_batch_delete:

                    }

                }

                elseif (0 === strpos($pathinfo, '/admin/b')) {
                    if (0 === strpos($pathinfo, '/admin/block')) {
                        // admin_block
                        if (0 === strpos($pathinfo, '/admin/block/list-') && preg_match('#^/admin/block/list\\-(?P<category>[^/]++)$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_block']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\BlockController::indexAction',  '_permission' =>   array (    0 => 'admin_block',  ),  '_h5' => false,));
                        }

                        // admin_block_match
                        if ('/admin/block/list/quikSearch' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\BlockController::blockMatchAction',  '_route' => 'admin_block_match',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // admin_block_create
                        if ('/admin/block/create' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\BlockController::createAction',  '_route' => 'admin_block_create',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // admin_block_delete
                        if (preg_match('#^/admin/block/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_block_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\BlockController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_block_delete;
                            }

                            return $ret;
                        }
                        not_admin_block_delete:

                        if (0 === strpos($pathinfo, '/admin/block/code')) {
                            // admin_block_code_check_forcreate
                            if ('/admin/block/code/check/forcreate' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\BlockController::checkBlockCodeForCreateAction',  '_route' => 'admin_block_code_check_forcreate',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_block_code_check_foredit
                            if (preg_match('#^/admin/block/code/(?P<id>[^/]++)/check/foredit$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_block_code_check_foredit']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\BlockController::checkBlockTemplateCodeForEditAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                        }

                        // admin_block_update
                        if (preg_match('#^/admin/block/(?P<blockTemplateId>[^/]++)/update$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_block_update']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\BlockController::updateAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // admin_block_edit
                        if (preg_match('#^/admin/block/(?P<blockTemplateId>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_block_edit']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\BlockController::editAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // admin_block_visual_edit
                        if (0 === strpos($pathinfo, '/admin/blockTemplate') && preg_match('#^/admin/blockTemplate/(?P<blockTemplateId>[^/]++)/visual/edit$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_block_visual_edit']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\BlockController::visualEditAction',  '_permission' =>   array (    0 => 'admin_block_visual_edit',  ),  '_h5' => false,));
                        }

                        // admin_block_visual_view_data
                        if (preg_match('#^/admin/block/(?P<blockTemplateId>[^/]++)/data/view$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_block_visual_view_data']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\BlockController::dataViewAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // admin_block_visual_edit_history
                        if (0 === strpos($pathinfo, '/admin/blockTemplate') && preg_match('#^/admin/blockTemplate/(?P<blockTemplateId>[^/]++)/visual/edit/history$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_block_visual_edit_history']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\BlockController::visualHistoryAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // admin_block_recovery
                        if (preg_match('#^/admin/block/(?P<blockTemplateId>[^/]++)/history/(?P<historyId>[^/]++)/recovery$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_block_recovery']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\BlockController::recoveryAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // admin_block_history_data
                        if (0 === strpos($pathinfo, '/admin/block/histroy') && preg_match('#^/admin/block/histroy/(?P<blockId>[^/]++)$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_block_history_data']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\BlockController::blockHistoriesDataAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // admin_block_picture_upload
                        if (preg_match('#^/admin/block/(?P<blockId>[^/]++)/picture/upload$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_block_picture_upload']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\BlockController::uploadAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // admin_block_picture_preview
                        if (preg_match('#^/admin/block/(?P<blockId>[^/]++)/picture/preview$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_block_picture_preview']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\BlockController::picPreviewAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // admin_blockhistory_preview
                        if (0 === strpos($pathinfo, '/admin/blockhistory') && preg_match('#^/admin/blockhistory/(?P<id>[^/]++)/preview$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_blockhistory_preview']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\BlockController::previewAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                    }

                    elseif (0 === strpos($pathinfo, '/admin/batch_notification')) {
                        // admin_batch_notification
                        if ('/admin/batch_notification' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\BatchNotificationController::indexAction',  '_route' => 'admin_batch_notification',  '_permission' =>   array (    0 => 'admin_batch_notification',  ),  '_h5' => false,);
                        }

                        // admin_batch_notification_create
                        if ('/admin/batch_notification/create' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\BatchNotificationController::createAction',  '_route' => 'admin_batch_notification_create',  '_permission' =>   array (    0 => 'admin_batch_notification_create',  ),  '_h5' => false,);
                        }

                        // admin_batch_notification_edit
                        if (0 === strpos($pathinfo, '/admin/batch_notification/edit') && preg_match('#^/admin/batch_notification/edit/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_batch_notification_edit']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\BatchNotificationController::editAction',  '_permission' =>   array (    0 => 'admin_batch_notification',  ),  '_h5' => false,));
                        }

                        // admin_batch_notification_delete
                        if (0 === strpos($pathinfo, '/admin/batch_notification/delete') && preg_match('#^/admin/batch_notification/delete/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_batch_notification_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\BatchNotificationController::deleteAction',  '_permission' =>   array (    0 => 'admin_batch_notification',  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_batch_notification_delete;
                            }

                            return $ret;
                        }
                        not_admin_batch_notification_delete:

                        // admin_batch_notification_send
                        if (0 === strpos($pathinfo, '/admin/batch_notification/send') && preg_match('#^/admin/batch_notification/send/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_batch_notification_send']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\BatchNotificationController::sendAction',  '_permission' =>   array (    0 => 'admin_batch_notification',  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_batch_notification_send;
                            }

                            return $ret;
                        }
                        not_admin_batch_notification_send:

                    }

                    // admin_batch_update_org
                    if (0 === strpos($pathinfo, '/admin/batch/update') && preg_match('#^/admin/batch/update/(?P<module>[^/]++)/org$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_batch_update_org']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\OrgManageController::batchUpdateAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // admin_bill
                    if (0 === strpos($pathinfo, '/admin/bill') && preg_match('#^/admin/bill/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_bill']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\BillController::billAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                }

                elseif (0 === strpos($pathinfo, '/admin/r')) {
                    if (0 === strpos($pathinfo, '/admin/review')) {
                        // admin_review
                        if ('/admin/review' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseReviewController::indexAction',  '_route' => 'admin_review',  '_permission' =>   array (    0 => 'admin_course_review_tab',  ),  '_h5' => false,);
                        }

                        // admin_review_delete
                        if (preg_match('#^/admin/review/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_review_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseReviewController::deleteAction',  '_permission' =>   array (    0 => 'admin_course_review_tab',  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_review_delete;
                            }

                            return $ret;
                        }
                        not_admin_review_delete:

                        // admin_review_batch_delete
                        if ('/admin/review/batch_delete' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseReviewController::batchDeleteAction',  '_route' => 'admin_review_batch_delete',  '_permission' =>   array (    0 => 'admin_course_review_tab',  ),  '_h5' => false,);
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_review_batch_delete;
                            }

                            return $ret;
                        }
                        not_admin_review_batch_delete:

                    }

                    elseif (0 === strpos($pathinfo, '/admin/reports/status')) {
                        // admin_report_status
                        if ('/admin/reports/status' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SystemController::reportAction',  '_route' => 'admin_report_status',  '_permission' =>   array (    0 => 'admin_report_status_list',  ),  '_h5' => false,);
                        }

                        // admin_report_status_php
                        if ('/admin/reports/status/php' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SystemController::phpAction',  '_route' => 'admin_report_status_php',  '_permission' =>   array (    0 => 'admin_report_status_list',  ),  '_h5' => false,);
                        }

                        // admin_report_status_directory
                        if ('/admin/reports/status/directory' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SystemController::checkDirAction',  '_route' => 'admin_report_status_directory',  '_permission' =>   array (    0 => 'admin_report_status_list',  ),  '_h5' => false,);
                        }

                        // admin_report_status_ucenter
                        if ('/admin/reports/status/ucenter' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SystemController::ucenterAction',  '_route' => 'admin_report_status_ucenter',  '_permission' =>   array (    0 => 'admin_report_status_list',  ),  '_h5' => false,);
                        }

                        // admin_report_status_email_send
                        if ('/admin/reports/status/email/send' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SystemController::emailSendCheckAction',  '_route' => 'admin_report_status_email_send',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                    }

                    elseif (0 === strpos($pathinfo, '/admin/role')) {
                        // admin_roles
                        if ('/admin/roles' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\RoleController::indexAction',  '_route' => 'admin_roles',  '_permission' =>   array (    0 => 'admin_role_manage',  ),  '_h5' => false,);
                        }

                        // admin_role_create
                        if ('/admin/role/create' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\RoleController::createAction',  '_route' => 'admin_role_create',  '_permission' =>   array (    0 => 'admin_role_create',  ),  '_h5' => false,);
                        }

                        // admin_role_edit
                        if (preg_match('#^/admin/role/(?P<id>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_role_edit']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\RoleController::editAction',  '_permission' =>   array (    0 => 'admin_role_edit',  ),  '_h5' => false,));
                        }

                        // admin_role_delete
                        if (preg_match('#^/admin/role/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_role_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\RoleController::deleteAction',  '_permission' =>   array (    0 => 'admin_role_delete',  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_role_delete;
                            }

                            return $ret;
                        }
                        not_admin_role_delete:

                        // admin_role_show
                        if (preg_match('#^/admin/role/(?P<id>[^/]++)/show$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_role_show']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\RoleController::showAction',  '_permission' =>   array (    0 => 'admin_role_manage',  ),  '_h5' => false,));
                        }

                        // admin_role_check_name
                        if ('/admin/role/checkName' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\RoleController::checkNameAction',  '_route' => 'admin_role_check_name',  '_permission' =>   array (    0 => 'admin_role_manage',  ),  '_h5' => false,);
                        }

                        // admin_role_check_code
                        if ('/admin/role/checkCode' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\RoleController::checkCodeAction',  '_route' => 'admin_role_check_code',  '_permission' =>   array (    0 => 'admin_role_manage',  ),  '_h5' => false,);
                        }

                    }

                }

                elseif (0 === strpos($pathinfo, '/admin/livecourse')) {
                    // admin_live_course
                    if (preg_match('#^/admin/livecourse/(?P<status>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_live_course']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\LiveCourseController::indexAction',  '_permission' =>   array (    0 => 'admin_live_course_manage',  ),  '_h5' => false,));
                    }

                    // admin_live_get_max_online
                    if ('/admin/livecourse/get/maxOnline' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\LiveCourseController::getMaxOnlineAction',  '_route' => 'admin_live_get_max_online',  '_permission' =>   array (    0 => 'admin_live_course_manage',  ),  '_h5' => false,);
                    }

                }

                elseif (0 === strpos($pathinfo, '/admin/login')) {
                    if (0 === strpos($pathinfo, '/admin/login_record')) {
                        // admin_login_record
                        if ('/admin/login_record' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\LoginRecordController::indexAction',  '_route' => 'admin_login_record',  '_permission' =>   array (    0 => 'admin_login_record',  ),  '_h5' => false,);
                        }

                        // admin_login_record_details
                        if (preg_match('#^/admin/login_record/(?P<id>[^/]++)/details$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_login_record_details']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\LoginRecordController::showUserLoginRecordAction',  '_permission' =>   array (    0 => 'admin_login_record',  ),  '_h5' => false,));
                        }

                    }

                    // admin_login_marketing
                    if ('/admin/login/marketing' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\MarketingController::loginMarketingAction',  '_route' => 'admin_login_marketing',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // admin_login_distributor
                    if ('/admin/login/distributor' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\MarketingController::loginDistributorAction',  '_route' => 'admin_login_distributor',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

                elseif (0 === strpos($pathinfo, '/admin/mock')) {
                    // admin_mocked
                    if ('/admin/mock' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\MockController::indexAction',  '_route' => 'admin_mocked',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    if (0 === strpos($pathinfo, '/admin/mock/distributor_')) {
                        // admin_mocked_distributor_token
                        if (0 === strpos($pathinfo, '/admin/mock/distributor_token') && preg_match('#^/admin/mock/distributor_token/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_mocked_distributor_token']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\MockController::mockDistributorTokenAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // admin_mocked_distributor_get_post_data
                        if ('/admin/mock/distributor_get_post_data' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\MockController::getPostDistributorDataAction',  '_route' => 'admin_mocked_distributor_get_post_data',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // admin_mocked_distributor_post_data
                        if ('/admin/mock/distributor_post_data' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\MockController::postDistributorDataAction',  '_route' => 'admin_mocked_distributor_post_data',  '_permission' =>   array (  ),  '_h5' => false,);
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_mocked_distributor_post_data;
                            }

                            return $ret;
                        }
                        not_admin_mocked_distributor_post_data:

                    }

                    // admin_mocked_download_token
                    if ('/admin/mock/download_token' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\MockController::downloadTokenAction',  '_route' => 'admin_mocked_download_token',  '_permission' =>   array (  ),  '_h5' => false,);
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_admin_mocked_download_token;
                        }

                        return $ret;
                    }
                    not_admin_mocked_download_token:

                    // admin_mocked_marketing_post_data
                    if ('/admin/mock/marketing_post_data' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\MockController::postMarketingDataAction',  '_route' => 'admin_mocked_marketing_post_data',  '_permission' =>   array (  ),  '_h5' => false,);
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_admin_mocked_marketing_post_data;
                        }

                        return $ret;
                    }
                    not_admin_mocked_marketing_post_data:

                    // admin_mocked_post_data_version_3
                    if ('/admin/mock/post_data_version_3' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\MockController::postDataWithVersion3Action',  '_route' => 'admin_mocked_post_data_version_3',  '_permission' =>   array (  ),  '_h5' => false,);
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_admin_mocked_post_data_version_3;
                        }

                        return $ret;
                    }
                    not_admin_mocked_post_data_version_3:

                }

                // admin_message
                if ('/admin/message' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\MessageController::indexAction',  '_route' => 'admin_message',  '_permission' =>   array (    0 => 'admin_message_manage',  ),  '_h5' => false,);
                }

                if (0 === strpos($pathinfo, '/admin/a')) {
                    if (0 === strpos($pathinfo, '/admin/app')) {
                        // admin_app_center
                        if (0 === strpos($pathinfo, '/admin/app/center') && preg_match('#^/admin/app/center(?:/(?P<postStatus>[^/]++))?$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_app_center']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AppController::centerAction',  'postStatus' => 'all',  '_permission' =>   array (    0 => 'admin_app_center',  ),  '_h5' => false,));
                        }

                        // admin_app_installed
                        if (0 === strpos($pathinfo, '/admin/app/installed') && preg_match('#^/admin/app/installed/(?P<postStatus>[^/]++)$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_app_installed']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AppController::installedAction',  '_permission' =>   array (    0 => 'admin_app_installed',  ),  '_h5' => false,));
                        }

                        // admin_app_uninstall
                        if ('/admin/app/uninstall' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\AppController::uninstallAction',  '_route' => 'admin_app_uninstall',  '_permission' =>   array (    0 => 'admin_app_installed',  ),  '_h5' => false,);
                        }

                        if (0 === strpos($pathinfo, '/admin/app/upgrades')) {
                            // admin_app_upgrades
                            if ('/admin/app/upgrades' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\AppController::upgradesAction',  '_route' => 'admin_app_upgrades',  '_permission' =>   array (    0 => 'admin_app_upgrades',  ),  '_h5' => false,);
                            }

                            // admin_app_upgrades_count
                            if ('/admin/app/upgrades_count' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\AppController::upgradesCountAction',  '_route' => 'admin_app_upgrades_count',  '_permission' =>   array (    0 => 'admin_app_upgrades',  ),  '_h5' => false,);
                            }

                        }

                        // admin_app_logs
                        if ('/admin/app/logs' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\AppController::logsAction',  '_route' => 'admin_app_logs',  '_permission' =>   array (    0 => 'admin_app_logs',  ),  '_h5' => false,);
                        }

                        if (0 === strpos($pathinfo, '/admin/app/package_update')) {
                            // admin_app_package_update_modal
                            if (preg_match('#^/admin/app/package_update/(?P<id>[^/]++)/modal$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_app_package_update_modal']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AppPackageUpdateController::modalAction',  '_permission' =>   array (    0 => 'admin_app_center',    1 => 'admin_app_installed',    2 => 'admin_app_upgrades',  ),  '_h5' => false,));
                            }

                            // admin_app_package_update_check_environment
                            if (preg_match('#^/admin/app/package_update/(?P<id>[^/]++)/check_environment$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_app_package_update_check_environment']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AppPackageUpdateController::checkEnvironmentAction',  '_permission' =>   array (    0 => 'admin_app_center',    1 => 'admin_app_installed',    2 => 'admin_app_upgrades',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_app_package_update_check_environment;
                                }

                                return $ret;
                            }
                            not_admin_app_package_update_check_environment:

                            // admin_app_package_update_check_depends
                            if (preg_match('#^/admin/app/package_update/(?P<id>[^/]++)/check_depends$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_app_package_update_check_depends']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AppPackageUpdateController::checkDependsAction',  '_permission' =>   array (    0 => 'admin_app_center',    1 => 'admin_app_installed',    2 => 'admin_app_upgrades',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_app_package_update_check_depends;
                                }

                                return $ret;
                            }
                            not_admin_app_package_update_check_depends:

                            // admin_app_package_update_check_last_error
                            if (preg_match('#^/admin/app/package_update/(?P<id>[^/]++)/check_lasterror$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_app_package_update_check_last_error']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AppPackageUpdateController::checklastErrorAction',  '_permission' =>   array (    0 => 'admin_app_center',    1 => 'admin_app_installed',    2 => 'admin_app_upgrades',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_app_package_update_check_last_error;
                                }

                                return $ret;
                            }
                            not_admin_app_package_update_check_last_error:

                            // admin_app_package_update_backup_file
                            if (preg_match('#^/admin/app/package_update/(?P<id>[^/]++)/backup_file$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_app_package_update_backup_file']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AppPackageUpdateController::backupFileAction',  '_permission' =>   array (    0 => 'admin_app_center',    1 => 'admin_app_installed',    2 => 'admin_app_upgrades',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_app_package_update_backup_file;
                                }

                                return $ret;
                            }
                            not_admin_app_package_update_backup_file:

                            // admin_app_package_update_backup_db
                            if (preg_match('#^/admin/app/package_update/(?P<id>[^/]++)/backup_db$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_app_package_update_backup_db']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AppPackageUpdateController::backupDbAction',  '_permission' =>   array (    0 => 'admin_app_center',    1 => 'admin_app_installed',    2 => 'admin_app_upgrades',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_app_package_update_backup_db;
                                }

                                return $ret;
                            }
                            not_admin_app_package_update_backup_db:

                            // admin_app_package_update_download_and_extract
                            if (preg_match('#^/admin/app/package_update/(?P<id>[^/]++)/download_extract$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_app_package_update_download_and_extract']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AppPackageUpdateController::downloadAndExtractAction',  '_permission' =>   array (    0 => 'admin_app_center',    1 => 'admin_app_installed',    2 => 'admin_app_upgrades',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_app_package_update_download_and_extract;
                                }

                                return $ret;
                            }
                            not_admin_app_package_update_download_and_extract:

                            // admin_app_package_update_check_download_and_extract
                            if (preg_match('#^/admin/app/package_update/(?P<id>[^/]++)/check_download_extract$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_app_package_update_check_download_and_extract']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AppPackageUpdateController::checkDownloadAndExtractAction',  '_permission' =>   array (    0 => 'admin_app_center',    1 => 'admin_app_installed',    2 => 'admin_app_upgrades',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_app_package_update_check_download_and_extract;
                                }

                                return $ret;
                            }
                            not_admin_app_package_update_check_download_and_extract:

                            // admin_app_package_update_begin_upgrade
                            if (preg_match('#^/admin/app/package_update/(?P<id>[^/]++)/begin_upgrade$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_app_package_update_begin_upgrade']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AppPackageUpdateController::beginUpgradeAction',  '_permission' =>   array (    0 => 'admin_app_center',    1 => 'admin_app_installed',    2 => 'admin_app_upgrades',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_app_package_update_begin_upgrade;
                                }

                                return $ret;
                            }
                            not_admin_app_package_update_begin_upgrade:

                            // admin_app_package_update_check_newest
                            if (0 === strpos($pathinfo, '/admin/app/package_update/check/newest/code') && preg_match('#^/admin/app/package_update/check/newest/code/(?P<code>[^/]++)$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_app_package_update_check_newest']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AppPackageUpdateController::checkNewestAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_app_package_update_check_newest;
                                }

                                return $ret;
                            }
                            not_admin_app_package_update_check_newest:

                        }

                        elseif (0 === strpos($pathinfo, '/admin/approvals')) {
                            // admin_approval_approvals
                            if (preg_match('#^/admin/approvals/(?P<approvalStatus>[^/]++)$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_approval_approvals']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserApprovalController::approvalsAction',  '_permission' =>   array (    0 => 'admin_approval_approvals',  ),  '_h5' => false,));
                            }

                            // admin_approval_approve
                            if (preg_match('#^/admin/approvals/(?P<id>[^/]++)/approve$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_approval_approve']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserApprovalController::approveAction',  '_permission' =>   array (    0 => 'admin_approval_approvals',  ),  '_h5' => false,));
                            }

                            // admin_approval_info_view
                            if (preg_match('#^/admin/approvals/(?P<id>[^/]++)/view$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_approval_info_view']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserApprovalController::viewApprovalInfoAction',  '_permission' =>   array (    0 => 'admin_approval_approvals',  ),  '_h5' => false,));
                            }

                            // admin_approval_cancel
                            if (preg_match('#^/admin/approvals/(?P<id>[^/]++)/cancel$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_approval_cancel']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserApprovalController::cancelAction',  '_permission' =>   array (    0 => 'admin_approval_cancel',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_approval_cancel;
                                }

                                return $ret;
                            }
                            not_admin_approval_cancel:

                            // show_idcard
                            if (0 === strpos($pathinfo, '/admin/approvals/idcard/show') && preg_match('#^/admin/approvals/idcard/show/(?P<userId>[^/]++)/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'show_idcard']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\UserApprovalController::showIdcardAction',  '_permission' =>   array (    0 => 'admin_approval_approvals',  ),  '_h5' => false,));
                            }

                        }

                    }

                    elseif (0 === strpos($pathinfo, '/admin/article')) {
                        if (0 === strpos($pathinfo, '/admin/article/category')) {
                            // admin_article_category
                            if ('/admin/article/category' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ArticleCategoryController::indexAction',  '_route' => 'admin_article_category',  '_permission' =>   array (    0 => 'admin_operation_article_category',  ),  '_h5' => false,);
                            }

                            if (0 === strpos($pathinfo, '/admin/article/category/c')) {
                                // admin_article_category_create
                                if ('/admin/article/category/create' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ArticleCategoryController::createAction',  '_route' => 'admin_article_category_create',  '_permission' =>   array (    0 => 'admin_operation_article_category',  ),  '_h5' => false,);
                                }

                                // admin_article_category_checkparentid
                                if ('/admin/article/category/checkparentid' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ArticleCategoryController::checkParentIdAction',  '_route' => 'admin_article_category_checkparentid',  '_permission' =>   array (    0 => 'admin_operation_article_category',  ),  '_h5' => false,);
                                }

                                // admin_article_category_checkcode
                                if ('/admin/article/category/checkcode' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ArticleCategoryController::checkCodeAction',  '_route' => 'admin_article_category_checkcode',  '_permission' =>   array (    0 => 'admin_operation_article_category',  ),  '_h5' => false,);
                                }

                            }

                            // admin_article_category_edit
                            if (preg_match('#^/admin/article/category/(?P<id>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_article_category_edit']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\ArticleCategoryController::editAction',  '_permission' =>   array (    0 => 'admin_operation_article_category',  ),  '_h5' => false,));
                            }

                            // admin_article_category_delete
                            if (preg_match('#^/admin/article/category/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_article_category_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\ArticleCategoryController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_article_category_delete;
                                }

                                return $ret;
                            }
                            not_admin_article_category_delete:

                            // admin_article_category_sort
                            if ('/admin/article/category/sort' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ArticleCategoryController::sortAction',  '_route' => 'admin_article_category_sort',  '_permission' =>   array (  ),  '_h5' => false,);
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_article_category_sort;
                                }

                                return $ret;
                            }
                            not_admin_article_category_sort:

                        }

                        // admin_article
                        if ('/admin/article' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ArticleController::indexAction',  '_route' => 'admin_article',  '_permission' =>   array (    0 => 'admin_operation_article_manage',  ),  '_h5' => false,);
                        }

                        // admin_article_create
                        if ('/admin/article/create' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ArticleController::createAction',  '_route' => 'admin_article_create',  '_permission' =>   array (    0 => 'admin_operation_article_create',  ),  '_h5' => false,);
                        }

                        // admin_article_cancel_property
                        if (0 === strpos($pathinfo, '/admin/article/cancel/property') && preg_match('#^/admin/article/cancel/property/(?P<id>[^/]++)/(?P<property>[^/]++)$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_article_cancel_property']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\ArticleController::cancelArticlePropertyAction',  '_permission' =>   array (    0 => 'admin_operation_article_manage',  ),  '_h5' => false,));
                        }

                        // admin_article_picture_crop
                        if ('/admin/article/picture/crop' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ArticleController::pictureCropAction',  '_route' => 'admin_article_picture_crop',  '_permission' =>   array (    0 => 'admin_operation_article_manage',  ),  '_h5' => false,);
                        }

                        // admin_article_show_upload
                        if ('/admin/article/show/upload' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ArticleController::showUploadAction',  '_route' => 'admin_article_show_upload',  '_permission' =>   array (    0 => 'admin_operation_article_manage',  ),  '_h5' => false,);
                        }

                        // admin_article_set_property
                        if (0 === strpos($pathinfo, '/admin/article/set/property') && preg_match('#^/admin/article/set/property/(?P<id>[^/]++)/(?P<property>[^/]++)$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_article_set_property']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\ArticleController::setArticlePropertyAction',  '_permission' =>   array (    0 => 'admin_operation_article_manage',  ),  '_h5' => false,));
                        }

                        // admin_article_edit
                        if (preg_match('#^/admin/article/(?P<id>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_article_edit']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\ArticleController::editAction',  '_permission' =>   array (    0 => 'admin_operation_article_manage',  ),  '_h5' => false,));
                        }

                        // admin_article_publish
                        if (preg_match('#^/admin/article/(?P<id>[^/]++)/publish$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_article_publish']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\ArticleController::publishAction',  '_permission' =>   array (    0 => 'admin_operation_article_manage',  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_article_publish;
                            }

                            return $ret;
                        }
                        not_admin_article_publish:

                        // admin_article_unpublish
                        if (preg_match('#^/admin/article/(?P<id>[^/]++)/unpublish$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_article_unpublish']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\ArticleController::unpublishAction',  '_permission' =>   array (    0 => 'admin_operation_article_manage',  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_article_unpublish;
                            }

                            return $ret;
                        }
                        not_admin_article_unpublish:

                        // admin_article_thumb_remove
                        if (0 === strpos($pathinfo, '/admin/article/thumb') && preg_match('#^/admin/article/thumb/(?P<id>[^/]++)/remove$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_article_thumb_remove']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\ArticleController::thumbRemoveAction',  '_permission' =>   array (    0 => 'admin_operation_article_manage',  ),  '_h5' => false,));
                        }

                        // admin_article_trash
                        if (preg_match('#^/admin/article/(?P<id>[^/]++)/trash$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_article_trash']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\ArticleController::trashAction',  '_permission' =>   array (    0 => 'admin_operation_article_manage',  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_article_trash;
                            }

                            return $ret;
                        }
                        not_admin_article_trash:

                        // admin_article_delete
                        if ('/admin/article/delete' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\ArticleController::deleteAction',  '_route' => 'admin_article_delete',  '_permission' =>   array (    0 => 'admin_operation_article_manage',  ),  '_h5' => false,);
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_article_delete;
                            }

                            return $ret;
                        }
                        not_admin_article_delete:

                    }

                    elseif (0 === strpos($pathinfo, '/admin/announcement')) {
                        // admin_announcement
                        if ('/admin/announcement' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\AnnouncementController::indexAction',  '_route' => 'admin_announcement',  '_permission' =>   array (    0 => 'admin_announcement',  ),  '_h5' => false,);
                        }

                        // admin_announcement_create
                        if ('/admin/announcement/create' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\AnnouncementController::createAction',  '_route' => 'admin_announcement_create',  '_permission' =>   array (    0 => 'admin_announcement_create',  ),  '_h5' => false,);
                        }

                        // admin_announcement_delete
                        if (0 === strpos($pathinfo, '/admin/announcement/delete') && preg_match('#^/admin/announcement/delete/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_announcement_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AnnouncementController::deleteAction',  '_permission' =>   array (    0 => 'admin_announcement',  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_announcement_delete;
                            }

                            return $ret;
                        }
                        not_admin_announcement_delete:

                        // admin_announcement_edit
                        if (0 === strpos($pathinfo, '/admin/announcement/edit') && preg_match('#^/admin/announcement/edit/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_announcement_edit']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\AnnouncementController::editAction',  '_permission' =>   array (    0 => 'admin_announcement',  ),  '_h5' => false,));
                        }

                    }

                }

                elseif (0 === strpos($pathinfo, '/admin/que')) {
                    // admin_question
                    if (0 === strpos($pathinfo, '/admin/question') && preg_match('#^/admin/question/(?P<postStatus>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_question']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\CourseQuestionController::indexAction',  '_permission' =>   array (    0 => 'admin_course_question_manage',  ),  '_h5' => false,));
                    }

                    if (0 === strpos($pathinfo, '/admin/question_bank')) {
                        // admin_question_bank
                        if ('/admin/question_bank/index' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\QuestionBankController::indexAction',  '_route' => 'admin_question_bank',  '_permission' =>   array (    0 => 'admin_question_bank',  ),  '_h5' => false,);
                        }

                        // admin_question_bank_manage_create
                        if ('/admin/question_bank/create' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\QuestionBankController::createAction',  '_route' => 'admin_question_bank_manage_create',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // admin_question_bank_manage_edit
                        if (preg_match('#^/admin/question_bank/(?P<id>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_question_bank_manage_edit']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\QuestionBankController::editAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // admin_question_bank_manage_delete
                        if (preg_match('#^/admin/question_bank/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_question_bank_manage_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\QuestionBankController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_question_bank_manage_delete;
                            }

                            return $ret;
                        }
                        not_admin_question_bank_manage_delete:

                        if (0 === strpos($pathinfo, '/admin/question_bank/category')) {
                            // admin_question_bank_category
                            if ('/admin/question_bank/category/index' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\QuestionBankCategoryController::indexAction',  '_route' => 'admin_question_bank_category',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_question_bank_category_manage_create
                            if ('/admin/question_bank/category/create' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\QuestionBankCategoryController::createAction',  '_route' => 'admin_question_bank_category_manage_create',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_question_bank_category_manage_edit
                            if (preg_match('#^/admin/question_bank/category/(?P<id>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_question_bank_category_manage_edit']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\QuestionBankCategoryController::editAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_question_bank_category_manage_delete
                            if (preg_match('#^/admin/question_bank/category/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_question_bank_category_manage_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\QuestionBankCategoryController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_question_bank_category_manage_delete;
                                }

                                return $ret;
                            }
                            not_admin_question_bank_category_manage_delete:

                            // admin_question_bank_category_sort
                            if ('/admin/question_bank/category/sort' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\QuestionBankCategoryController::sortAction',  '_route' => 'admin_question_bank_category_sort',  '_permission' =>   array (  ),  '_h5' => false,);
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_question_bank_category_sort;
                                }

                                return $ret;
                            }
                            not_admin_question_bank_category_sort:

                        }

                    }

                    elseif (0 === strpos($pathinfo, '/admin/queue/failed_log')) {
                        // admin_queue_failed_logs
                        if ('/admin/queue/failed_logs' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\QueueController::failedJobsAction',  '_route' => 'admin_queue_failed_logs',  '_permission' =>   array (    0 => 'admin_queue_failed_logs',  ),  '_h5' => false,);
                        }

                        // admin_queue_failed_log_modal
                        if (preg_match('#^/admin/queue/failed_log/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_queue_failed_log_modal']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\QueueController::failedJobAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                    }

                }

                elseif (0 === strpos($pathinfo, '/admin/invite')) {
                    // admin_invite
                    if ('/admin/invite' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\InviteController::userRecordsAction',  '_route' => 'admin_invite',  '_permission' =>   array (    0 => 'admin_operation_invite',  ),  '_h5' => false,);
                    }

                    // admin_invite_record
                    if ('/admin/invite/record' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\InviteController::recordAction',  '_route' => 'admin_invite_record',  '_permission' =>   array (    0 => 'admin_operation_invite',  ),  '_h5' => false,);
                    }

                    // admin_invite_detail
                    if ('/admin/invite/detail' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\InviteController::inviteDetailAction',  '_route' => 'admin_invite_detail',  '_permission' =>   array (    0 => 'admin_operation_invite',  ),  '_h5' => false,);
                    }

                    // admin_invite_coupon
                    if (preg_match('#^/admin/invite/(?P<filter>[^/]++)/coupon/?$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_invite_coupon']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\InviteController::couponAction',  'filter' => 'invited',  '_permission' =>   array (  ),  '_h5' => false,));
                        if ('/' === substr($pathinfo, -1)) {
                            // no-op
                        } elseif ('GET' !== $canonicalMethod) {
                            goto not_admin_invite_coupon;
                        } else {
                            return array_replace($ret, $this->redirect($rawPathinfo.'/', 'admin_invite_coupon'));
                        }

                        return $ret;
                    }
                    not_admin_invite_coupon:

                    // admin_invite_coupon_query
                    if ('/admin/invite/coupon/query' === $trimmedPathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\InviteController::queryInviteCouponAction',  '_route' => 'admin_invite_coupon_query',  '_permission' =>   array (  ),  '_h5' => false,);
                        if ('/' === substr($pathinfo, -1)) {
                            // no-op
                        } elseif ('GET' !== $canonicalMethod) {
                            goto not_admin_invite_coupon_query;
                        } else {
                            return array_replace($ret, $this->redirect($rawPathinfo.'/', 'admin_invite_coupon_query'));
                        }

                        return $ret;
                    }
                    not_admin_invite_coupon_query:

                }

                elseif (0 === strpos($pathinfo, '/admin/group')) {
                    // admin_group
                    if ('/admin/group' === $trimmedPathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\GroupController::indexAction',  '_route' => 'admin_group',  '_permission' =>   array (    0 => 'admin_operation_group_manage',  ),  '_h5' => false,);
                        if ('/' === substr($pathinfo, -1)) {
                            // no-op
                        } elseif ('GET' !== $canonicalMethod) {
                            goto not_admin_group;
                        } else {
                            return array_replace($ret, $this->redirect($rawPathinfo.'/', 'admin_group'));
                        }

                        return $ret;
                    }
                    not_admin_group:

                    // admin_groupThread
                    if ('/admin/group/thread' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\GroupController::threadAction',  '_route' => 'admin_groupThread',  '_permission' =>   array (    0 => 'admin_operation_group_thread',  ),  '_h5' => false,);
                    }

                    // admin_groupThread_batch_delete
                    if ('/admin/group/batchDeleteThread' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\GroupController::batchDeleteThreadAction',  '_route' => 'admin_groupThread_batch_delete',  '_permission' =>   array (    0 => 'admin_operation_group_thread',  ),  '_h5' => false,);
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_admin_groupThread_batch_delete;
                        }

                        return $ret;
                    }
                    not_admin_groupThread_batch_delete:

                    // admin_group_close
                    if (preg_match('#^/admin/group/(?P<id>[^/]++)/close$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_group_close']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\GroupController::closeGroupAction',  '_permission' =>   array (    0 => 'admin_operation_group_manage',  ),  '_h5' => false,));
                    }

                    // admin_group_open
                    if (preg_match('#^/admin/group/(?P<id>[^/]++)/open$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_group_open']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\GroupController::openGroupAction',  '_permission' =>   array (    0 => 'admin_operation_group_manage',  ),  '_h5' => false,));
                    }

                    if (0 === strpos($pathinfo, '/admin/group/thread')) {
                        // admin_group_thread_cancel_elite
                        if (preg_match('#^/admin/group/thread/(?P<threadId>[^/]++)/removeElite$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_group_thread_cancel_elite']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\GroupController::removeEliteAction',  '_permission' =>   array (    0 => 'admin_operation_group_manage',  ),  '_h5' => false,));
                        }

                        // admin_group_thread_set_elite
                        if (preg_match('#^/admin/group/thread/(?P<threadId>[^/]++)/setElite$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_group_thread_set_elite']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\GroupController::setEliteAction',  '_permission' =>   array (    0 => 'admin_operation_group_manage',  ),  '_h5' => false,));
                        }

                        // admin_group_thread_cancel_stick
                        if (preg_match('#^/admin/group/thread/(?P<threadId>[^/]++)/removeStick$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_group_thread_cancel_stick']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\GroupController::removeStickAction',  '_permission' =>   array (    0 => 'admin_operation_group_manage',  ),  '_h5' => false,));
                        }

                        // admin_group_thread_set_stick
                        if (preg_match('#^/admin/group/thread/(?P<threadId>[^/]++)/setStick$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_group_thread_set_stick']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\GroupController::setStickAction',  '_permission' =>   array (    0 => 'admin_operation_group_manage',  ),  '_h5' => false,));
                        }

                        // admin_group_thread_close
                        if (preg_match('#^/admin/group/thread/(?P<threadId>[^/]++)/closeThread$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_group_thread_close']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\GroupController::closeThreadAction',  '_permission' =>   array (    0 => 'admin_operation_group_manage',  ),  '_h5' => false,));
                        }

                        // admin_group_thread_open
                        if (preg_match('#^/admin/group/thread/(?P<threadId>[^/]++)/openThread$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_group_thread_open']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\GroupController::openThreadAction',  '_permission' =>   array (    0 => 'admin_operation_group_manage',  ),  '_h5' => false,));
                        }

                        // admin_group_thread_delete
                        if (preg_match('#^/admin/group/thread/(?P<threadId>[^/]++)/deleteThread$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_group_thread_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\GroupController::deleteThreadAction',  '_permission' =>   array (    0 => 'admin_operation_group_manage',  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_group_thread_delete;
                            }

                            return $ret;
                        }
                        not_admin_group_thread_delete:

                    }

                    // admin_group_transfer
                    if (0 === strpos($pathinfo, '/admin/group/transfer') && preg_match('#^/admin/group/transfer/(?P<groupId>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_group_transfer']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\GroupController::transferGroupAction',  '_permission' =>   array (    0 => 'admin_operation_group_manage',  ),  '_h5' => false,));
                    }

                }

                // generate_short_link
                if ('/admin/generate/short/link' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SmsController::changeLinkAction',  '_route' => 'generate_short_link',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                if (0 === strpos($pathinfo, '/admin/edu_cloud')) {
                    // admin_edu_cloud_sms
                    if ('/admin/edu_cloud/sms/overview' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::smsOverviewAction',  '_route' => 'admin_edu_cloud_sms',  '_permission' =>   array (    0 => 'admin_edu_cloud_sms_overview',  ),  '_h5' => false,);
                    }

                    // admin_edu_cloud_search
                    if ('/admin/edu_cloud/search/overview' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::searchOverviewAction',  '_route' => 'admin_edu_cloud_search',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // admin_edu_cloud_apply_for_sms
                    if ('/admin/edu_cloud/apply_for_sms' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::applyForSmsAction',  '_route' => 'admin_edu_cloud_apply_for_sms',  '_permission' =>   array (    0 => 'admin_edu_cloud_sms_overview',  ),  '_h5' => false,);
                    }

                    // admin_edu_cloud_sms_no_message
                    if ('/admin/edu_cloud/admin_edu_cloud_sms_no_message' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::smsNoMessageAction',  '_route' => 'admin_edu_cloud_sms_no_message',  '_permission' =>   array (    0 => 'admin_edu_cloud_sms_overview',  ),  '_h5' => false,);
                    }

                    if (0 === strpos($pathinfo, '/admin/edu_cloud/email')) {
                        // admin_edu_cloud_email
                        if ('/admin/edu_cloud/email/overview' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::emailOverviewAction',  '_route' => 'admin_edu_cloud_email',  '_permission' =>   array (    0 => 'admin_edu_cloud_email_overview',  ),  '_h5' => false,);
                        }

                        // admin_edu_cloud_email_setting
                        if ('/admin/edu_cloud/email/setting' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::emailSettingAction',  '_route' => 'admin_edu_cloud_email_setting',  '_permission' =>   array (    0 => 'admin_edu_cloud_email_overview',  ),  '_h5' => false,);
                        }

                        // admin_edu_cloud_email_switch
                        if ('/admin/edu_cloud/email/switch' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\EduCloudController::emailSwitchAction',  '_route' => 'admin_edu_cloud_email_switch',  '_permission' =>   array (    0 => 'admin_edu_cloud_email_overview',  ),  '_h5' => false,);
                        }

                    }

                }

                elseif (0 === strpos($pathinfo, '/admin/f')) {
                    // admin_feedback
                    if ('/admin/feedback' === $pathinfo) {
                        return array (  '_controller' => 'CustomBundle\\Controller\\Admin\\DefaultController::feedbackAction',  '_route' => 'admin_feedback',  '_permission' =>   array (    0 => 'admin',  ),  '_h5' => false,);
                    }

                    // admin_cloud_feature_lab
                    if ('/admin/feature/lab' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\FeatureLabController::settingAction',  '_route' => 'admin_cloud_feature_lab',  '_permission' =>   array (    0 => 'admin_cloud_feature_lab',  ),  '_h5' => false,);
                    }

                    // admin_cloud_face_identify
                    if ('/admin/face_identify/setting' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\FeatureLabController::faceIdentifyAction',  '_route' => 'admin_cloud_face_identify',  '_permission' =>   array (    0 => 'admin_cloud_face_identify',  ),  '_h5' => false,);
                    }

                }

                elseif (0 === strpos($pathinfo, '/admin/keyword')) {
                    // admin_keyword
                    if ('/admin/keyword' === $trimmedPathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SensitiveController::indexAction',  '_route' => 'admin_keyword',  '_permission' =>   array (    0 => 'admin_keyword',  ),  '_h5' => false,);
                        if ('/' === substr($pathinfo, -1)) {
                            // no-op
                        } elseif ('GET' !== $canonicalMethod) {
                            goto not_admin_keyword;
                        } else {
                            return array_replace($ret, $this->redirect($rawPathinfo.'/', 'admin_keyword'));
                        }

                        return $ret;
                    }
                    not_admin_keyword:

                    // admin_keyword_create
                    if ('/admin/keyword/create' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SensitiveController::createAction',  '_route' => 'admin_keyword_create',  '_permission' =>   array (    0 => 'admin_keyword_create',  ),  '_h5' => false,);
                    }

                    // admin_keyword_delete
                    if (preg_match('#^/admin/keyword/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_keyword_delete']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\SensitiveController::deleteAction',  '_permission' =>   array (    0 => 'admin_keyword',  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_admin_keyword_delete;
                        }

                        return $ret;
                    }
                    not_admin_keyword_delete:

                    // admin_keyword_change
                    if (preg_match('#^/admin/keyword/(?P<id>[^/]++)/change$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_keyword_change']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\SensitiveController::changeAction',  '_permission' =>   array (    0 => 'admin_keyword',  ),  '_h5' => false,));
                    }

                    // admin_keyword_banlogs
                    if ('/admin/keyword/banlogs' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\SensitiveController::banlogsAction',  '_route' => 'admin_keyword_banlogs',  '_permission' =>   array (    0 => 'admin_keyword_banlogs',  ),  '_h5' => false,);
                    }

                }

                elseif (0 === strpos($pathinfo, '/admin/job')) {
                    // admin_jobs
                    if ('/admin/jobs' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\JobController::indexAction',  '_route' => 'admin_jobs',  '_permission' =>   array (    0 => 'admin_jobs',  ),  '_h5' => false,);
                    }

                    // admin_job_logs
                    if ('/admin/job/logs' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\JobController::logsAction',  '_route' => 'admin_job_logs',  '_permission' =>   array (    0 => 'admin_job_logs',  ),  '_h5' => false,);
                    }

                    // admin_job_enabled
                    if (preg_match('#^/admin/job/(?P<id>[^/]++)/enabled$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_job_enabled']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\JobController::enabledAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_admin_job_enabled;
                        }

                        return $ret;
                    }
                    not_admin_job_enabled:

                    // admin_job_disabled
                    if (preg_match('#^/admin/job/(?P<id>[^/]++)/disabled$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_job_disabled']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\JobController::disabledAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_admin_job_disabled;
                        }

                        return $ret;
                    }
                    not_admin_job_disabled:

                    // admin_job_set_next_exec_time
                    if (preg_match('#^/admin/job/(?P<id>[^/]++)/set_next_exec_time$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_job_set_next_exec_time']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\JobController::setNextExecTimeAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // admin_job_fires
                    if (preg_match('#^/admin/job/(?P<id>[^/]++)/fires$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_job_fires']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\JobController::firesAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // admin_job_fired_logs
                    if (preg_match('#^/admin/job/(?P<id>[^/]++)/fire/(?P<jobFiredId>[^/]++)/logs$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_job_fired_logs']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\JobController::fireLogsAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                }

                // admin_xapi_setting
                if ('/admin/xapi/setting' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\Admin\\XapiController::settingAction',  '_route' => 'admin_xapi_setting',  '_permission' =>   array (    0 => 'admin_xapi_setting',  ),  '_h5' => false,);
                }

                if (0 === strpos($pathinfo, '/admin/xapi/statement')) {
                    // admin_xapi_statement_list
                    if ('/admin/xapi/statement_list' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\XapiController::indexAction',  '_route' => 'admin_xapi_statement_list',  '_permission' =>   array (    0 => 'admin_xapi_statement_list',  ),  '_h5' => false,);
                    }

                    // admin_xapi_statement_detail
                    if (preg_match('#^/admin/xapi/statement/(?P<id>[^/]++)/detail$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_xapi_statement_detail']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\XapiController::detailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                }

                // publish_sms_send
                if (0 === strpos($pathinfo, '/admin/publish/sms_send') && preg_match('#^/admin/publish/sms_send/(?P<targetType>[^/]++)/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'publish_sms_send']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\SmsController::sendAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                if (0 === strpos($pathinfo, '/admin/wechat')) {
                    // admin_wechat_app
                    if ('/admin/wechat_app' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\WeChatAppController::indexAction',  '_route' => 'admin_wechat_app',  '_permission' =>   array (    0 => 'admin_wechat_app',  ),  '_h5' => false,);
                    }

                    // admin_setting_wechat_auth
                    if ('/admin/wechat/auth/setting' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\WeChatSettingController::indexAction',  '_route' => 'admin_setting_wechat_auth',  '_permission' =>   array (    0 => 'admin_setting_wechat_auth',  ),  '_h5' => false,);
                    }

                    // admin_setting_wechat_pre_auth_url
                    if (0 === strpos($pathinfo, '/admin/wechat/pre_auth_url') && preg_match('#^/admin/wechat/pre_auth_url/(?P<platformType>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_setting_wechat_pre_auth_url']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\WeChatSettingController::preAuthUrlAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    if (0 === strpos($pathinfo, '/admin/wechat/notification')) {
                        if (0 === strpos($pathinfo, '/admin/wechat/notification/record')) {
                            // admin_wechat_notification_record
                            if ('/admin/wechat/notification/record' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Admin\\WeChatNotificationController::recordAction',  '_route' => 'admin_wechat_notification_record',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_wechat_notification_record_detail
                            if (preg_match('#^/admin/wechat/notification/record/(?P<id>[^/]++)/detail$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_wechat_notification_record_detail']), array (  '_controller' => 'AppBundle\\Controller\\Admin\\WeChatNotificationController::recordDetailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                        }

                        // admin_wechat_notification_manage
                        if ('/admin/wechat/notification/manage' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\WeChatNotificationController::manageAction',  '_route' => 'admin_wechat_notification_manage',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // admin_wechat_notification_show
                        if ('/admin/wechat/notification/show' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\WeChatNotificationController::showAction',  '_route' => 'admin_wechat_notification_show',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // admin_wechat_notification_setting_modal
                        if ('/admin/wechat/notification/setting_edit' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\WeChatNotificationController::settingModalAction',  '_route' => 'admin_wechat_notification_setting_modal',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // admin_wechat_notification_template_status
                        if ('/admin/wechat/notification/template/status' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Admin\\WeChatNotificationController::statusAction',  '_route' => 'admin_wechat_notification_template_status',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                    }

                    // admin_wechat_fans_list
                    if ('/admin/wechat/fans/list' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Admin\\WeChatNotificationController::fansListAction',  '_route' => 'admin_wechat_fans_list',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

                elseif (0 === strpos($pathinfo, '/admin/v2')) {
                    // admin_v2
                    if ('/admin/v2' === $trimmedPathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\DefaultController::indexAction',  '_route' => 'admin_v2',  '_permission' =>   array (    0 => 'admin_v2',  ),  '_h5' => false,);
                        if ('/' === substr($pathinfo, -1)) {
                            // no-op
                        } elseif ('GET' !== $canonicalMethod) {
                            goto not_admin_v2;
                        } else {
                            return array_replace($ret, $this->redirect($rawPathinfo.'/', 'admin_v2'));
                        }

                        return $ret;
                    }
                    not_admin_v2:

                    if (0 === strpos($pathinfo, '/admin/v2/s')) {
                        // admin_v2_switch_old_version
                        if ('/admin/v2/switch/old_version' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\DefaultController::switchOldVersionAction',  '_route' => 'admin_v2_switch_old_version',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // admin_v2_homepage_school_info
                        if ('/admin/v2/school_info' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\DefaultController::infoAction',  '_route' => 'admin_v2_homepage_school_info',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        if (0 === strpos($pathinfo, '/admin/v2/setting')) {
                            // admin_v2_cloud_attachment_setting
                            if ('/admin/v2/setting/edu_cloud/attachment' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::attachmentSettingAction',  '_route' => 'admin_v2_cloud_attachment_setting',  '_permission' =>   array (    0 => 'admin_v2_cloud_attachment_setting',  ),  '_h5' => false,);
                            }

                            // admin_v2_setting_es_bar
                            if ('/admin/v2/setting/es-bar' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\SiteSettingController::esBarSettingAction',  '_route' => 'admin_v2_setting_es_bar',  '_permission' =>   array (    0 => 'admin_v2_setting_es_bar',  ),  '_h5' => false,);
                            }

                            if (0 === strpos($pathinfo, '/admin/v2/setting/c')) {
                                if (0 === strpos($pathinfo, '/admin/v2/setting/co')) {
                                    if (0 === strpos($pathinfo, '/admin/v2/setting/cou')) {
                                        // admin_v2_coupon_setting
                                        if ('/admin/v2/setting/coupon' === $pathinfo) {
                                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Marketing\\CouponController::settingAction',  '_route' => 'admin_v2_coupon_setting',  '_permission' =>   array (    0 => 'admin_v2_coupon_setting',  ),  '_h5' => false,);
                                        }

                                        // admin_v2_setting_course_setting
                                        if ('/admin/v2/setting/course-setting' === $pathinfo) {
                                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\CourseSettingController::courseSettingAction',  '_route' => 'admin_v2_setting_course_setting',  '_permission' =>   array (    0 => 'admin_v2_setting_course',  ),  '_h5' => false,);
                                        }

                                        // admin_v2_setting_course_avatar
                                        if ('/admin/v2/setting/course-avatar' === $pathinfo) {
                                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\CourseSettingController::courseAvatarAction',  '_route' => 'admin_v2_setting_course_avatar',  '_permission' =>   array (    0 => 'admin_v2_setting_course_avatar',  ),  '_h5' => false,);
                                        }

                                    }

                                    elseif (0 === strpos($pathinfo, '/admin/v2/setting/consult-')) {
                                        // admin_v2_setting_consult_setting
                                        if ('/admin/v2/setting/consult-setting' === $pathinfo) {
                                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\SiteSettingController::consultSettingAction',  '_route' => 'admin_v2_setting_consult_setting',  '_permission' =>   array (    0 => 'admin_v2_setting_consult_setting',  ),  '_h5' => false,);
                                        }

                                        // admin_v2_setting_consult_upload
                                        if ('/admin/v2/setting/consult-upload' === $pathinfo) {
                                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\SiteSettingController::consultUploadAction',  '_route' => 'admin_v2_setting_consult_upload',  '_permission' =>   array (    0 => 'admin_v2_setting_consult_setting',  ),  '_h5' => false,);
                                        }

                                        // admin_v2_setting_consult_webchat_delete
                                        if ('/admin/v2/setting/consult-webchat-delete' === $pathinfo) {
                                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\SiteSettingController::deleteWebchatAction',  '_route' => 'admin_v2_setting_consult_webchat_delete',  '_permission' =>   array (    0 => 'admin_v2_setting_consult_setting',  ),  '_h5' => false,);
                                            if (!in_array($requestMethod, ['POST'])) {
                                                $allow = array_merge($allow, ['POST']);
                                                goto not_admin_v2_setting_consult_webchat_delete;
                                            }

                                            return $ret;
                                        }
                                        not_admin_v2_setting_consult_webchat_delete:

                                    }

                                    // admin_v2_content
                                    if ('/admin/v2/setting/content' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ContentController::indexAction',  '_route' => 'admin_v2_content',  '_permission' =>   array (    0 => 'admin_v2_content',  ),  '_h5' => false,);
                                    }

                                    // admin_v2_coin_settings
                                    if ('/admin/v2/setting/coin' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\AssetSettingController::coinAction',  '_route' => 'admin_v2_coin_settings',  '_permission' =>   array (    0 => 'admin_v2_coin_settings',  ),  '_h5' => false,);
                                    }

                                    if (0 === strpos($pathinfo, '/admin/v2/setting/coin/model')) {
                                        // admin_v2_coin_model
                                        if ('/admin/v2/setting/coin/model' === $pathinfo) {
                                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\AssetSettingController::coinModelAction',  '_route' => 'admin_v2_coin_model',  '_permission' =>   array (    0 => 'admin_v2_coin_settings',  ),  '_h5' => false,);
                                        }

                                        // admin_v2_coin_model_ajax
                                        if ('/admin/v2/setting/coin/model/ajax' === $pathinfo) {
                                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\AssetSettingController::coinTableAjaxAction',  '_route' => 'admin_v2_coin_model_ajax',  '_permission' =>   array (    0 => 'admin_v2_coin_user_records',  ),  '_h5' => false,);
                                        }

                                    }

                                }

                                elseif (0 === strpos($pathinfo, '/admin/v2/setting/cl')) {
                                    // admin_v2_classroom_setting
                                    if ('/admin/v2/setting/classroom' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\ClassroomController::setAction',  '_route' => 'admin_v2_classroom_setting',  '_permission' =>   array (    0 => 'admin_v2_classroom_setting',  ),  '_h5' => false,);
                                    }

                                    // admin_v2_setting_cloud
                                    if ('/admin/v2/setting/cloud' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::keyAction',  '_route' => 'admin_v2_setting_cloud',  '_permission' =>   array (    0 => 'admin_v2_setting_my_cloud',  ),  '_h5' => false,);
                                    }

                                    if (0 === strpos($pathinfo, '/admin/v2/setting/cloud/key')) {
                                        // admin_v2_setting_cloud_key_update
                                        if ('/admin/v2/setting/cloud/key/update' === $pathinfo) {
                                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::keyUpdateAction',  '_route' => 'admin_v2_setting_cloud_key_update',  '_permission' =>   array (    0 => 'admin_v2_setting_my_cloud',  ),  '_h5' => false,);
                                        }

                                        // admin_v2_setting_cloud_key_apply
                                        if ('/admin/v2/setting/cloud/key/apply' === $pathinfo) {
                                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::keyApplyAction',  '_route' => 'admin_v2_setting_cloud_key_apply',  '_permission' =>   array (    0 => 'admin_v2_setting_my_cloud',  ),  '_h5' => false,);
                                            if (!in_array($requestMethod, ['POST'])) {
                                                $allow = array_merge($allow, ['POST']);
                                                goto not_admin_v2_setting_cloud_key_apply;
                                            }

                                            return $ret;
                                        }
                                        not_admin_v2_setting_cloud_key_apply:

                                        // admin_v2_setting_cloud_key
                                        if ('/admin/v2/setting/cloud/key' === $pathinfo) {
                                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::keyAction',  '_route' => 'admin_v2_setting_cloud_key',  '_permission' =>   array (    0 => 'admin_v2_setting_my_cloud',  ),  '_h5' => false,);
                                        }

                                        // admin_v2_setting_cloud_key_info
                                        if ('/admin/v2/setting/cloud/key/info' === $pathinfo) {
                                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::keyInfoAction',  '_route' => 'admin_v2_setting_cloud_key_info',  '_permission' =>   array (    0 => 'admin_v2_setting_my_cloud',  ),  '_h5' => false,);
                                        }

                                        // admin_v2_setting_cloud_key_bind
                                        if ('/admin/v2/setting/cloud/key/bind' === $pathinfo) {
                                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::keyBindAction',  '_route' => 'admin_v2_setting_cloud_key_bind',  '_permission' =>   array (    0 => 'admin_v2_setting_my_cloud',  ),  '_h5' => false,);
                                        }

                                        // admin_v2_setting_cloud_key_copyright
                                        if ('/admin/v2/setting/cloud/key/copyright' === $pathinfo) {
                                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::keyCopyrightAction',  '_route' => 'admin_v2_setting_cloud_key_copyright',  '_permission' =>   array (    0 => 'admin_v2_setting_my_cloud',  ),  '_h5' => false,);
                                            if (!in_array($requestMethod, ['POST'])) {
                                                $allow = array_merge($allow, ['POST']);
                                                goto not_admin_v2_setting_cloud_key_copyright;
                                            }

                                            return $ret;
                                        }
                                        not_admin_v2_setting_cloud_key_copyright:

                                    }

                                }

                                // admin_v2_setting_cdn
                                if ('/admin/v2/setting/cdn' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\CdnSettingController::indexAction',  '_route' => 'admin_v2_setting_cdn',  '_permission' =>   array (    0 => 'admin_v2_setting_cdn',  ),  '_h5' => false,);
                                }

                            }

                            // admin_v2_wap_set
                            if ('/admin/v2/setting/wap' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\SettingController::wapSetAction',  '_route' => 'admin_v2_wap_set',  '_permission' =>   array (    0 => 'admin_v2_wap_set',  ),  '_h5' => false,);
                            }

                            if (0 === strpos($pathinfo, '/admin/v2/setting/m')) {
                                if (0 === strpos($pathinfo, '/admin/v2/setting/mobile')) {
                                    // admin_v2_setting_mobile
                                    if ('/admin/v2/setting/mobile' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\MobileSettingController::mobileAction',  '_route' => 'admin_v2_setting_mobile',  '_permission' =>   array (    0 => 'admin_v2_mobile_settings',  ),  '_h5' => false,);
                                    }

                                    // admin_v2_setting_mobile_discoveries
                                    if ('/admin/v2/setting/mobile_discoveries' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\MobileSettingController::mobileDiscoveriesAction',  '_route' => 'admin_v2_setting_mobile_discoveries',  '_permission' =>   array (    0 => 'admin_v2_setting_mobile',  ),  '_h5' => false,);
                                    }

                                    // admin_v2_setting_mobile_iap_product_delete
                                    if (0 === strpos($pathinfo, '/admin/v2/setting/mobile_iap_product_delete') && preg_match('#^/admin/v2/setting/mobile_iap_product_delete/(?P<productId>[^/]++)$#sD', $pathinfo, $matches)) {
                                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_setting_mobile_iap_product_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\IAPController::mobileIapProductDeleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                        if (!in_array($requestMethod, ['POST'])) {
                                            $allow = array_merge($allow, ['POST']);
                                            goto not_admin_v2_setting_mobile_iap_product_delete;
                                        }

                                        return $ret;
                                    }
                                    not_admin_v2_setting_mobile_iap_product_delete:

                                    // admin_v2_mobile_picture_upload
                                    if (0 === strpos($pathinfo, '/admin/v2/setting/mobile/picture/upload') && preg_match('#^/admin/v2/setting/mobile/picture/upload/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_mobile_picture_upload']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\MobileSettingController::mobilePictureUploadAction',  '_permission' =>   array (    0 => 'admin_v2_mobile_settings',  ),  '_h5' => false,));
                                        if (!in_array($requestMethod, ['POST'])) {
                                            $allow = array_merge($allow, ['POST']);
                                            goto not_admin_v2_mobile_picture_upload;
                                        }

                                        return $ret;
                                    }
                                    not_admin_v2_mobile_picture_upload:

                                    // admin_v2_mobile_picture_remove
                                    if (0 === strpos($pathinfo, '/admin/v2/setting/mobile/picture/remove') && preg_match('#^/admin/v2/setting/mobile/picture/remove/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_mobile_picture_remove']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\MobileSettingController::mobilePictureRemoveAction',  '_permission' =>   array (    0 => 'admin_v2_mobile_settings',  ),  '_h5' => false,));
                                        if (!in_array($requestMethod, ['POST'])) {
                                            $allow = array_merge($allow, ['POST']);
                                            goto not_admin_v2_mobile_picture_remove;
                                        }

                                        return $ret;
                                    }
                                    not_admin_v2_mobile_picture_remove:

                                    // admin_v2_mobile_banner_manage
                                    if ('/admin/v2/setting/mobile/banner' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\MobileSettingController::bannerAction',  '_route' => 'admin_v2_mobile_banner_manage',  '_permission' =>   array (    0 => 'admin_v2_mobile_banner_manage',  ),  '_h5' => false,);
                                    }

                                }

                                elseif (0 === strpos($pathinfo, '/admin/v2/setting/mailer')) {
                                    // admin_v2_setting_mailer
                                    if ('/admin/v2/setting/mailer' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\OperationSettingController::mailerAction',  '_route' => 'admin_v2_setting_mailer',  '_permission' =>   array (    0 => 'admin_v2_setting_mailer',  ),  '_h5' => false,);
                                    }

                                    // admin_v2_setting_mailer_test
                                    if ('/admin/v2/setting/mailer/test' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\OperationSettingController::mailerTestAction',  '_route' => 'admin_v2_setting_mailer_test',  '_permission' =>   array (  ),  '_h5' => false,);
                                        if (!in_array($canonicalMethod, ['GET'])) {
                                            $allow = array_merge($allow, ['GET']);
                                            goto not_admin_v2_setting_mailer_test;
                                        }

                                        return $ret;
                                    }
                                    not_admin_v2_setting_mailer_test:

                                }

                                elseif (0 === strpos($pathinfo, '/admin/v2/setting/message')) {
                                    // admin_v2_message_open_set
                                    if ('/admin/v2/setting/message-setting' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\OperationSettingController::messageOpenAction',  '_route' => 'admin_v2_message_open_set',  '_permission' =>   array (    0 => 'admin_v2_message_open_set',  ),  '_h5' => false,);
                                    }

                                    // admin_v2_message_send_set
                                    if ('/admin/v2/setting/message' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\OperationSettingController::messageSendAction',  '_route' => 'admin_v2_message_send_set',  '_permission' =>   array (    0 => 'admin_v2_message_send_set',  ),  '_h5' => false,);
                                    }

                                }

                                elseif (0 === strpos($pathinfo, '/admin/v2/setting/my/cloud')) {
                                    // admin_v2_my_cloud_overview
                                    if ('/admin/v2/setting/my/cloud/overview' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::myCloudOverviewAction',  '_route' => 'admin_v2_my_cloud_overview',  '_permission' =>   array (    0 => 'admin_v2_my_cloud_overview',  ),  '_h5' => false,);
                                    }

                                    // admin_v2_my_cloud
                                    if ('/admin/v2/setting/my/cloud' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::myCloudAction',  '_route' => 'admin_v2_my_cloud',  '_permission' =>   array (    0 => 'admin_v2_my_cloud_overview',  ),  '_h5' => false,);
                                    }

                                }

                            }

                            elseif (0 === strpos($pathinfo, '/admin/v2/setting/theme')) {
                                // admin_v2_setting_theme
                                if ('/admin/v2/setting/theme' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ThemeController::indexAction',  '_route' => 'admin_v2_setting_theme',  '_permission' =>   array (    0 => 'admin_v2_setting_theme',  ),  '_h5' => false,);
                                }

                                // admin_v2_setting_theme_change
                                if ('/admin/v2/setting/theme/change' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ThemeController::changeAction',  '_route' => 'admin_v2_setting_theme_change',  '_permission' =>   array (    0 => 'admin_v2_setting_theme',  ),  '_h5' => false,);
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_setting_theme_change;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_setting_theme_change:

                            }

                            elseif (0 === strpos($pathinfo, '/admin/v2/setting/navigation')) {
                                // admin_v2_navigation
                                if ('/admin/v2/setting/navigation' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\NavigationController::indexAction',  '_route' => 'admin_v2_navigation',  '_permission' =>   array (    0 => 'admin_v2_top_navigation',    1 => 'admin_v2_foot_navigation',  ),  '_h5' => false,);
                                }

                                // admin_v2_navigation_seqs_update
                                if ('/admin/v2/setting/navigation/seqs/update' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\NavigationController::updateSeqsAction',  '_route' => 'admin_v2_navigation_seqs_update',  '_permission' =>   array (    0 => 'admin_v2_top_navigation',    1 => 'admin_v2_foot_navigation',  ),  '_h5' => false,);
                                }

                                // admin_v2_navigation_create
                                if ('/admin/v2/setting/navigation/create' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\NavigationController::createAction',  '_route' => 'admin_v2_navigation_create',  '_permission' =>   array (    0 => 'admin_v2_top_navigation',    1 => 'admin_v2_foot_navigation',  ),  '_h5' => false,);
                                }

                                // admin_v2_navigation_update
                                if (preg_match('#^/admin/v2/setting/navigation/(?P<id>[^/]++)/update$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_navigation_update']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\NavigationController::editAction',  '_permission' =>   array (    0 => 'admin_v2_top_navigation',    1 => 'admin_v2_foot_navigation',  ),  '_h5' => false,));
                                }

                                // admin_v2_navigation_delete
                                if (preg_match('#^/admin/v2/setting/navigation/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_navigation_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\NavigationController::deleteAction',  '_permission' =>   array (    0 => 'admin_v2_top_navigation',    1 => 'admin_v2_foot_navigation',  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_navigation_delete;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_navigation_delete:

                            }

                            // admin_v2_homepage_live_notify
                            if ('/admin/v2/setting/homepage-live-notify' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\SiteSettingController::homepageLiveNotifySettingAction',  '_route' => 'admin_v2_homepage_live_notify',  '_permission' =>   array (    0 => 'admin_v2_homepage_live_notify',  ),  '_h5' => false,);
                            }

                            if (0 === strpos($pathinfo, '/admin/v2/setting/s')) {
                                // admin_v2_setting_share
                                if ('/admin/v2/setting/share' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\SiteSettingController::shareAction',  '_route' => 'admin_v2_setting_share',  '_permission' =>   array (    0 => 'admin_v2_setting_share',  ),  '_h5' => false,);
                                }

                                if (0 === strpos($pathinfo, '/admin/v2/setting/site')) {
                                    // admin_v2_school_information
                                    if ('/admin/v2/setting/site' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\SchoolInformationController::siteAction',  '_route' => 'admin_v2_school_information',  '_permission' =>   array (    0 => 'admin_v2_school_information',  ),  '_h5' => false,);
                                    }

                                    // admin_v2_school_information_save
                                    if ('/admin/v2/setting/site/save' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\SchoolInformationController::saveSiteAction',  '_route' => 'admin_v2_school_information_save',  '_permission' =>   array (    0 => 'admin_v2_school_information',  ),  '_h5' => false,);
                                        if (!in_array($requestMethod, ['POST'])) {
                                            $allow = array_merge($allow, ['POST']);
                                            goto not_admin_v2_school_information_save;
                                        }

                                        return $ret;
                                    }
                                    not_admin_v2_school_information_save:

                                }

                                // admin_v2_security_setting
                                if ('/admin/v2/setting/security' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\SettingController::securityAction',  '_route' => 'admin_v2_security_setting',  '_permission' =>   array (    0 => 'admin_v2_security',  ),  '_h5' => false,);
                                }

                            }

                            elseif (0 === strpos($pathinfo, '/admin/v2/setting/log')) {
                                // admin_v2_setting_logo_upload
                                if ('/admin/v2/setting/logo/upload' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\SettingController::logoUploadAction',  '_route' => 'admin_v2_setting_logo_upload',  '_permission' =>   array (    0 => 'admin_v2_school_information',  ),  '_h5' => false,);
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_setting_logo_upload;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_setting_logo_upload:

                                // admin_v2_setting_logo_remove
                                if ('/admin/v2/setting/logo/remove' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\SettingController::logoRemoveAction',  '_route' => 'admin_v2_setting_logo_remove',  '_permission' =>   array (    0 => 'admin_v2_school_information',  ),  '_h5' => false,);
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_setting_logo_remove;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_setting_logo_remove:

                                // admin_v2_setting_login_bind
                                if ('/admin/v2/setting/login-connect' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\UserSettingController::loginConnectAction',  '_route' => 'admin_v2_setting_login_bind',  '_permission' =>   array (    0 => 'admin_v2_setting_login_bind',  ),  '_h5' => false,);
                                }

                                if (0 === strpos($pathinfo, '/admin/v2/setting/logs')) {
                                    // admin_v2_logs
                                    if ('/admin/v2/setting/logs' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\LogController::indexAction',  '_route' => 'admin_v2_logs',  '_permission' =>   array (    0 => 'admin_v2_logs',  ),  '_h5' => false,);
                                    }

                                    // admin_v2_logs_prod
                                    if ('/admin/v2/setting/logs/prod' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\LogController::prodAction',  '_route' => 'admin_v2_logs_prod',  '_permission' =>   array (    0 => 'admin_v2_logs_prod',  ),  '_h5' => false,);
                                    }

                                    // admin_v2_logs_action_dicts
                                    if ('/admin/v2/setting/logs/logActions' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\LogController::logActionsAction',  '_route' => 'admin_v2_logs_action_dicts',  '_permission' =>   array (  ),  '_h5' => false,);
                                    }

                                    // admin_v2_logs_field_change
                                    if ('/admin/v2/setting/logs/logFieldChange' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\LogController::logFieldChangeAction',  '_route' => 'admin_v2_logs_field_change',  '_permission' =>   array (  ),  '_h5' => false,);
                                    }

                                    // admin_v2_logs_username_match
                                    if ('/admin/v2/setting/logs/usernameMatchUsers' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\LogController::usernameMatchUsersAction',  '_route' => 'admin_v2_logs_username_match',  '_permission' =>   array (  ),  '_h5' => false,);
                                    }

                                    // admin_v2_logs_old
                                    if ('/admin/v2/setting/logs/old' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\LogController::oldAction',  '_route' => 'admin_v2_logs_old',  '_permission' =>   array (  ),  '_h5' => false,);
                                    }

                                }

                            }

                            // admin_v2_setting_live_course_setting
                            if ('/admin/v2/setting/live-course-setting' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\CourseSettingController::liveCourseSettingAction',  '_route' => 'admin_v2_setting_live_course_setting',  '_permission' =>   array (    0 => 'admin_v2_setting_live_course',  ),  '_h5' => false,);
                            }

                            // admin_v2_setting_favicon_upload
                            if ('/admin/v2/setting/favicon/upload' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\SettingController::faviconUploadAction',  '_route' => 'admin_v2_setting_favicon_upload',  '_permission' =>   array (    0 => 'admin_v2_school_information',  ),  '_h5' => false,);
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_setting_favicon_upload;
                                }

                                return $ret;
                            }
                            not_admin_v2_setting_favicon_upload:

                            // admin_v2_setting_favicon_remove
                            if ('/admin/v2/setting/favicon/remove' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\SettingController::faviconRemoveAction',  '_route' => 'admin_v2_setting_favicon_remove',  '_permission' =>   array (    0 => 'admin_v2_school_information',  ),  '_h5' => false,);
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_setting_favicon_remove;
                                }

                                return $ret;
                            }
                            not_admin_v2_setting_favicon_remove:

                            if (0 === strpos($pathinfo, '/admin/v2/setting/a')) {
                                // admin_v2_setting_auth
                                if ('/admin/v2/setting/auth' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\UserSettingController::authAction',  '_route' => 'admin_v2_setting_auth',  '_permission' =>   array (    0 => 'admin_v2_user_auth',  ),  '_h5' => false,);
                                }

                                // admin_v2_setting_admin_sync
                                if ('/admin/v2/setting/admin_sync' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\SettingController::adminSyncAction',  '_route' => 'admin_v2_setting_admin_sync',  '_permission' =>   array (    0 => 'admin_v2_setting_user_center',  ),  '_h5' => false,);
                                }

                                // admin_v2_article_set
                                if ('/admin/v2/setting/article' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\OperationSettingController::articleSetAction',  '_route' => 'admin_v2_article_set',  '_permission' =>   array (    0 => 'admin_v2_article_set',  ),  '_h5' => false,);
                                }

                                // admin_v2_setting_apple
                                if ('/admin/v2/setting/apple' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\AppleSettingController::indexAction',  '_route' => 'admin_v2_setting_apple',  '_permission' =>   array (    0 => 'admin_v2_setting_apple',  ),  '_h5' => false,);
                                }

                            }

                            elseif (0 === strpos($pathinfo, '/admin/v2/setting/user-')) {
                                // admin_v2_setting_user_fields
                                if ('/admin/v2/setting/user-fields' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\UserSettingController::userFieldsAction',  '_route' => 'admin_v2_setting_user_fields',  '_permission' =>   array (    0 => 'admin_v2_setting_user_fields',  ),  '_h5' => false,);
                                }

                                // admin_v2_setting_avatar
                                if ('/admin/v2/setting/user-avatar' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\UserSettingController::userAvatarAction',  '_route' => 'admin_v2_setting_avatar',  '_permission' =>   array (    0 => 'admin_v2_setting_avatar',  ),  '_h5' => false,);
                                }

                                // admin_v2_setting_user_center
                                if ('/admin/v2/setting/user-center' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\UserSettingController::userCenterAction',  '_route' => 'admin_v2_setting_user_center',  '_permission' =>   array (    0 => 'admin_v2_setting_user_center',  ),  '_h5' => false,);
                                }

                            }

                            elseif (0 === strpos($pathinfo, '/admin/v2/setting/de')) {
                                // admin_v2_setting_default_avatar_crop
                                if ('/admin/v2/setting/default/avatar/crop' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\SystemDefaultSettingController::defaultAvatarCropAction',  '_route' => 'admin_v2_setting_default_avatar_crop',  '_permission' =>   array (    0 => 'admin_v2_setting_avatar',  ),  '_h5' => false,);
                                }

                                // admin_v2_setting_default_course_picture_crop
                                if ('/admin/v2/setting/default/course/picture/crop' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\SystemDefaultSettingController::defaultCoursePictureCropAction',  '_route' => 'admin_v2_setting_default_course_picture_crop',  '_permission' =>   array (    0 => 'admin_v2_setting_course_avatar',    1 => 'admin_v2_setting_avatar',    2 => 'course_manage_picture',  ),  '_h5' => false,);
                                }

                                if (0 === strpos($pathinfo, '/admin/v2/setting/developer')) {
                                    // admin_v2_setting_developer
                                    if ('/admin/v2/setting/developer' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\DeveloperSettingController::indexAction',  '_route' => 'admin_v2_setting_developer',  '_permission' =>   array (    0 => 'admin_v2',  ),  '_h5' => false,);
                                    }

                                    // admin_v2_setting_developer_version
                                    if ('/admin/v2/setting/developer/version' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\DeveloperSettingController::versionAction',  '_route' => 'admin_v2_setting_developer_version',  '_permission' =>   array (    0 => 'admin_v2_setting_developer_version',  ),  '_h5' => false,);
                                    }

                                    // admin_v2_setting_developer_magic
                                    if ('/admin/v2/setting/developer/magic' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\DeveloperSettingController::magicAction',  '_route' => 'admin_v2_setting_developer_magic',  '_permission' =>   array (    0 => 'admin_v2_setting_developer_magic',  ),  '_h5' => false,);
                                    }

                                }

                            }

                            // admin_v2_setting_questions_setting
                            if ('/admin/v2/setting/questions-setting' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\CourseSettingController::questionsSettingAction',  '_route' => 'admin_v2_setting_questions_setting',  '_permission' =>   array (    0 => 'admin_v2_setting_questions_setting',  ),  '_h5' => false,);
                            }

                            // admin_v2_open_course_setting
                            if ('/admin/v2/setting/open-course-setting' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\OpenCourseSettingController::openCourseSettingAction',  '_route' => 'admin_v2_open_course_setting',  '_permission' =>   array (    0 => 'admin_v2_open_course_setting',  ),  '_h5' => false,);
                            }

                            if (0 === strpos($pathinfo, '/admin/v2/setting/optimize')) {
                                // admin_v2_optimize
                                if ('/admin/v2/setting/optimize' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\OptimizeController::indexAction',  '_route' => 'admin_v2_optimize',  '_permission' =>   array (    0 => 'admin_v2_optimize_settings',  ),  '_h5' => false,);
                                }

                                // admin_v2_optimize_remove_cache
                                if ('/admin/v2/setting/optimize/remove-cache' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\OptimizeController::removeCacheAction',  '_route' => 'admin_v2_optimize_remove_cache',  '_permission' =>   array (    0 => 'admin_v2_optimize_settings',  ),  '_h5' => false,);
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_optimize_remove_cache;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_optimize_remove_cache:

                                // admin_v2_optimize_backupdb
                                if ('/admin/v2/setting/optimize/backupdb' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\OptimizeController::backupDatabaseAction',  '_route' => 'admin_v2_optimize_backupdb',  '_permission' =>   array (    0 => 'admin_v2_optimize_settings',  ),  '_h5' => false,);
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_optimize_backupdb;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_optimize_backupdb:

                            }

                            // admin_v2_group_set
                            if ('/admin/v2/setting/group' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\OperationSettingController::groupSetAction',  '_route' => 'admin_v2_group_set',  '_permission' =>   array (    0 => 'admin_v2_group_set',  ),  '_h5' => false,);
                            }

                            // admin_v2_invite_set
                            if ('/admin/v2/setting/invite' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\OperationSettingController::inviteSetAction',  '_route' => 'admin_v2_invite_set',  '_permission' =>   array (    0 => 'admin_v2_invite_set',  ),  '_h5' => false,);
                            }

                            // admin_v2_ip_blacklist_setting
                            if ('/admin/v2/setting/ip-blacklist' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\SettingController::ipBlacklistAction',  '_route' => 'admin_v2_ip_blacklist_setting',  '_permission' =>   array (    0 => 'admin_v2_security',  ),  '_h5' => false,);
                            }

                            // admin_v2_setting_refund
                            if ('/admin/v2/setting/refund' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\AssetSettingController::refundAction',  '_route' => 'admin_v2_setting_refund',  '_permission' =>   array (    0 => 'admin_v2_setting_refund',  ),  '_h5' => false,);
                            }

                            if (0 === strpos($pathinfo, '/admin/v2/setting/p')) {
                                // admin_v2_setting_payment
                                if ('/admin/v2/setting/payment' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\AssetSettingController::paymentAction',  '_route' => 'admin_v2_setting_payment',  '_permission' =>   array (    0 => 'admin_v2_payment',  ),  '_h5' => false,);
                                }

                                // admin_v2_post_num_rules_setting
                                if ('/admin/v2/setting/post_num_rules' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\SettingController::postNumRulesAction',  '_route' => 'admin_v2_post_num_rules_setting',  '_permission' =>   array (    0 => 'admin_v2_security',  ),  '_h5' => false,);
                                }

                                // admin_v2_performance
                                if ('/admin/v2/setting/performance' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\PageSettingController::performanceAction',  '_route' => 'admin_v2_performance',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                            }

                        }

                        // admin_v2_sms_prepare
                        if (0 === strpos($pathinfo, '/admin/v2/sms/prepare') && preg_match('#^/admin/v2/sms/prepare/(?P<targetType>[^/]++)/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_sms_prepare']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\SmsController::prepareAction',  '_permission' =>   array (    0 => 'admin_v2_sms_prepare',  ),  '_h5' => false,));
                        }

                    }

                    // admin_v2_homepage_daily_statistics
                    if ('/admin/v2/homepage/data_statistics/daily' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\DefaultController::statisticsDailyAction',  '_route' => 'admin_v2_homepage_daily_statistics',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // admin_v2_homepage_newcomer_task
                    if ('/admin/v2/homepage/newcomer_task' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\DefaultController::newcomerAction',  '_route' => 'admin_v2_homepage_newcomer_task',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    if (0 === strpos($pathinfo, '/admin/v2/q')) {
                        // admin_v2_quick_entrance
                        if ('/admin/v2/quick_entrance' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\DefaultController::quickEntranceAction',  '_route' => 'admin_v2_quick_entrance',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        if (0 === strpos($pathinfo, '/admin/v2/que')) {
                            // admin_v2_question
                            if (0 === strpos($pathinfo, '/admin/v2/question') && preg_match('#^/admin/v2/question/(?P<postStatus>[^/]++)$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_question']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseQuestionController::indexAction',  '_permission' =>   array (    0 => 'admin_v2_course_question_manage',  ),  '_h5' => false,));
                            }

                            if (0 === strpos($pathinfo, '/admin/v2/question_bank')) {
                                // admin_v2_question_bank
                                if ('/admin/v2/question_bank/index' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\QuestionBankController::indexAction',  '_route' => 'admin_v2_question_bank',  '_permission' =>   array (    0 => 'admin_v2_question_bank',  ),  '_h5' => false,);
                                }

                                // admin_v2_question_bank_manage_create
                                if ('/admin/v2/question_bank/create' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\QuestionBankController::createAction',  '_route' => 'admin_v2_question_bank_manage_create',  '_permission' =>   array (    0 => 'admin_v2_question_bank',  ),  '_h5' => false,);
                                }

                                // admin_v2_question_bank_manage_edit
                                if (preg_match('#^/admin/v2/question_bank/(?P<id>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_question_bank_manage_edit']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\QuestionBankController::editAction',  '_permission' =>   array (    0 => 'admin_v2_question_bank',  ),  '_h5' => false,));
                                }

                                // admin_v2_question_bank_manage_delete
                                if (preg_match('#^/admin/v2/question_bank/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_question_bank_manage_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\QuestionBankController::deleteAction',  '_permission' =>   array (    0 => 'admin_v2_question_bank',  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_question_bank_manage_delete;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_question_bank_manage_delete:

                                if (0 === strpos($pathinfo, '/admin/v2/question_bank/category')) {
                                    // admin_v2_question_bank_category
                                    if ('/admin/v2/question_bank/category/index' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\QuestionBankCategoryController::indexAction',  '_route' => 'admin_v2_question_bank_category',  '_permission' =>   array (    0 => 'admin_v2_question_bank',  ),  '_h5' => false,);
                                    }

                                    // admin_v2_question_bank_category_manage_create
                                    if ('/admin/v2/question_bank/category/create' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\QuestionBankCategoryController::createAction',  '_route' => 'admin_v2_question_bank_category_manage_create',  '_permission' =>   array (    0 => 'admin_v2_question_bank',  ),  '_h5' => false,);
                                    }

                                    // admin_v2_question_bank_category_manage_edit
                                    if (preg_match('#^/admin/v2/question_bank/category/(?P<id>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_question_bank_category_manage_edit']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\QuestionBankCategoryController::editAction',  '_permission' =>   array (    0 => 'admin_v2_question_bank',  ),  '_h5' => false,));
                                    }

                                    // admin_v2_question_bank_category_manage_delete
                                    if (preg_match('#^/admin/v2/question_bank/category/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_question_bank_category_manage_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\QuestionBankCategoryController::deleteAction',  '_permission' =>   array (    0 => 'admin_v2_question_bank',  ),  '_h5' => false,));
                                        if (!in_array($requestMethod, ['POST'])) {
                                            $allow = array_merge($allow, ['POST']);
                                            goto not_admin_v2_question_bank_category_manage_delete;
                                        }

                                        return $ret;
                                    }
                                    not_admin_v2_question_bank_category_manage_delete:

                                    // admin_v2_question_bank_category_sort
                                    if ('/admin/v2/question_bank/category/sort' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\QuestionBankCategoryController::sortAction',  '_route' => 'admin_v2_question_bank_category_sort',  '_permission' =>   array (    0 => 'admin_v2_question_bank',  ),  '_h5' => false,);
                                        if (!in_array($requestMethod, ['POST'])) {
                                            $allow = array_merge($allow, ['POST']);
                                            goto not_admin_v2_question_bank_category_sort;
                                        }

                                        return $ret;
                                    }
                                    not_admin_v2_question_bank_category_sort:

                                }

                            }

                            elseif (0 === strpos($pathinfo, '/admin/v2/queue/failed_log')) {
                                // admin_v2_queue_failed_logs
                                if ('/admin/v2/queue/failed_logs' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\QueueController::failedJobsAction',  '_route' => 'admin_v2_queue_failed_logs',  '_permission' =>   array (    0 => 'admin_v2_queue_failed_logs',  ),  '_h5' => false,);
                                }

                                // admin_v2_queue_failed_log_modal
                                if (preg_match('#^/admin/v2/queue/failed_log/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_queue_failed_log_modal']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\QueueController::failedJobAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                }

                            }

                        }

                        // admin_v2_homepage_qrcode
                        if ('/admin/v2/qr_code' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\DefaultController::qrCodeAction',  '_route' => 'admin_v2_homepage_qrcode',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                    }

                    elseif (0 === strpos($pathinfo, '/admin/v2/a')) {
                        if (0 === strpos($pathinfo, '/admin/v2/app')) {
                            // admin_v2_homepage_application_intro
                            if ('/admin/v2/application_intro' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\DefaultController::applicationIntroAction',  '_route' => 'admin_v2_homepage_application_intro',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            if (0 === strpos($pathinfo, '/admin/v2/approvals')) {
                                // admin_v2_approval_approvals
                                if (preg_match('#^/admin/v2/approvals/(?P<approvalStatus>[^/]++)$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_approval_approvals']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\UserApprovalController::approvalsAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                }

                                // admin_v2_approval_info_view
                                if (preg_match('#^/admin/v2/approvals/(?P<id>[^/]++)/view$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_approval_info_view']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\UserApprovalController::viewApprovalInfoAction',  '_permission' =>   array (    0 => 'admin_v2_approval_manage',  ),  '_h5' => false,));
                                }

                                // admin_v2_approval_approve
                                if (preg_match('#^/admin/v2/approvals/(?P<id>[^/]++)/approve$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_approval_approve']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\UserApprovalController::approveAction',  '_permission' =>   array (    0 => 'admin_v2_approval_manage',  ),  '_h5' => false,));
                                }

                                // admin_v2_approval_cancel
                                if (preg_match('#^/admin/v2/approvals/(?P<id>[^/]++)/cancel$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_approval_cancel']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\UserApprovalController::cancelAction',  '_permission' =>   array (    0 => 'admin_v2_approval_cancel',  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_approval_cancel;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_approval_cancel:

                                // admin_v2_show_idcard
                                if (0 === strpos($pathinfo, '/admin/v2/approvals/idcard/show') && preg_match('#^/admin/v2/approvals/idcard/show/(?P<userId>[^/]++)/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_show_idcard']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\UserApprovalController::showIdcardAction',  '_permission' =>   array (    0 => 'admin_v2_approval_manage',  ),  '_h5' => false,));
                                }

                            }

                            elseif (0 === strpos($pathinfo, '/admin/v2/app/resource')) {
                                if (0 === strpos($pathinfo, '/admin/v2/app/resources_settlement')) {
                                    if (0 === strpos($pathinfo, '/admin/v2/app/resources_settlement/balance')) {
                                        // admin_v2_resource_settlement_balance
                                        if ('/admin/v2/app/resources_settlement/balance' === $pathinfo) {
                                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\ResourceSettlementController::balanceAction',  '_route' => 'admin_v2_resource_settlement_balance',  '_permission' =>   array (    0 => 'admin_v2_resource_settlement_balance',  ),  '_h5' => false,);
                                        }

                                        // admin_v2_resource_settlement_balance_modal
                                        if (preg_match('#^/admin/v2/app/resources_settlement/balance/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_resource_settlement_balance_modal']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\ResourceSettlementController::balanceModalAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                        }

                                    }

                                    elseif (0 === strpos($pathinfo, '/admin/v2/app/resources_settlement/order')) {
                                        // admin_v2_resource_settlement_order_modal
                                        if (preg_match('#^/admin/v2/app/resources_settlement/order/(?P<sn>[^/]++)$#sD', $pathinfo, $matches)) {
                                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_resource_settlement_order_modal']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\ResourceSettlementController::orderModalAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                        }

                                        // admin_v2_resource_settlement_order
                                        if ('/admin/v2/app/resources_settlement/order' === $pathinfo) {
                                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\ResourceSettlementController::orderAction',  '_route' => 'admin_v2_resource_settlement_order',  '_permission' =>   array (    0 => 'admin_v2_resource_settlement_order',  ),  '_h5' => false,);
                                        }

                                    }

                                    // admin_v2_resource_settlement_product
                                    if ('/admin/v2/app/resources_settlement/product' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\ResourceSettlementController::productAction',  '_route' => 'admin_v2_resource_settlement_product',  '_permission' =>   array (    0 => 'admin_v2_resource_settlement_product',  ),  '_h5' => false,);
                                    }

                                }

                                // admin_v2_content_resource_update_product_version
                                if (0 === strpos($pathinfo, '/admin/v2/app/resources/product') && preg_match('#^/admin/v2/app/resources/product/(?P<productId>[^/]++)/update/version$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_content_resource_update_product_version']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\ResourcePurchaseController::updateProductToLatestVersionAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                }

                                // admin_v2_product_update_setting
                                if ('/admin/v2/app/resource_product/product/update/setting' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\ResourcePurchaseController::productUpdateSettingAction',  '_route' => 'admin_v2_product_update_setting',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                            }

                            // admin_v2_content_resource_product_detail
                            if (0 === strpos($pathinfo, '/admin/v2/app/resourses/type') && preg_match('#^/admin/v2/app/resourses/type/(?P<productType>[^/]++)/remote_resource/(?P<s2b2cProductId>[^/]++)/course(?:/(?P<courseId>[^/]++))?$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_content_resource_product_detail']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\ResourcePurchaseController::productDetailAction',  'courseId' => 0,  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_v2_app_center
                            if (0 === strpos($pathinfo, '/admin/v2/app/center') && preg_match('#^/admin/v2/app/center(?:/(?P<postStatus>[^/]++))?$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_app_center']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\AppController::centerAction',  'postStatus' => 'all',  '_permission' =>   array (    0 => 'admin_v2_app_center',  ),  '_h5' => false,));
                            }

                            if (0 === strpos($pathinfo, '/admin/v2/app/content_resource')) {
                                if (0 === strpos($pathinfo, '/admin/v2/app/content_resource/purchase_market')) {
                                    // admin_v2_purchase_market
                                    if (0 === strpos($pathinfo, '/admin/v2/app/content_resource/purchase_market/resource_type') && preg_match('#^/admin/v2/app/content_resource/purchase_market/resource_type(?:/(?P<tab>[^/]++))?$#sD', $pathinfo, $matches)) {
                                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_purchase_market']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\ResourcePurchaseController::marketAction',  'tab' => 'courseSet',  '_permission' =>   array (  ),  '_h5' => false,));
                                    }

                                    // admin_v2_purchase_market_products_list
                                    if (preg_match('#^/admin/v2/app/content_resource/purchase_market/(?P<type>[^/]++)/goods_list$#sD', $pathinfo, $matches)) {
                                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_purchase_market_products_list']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\ResourcePurchaseController::productsAction',  'type' => 'courseSet',  '_permission' =>   array (  ),  '_h5' => false,));
                                    }

                                }

                                elseif (0 === strpos($pathinfo, '/admin/v2/app/content_resource/product')) {
                                    // admin_v2_content_resource_products_version
                                    if ('/admin/v2/app/content_resource/products/version' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\ResourcePurchaseController::productsVersionAction',  '_route' => 'admin_v2_content_resource_products_version',  '_permission' =>   array (  ),  '_h5' => false,);
                                    }

                                    // admin_v2_content_resource_product_version_detail
                                    if (preg_match('#^/admin/v2/app/content_resource/product/(?P<remoteSourceId>[^/]++)/version_detail$#sD', $pathinfo, $matches)) {
                                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_content_resource_product_version_detail']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\ResourcePurchaseController::productVersionDetailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                    }

                                }

                                // admin_v2_content_resource_choose_product
                                if (0 === strpos($pathinfo, '/admin/v2/app/content_resource/type') && preg_match('#^/admin/v2/app/content_resource/type/(?P<productType>[^/]++)/product_id/(?P<productId>[^/]++)$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_content_resource_choose_product']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\S2B2C\\ProductController::pullSupplierProductAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_content_resource_choose_product;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_content_resource_choose_product:

                            }

                            // admin_v2_app_installed
                            if (0 === strpos($pathinfo, '/admin/v2/app/installed') && preg_match('#^/admin/v2/app/installed/(?P<postStatus>[^/]++)$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_app_installed']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\AppController::installedAction',  '_permission' =>   array (    0 => 'admin_v2_app_installed',  ),  '_h5' => false,));
                            }

                            // admin_v2_app_uninstall
                            if ('/admin/v2/app/uninstall' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\AppController::uninstallAction',  '_route' => 'admin_v2_app_uninstall',  '_permission' =>   array (    0 => 'admin_v2_app_installed',  ),  '_h5' => false,);
                            }

                            if (0 === strpos($pathinfo, '/admin/v2/app/upgrades')) {
                                // admin_v2_app_upgrades
                                if ('/admin/v2/app/upgrades' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\AppController::upgradesAction',  '_route' => 'admin_v2_app_upgrades',  '_permission' =>   array (    0 => 'admin_v2_app_upgrades',  ),  '_h5' => false,);
                                }

                                // admin_v2_app_upgrades_count
                                if ('/admin/v2/app/upgrades_count' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\AppController::upgradesCountAction',  '_route' => 'admin_v2_app_upgrades_count',  '_permission' =>   array (    0 => 'admin_v2_app_upgrades',  ),  '_h5' => false,);
                                }

                            }

                            // admin_v2_app_logs
                            if ('/admin/v2/app/logs' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\AppController::logsAction',  '_route' => 'admin_v2_app_logs',  '_permission' =>   array (    0 => 'admin_v2_app_logs',  ),  '_h5' => false,);
                            }

                            if (0 === strpos($pathinfo, '/admin/v2/app/package_update')) {
                                // admin_v2_app_package_update_modal
                                if (preg_match('#^/admin/v2/app/package_update/(?P<id>[^/]++)/modal$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_app_package_update_modal']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\AppPackageUpdateController::modalAction',  '_permission' =>   array (    0 => 'admin_v2_app_center',    1 => 'admin_v2_app_installed',    2 => 'admin_v2_app_upgrades',  ),  '_h5' => false,));
                                }

                                // admin_v2_app_package_update_check_environment
                                if (preg_match('#^/admin/v2/app/package_update/(?P<id>[^/]++)/check_environment$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_app_package_update_check_environment']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\AppPackageUpdateController::checkEnvironmentAction',  '_permission' =>   array (    0 => 'admin_v2_app_center',    1 => 'admin_v2_app_installed',    2 => 'admin_v2_app_upgrades',  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_app_package_update_check_environment;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_app_package_update_check_environment:

                                // admin_v2_app_package_update_check_depends
                                if (preg_match('#^/admin/v2/app/package_update/(?P<id>[^/]++)/check_depends$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_app_package_update_check_depends']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\AppPackageUpdateController::checkDependsAction',  '_permission' =>   array (    0 => 'admin_v2_app_center',    1 => 'admin_v2_app_installed',    2 => 'admin_v2_app_upgrades',  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_app_package_update_check_depends;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_app_package_update_check_depends:

                                // admin_v2_app_package_update_check_last_error
                                if (preg_match('#^/admin/v2/app/package_update/(?P<id>[^/]++)/check_lasterror$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_app_package_update_check_last_error']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\AppPackageUpdateController::checklastErrorAction',  '_permission' =>   array (    0 => 'admin_v2_app_center',    1 => 'admin_v2_app_installed',    2 => 'admin_v2_app_upgrades',  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_app_package_update_check_last_error;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_app_package_update_check_last_error:

                                // admin_v2_app_package_update_backup_file
                                if (preg_match('#^/admin/v2/app/package_update/(?P<id>[^/]++)/backup_file$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_app_package_update_backup_file']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\AppPackageUpdateController::backupFileAction',  '_permission' =>   array (    0 => 'admin_v2_app_center',    1 => 'admin_v2_app_installed',    2 => 'admin_v2_app_upgrades',  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_app_package_update_backup_file;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_app_package_update_backup_file:

                                // admin_v2_app_package_update_backup_db
                                if (preg_match('#^/admin/v2/app/package_update/(?P<id>[^/]++)/backup_db$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_app_package_update_backup_db']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\AppPackageUpdateController::backupDbAction',  '_permission' =>   array (    0 => 'admin_v2_app_center',    1 => 'admin_v2_app_installed',    2 => 'admin_v2_app_upgrades',  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_app_package_update_backup_db;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_app_package_update_backup_db:

                                // admin_v2_app_package_update_download_and_extract
                                if (preg_match('#^/admin/v2/app/package_update/(?P<id>[^/]++)/download_extract$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_app_package_update_download_and_extract']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\AppPackageUpdateController::downloadAndExtractAction',  '_permission' =>   array (    0 => 'admin_v2_app_center',    1 => 'admin_v2_app_installed',    2 => 'admin_v2_app_upgrades',  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_app_package_update_download_and_extract;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_app_package_update_download_and_extract:

                                // admin_v2_app_package_update_check_download_and_extract
                                if (preg_match('#^/admin/v2/app/package_update/(?P<id>[^/]++)/check_download_extract$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_app_package_update_check_download_and_extract']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\AppPackageUpdateController::checkDownloadAndExtractAction',  '_permission' =>   array (    0 => 'admin_v2_app_center',    1 => 'admin_v2_app_installed',    2 => 'admin_v2_app_upgrades',  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_app_package_update_check_download_and_extract;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_app_package_update_check_download_and_extract:

                                // admin_v2_app_package_update_begin_upgrade
                                if (preg_match('#^/admin/v2/app/package_update/(?P<id>[^/]++)/begin_upgrade$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_app_package_update_begin_upgrade']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\AppPackageUpdateController::beginUpgradeAction',  '_permission' =>   array (    0 => 'admin_v2_app_center',    1 => 'admin_v2_app_installed',    2 => 'admin_v2_app_upgrades',  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_app_package_update_begin_upgrade;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_app_package_update_begin_upgrade:

                                // admin_v2_app_package_update_check_newest
                                if (0 === strpos($pathinfo, '/admin/v2/app/package_update/check/newest/code') && preg_match('#^/admin/v2/app/package_update/check/newest/code/(?P<code>[^/]++)$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_app_package_update_check_newest']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\AppPackageUpdateController::checkNewestAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_app_package_update_check_newest;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_app_package_update_check_newest:

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/v2/announcement')) {
                            // admin_v2_announcement_from_platform
                            if ('/admin/v2/announcement_from_platform' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\DefaultController::getAnnouncementFromPlatformAction',  '_route' => 'admin_v2_announcement_from_platform',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_v2_announcement
                            if ('/admin/v2/announcement' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\AnnouncementController::indexAction',  '_route' => 'admin_v2_announcement',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_v2_announcement_create
                            if ('/admin/v2/announcement/create' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\AnnouncementController::createAction',  '_route' => 'admin_v2_announcement_create',  '_permission' =>   array (    0 => 'admin_v2_announcement_create',  ),  '_h5' => false,);
                            }

                            // admin_v2_announcement_delete
                            if (0 === strpos($pathinfo, '/admin/v2/announcement/delete') && preg_match('#^/admin/v2/announcement/delete/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_announcement_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\AnnouncementController::deleteAction',  '_permission' =>   array (    0 => 'admin_v2_operation_announcement',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_announcement_delete;
                                }

                                return $ret;
                            }
                            not_admin_v2_announcement_delete:

                            // admin_v2_announcement_edit
                            if (0 === strpos($pathinfo, '/admin/v2/announcement/edit') && preg_match('#^/admin/v2/announcement/edit/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_announcement_edit']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\AnnouncementController::editAction',  '_permission' =>   array (    0 => 'admin_v2_operation_announcement',  ),  '_h5' => false,));
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/v2/article')) {
                            // admin_v2_article
                            if ('/admin/v2/article' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ArticleController::indexAction',  '_route' => 'admin_v2_article',  '_permission' =>   array (    0 => 'admin_v2_operation_article_manage',  ),  '_h5' => false,);
                            }

                            if (0 === strpos($pathinfo, '/admin/v2/article/c')) {
                                if (0 === strpos($pathinfo, '/admin/v2/article/category')) {
                                    // admin_v2_article_category
                                    if ('/admin/v2/article/category' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ArticleCategoryController::indexAction',  '_route' => 'admin_v2_article_category',  '_permission' =>   array (    0 => 'admin_v2_operation_article_category',  ),  '_h5' => false,);
                                    }

                                    if (0 === strpos($pathinfo, '/admin/v2/article/category/c')) {
                                        // admin_v2_article_category_create
                                        if ('/admin/v2/article/category/create' === $pathinfo) {
                                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ArticleCategoryController::createAction',  '_route' => 'admin_v2_article_category_create',  '_permission' =>   array (    0 => 'admin_v2_operation_article_category',  ),  '_h5' => false,);
                                        }

                                        // admin_v2_article_category_checkparentid
                                        if ('/admin/v2/article/category/checkparentid' === $pathinfo) {
                                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ArticleCategoryController::checkParentIdAction',  '_route' => 'admin_v2_article_category_checkparentid',  '_permission' =>   array (    0 => 'admin_v2_operation_article_category',  ),  '_h5' => false,);
                                        }

                                        // admin_v2_article_category_checkcode
                                        if ('/admin/v2/article/category/checkcode' === $pathinfo) {
                                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ArticleCategoryController::checkCodeAction',  '_route' => 'admin_v2_article_category_checkcode',  '_permission' =>   array (    0 => 'admin_v2_operation_article_category',  ),  '_h5' => false,);
                                        }

                                    }

                                    // admin_v2_article_category_edit
                                    if (preg_match('#^/admin/v2/article/category/(?P<id>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_article_category_edit']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ArticleCategoryController::editAction',  '_permission' =>   array (    0 => 'admin_v2_operation_article_category',  ),  '_h5' => false,));
                                    }

                                    // admin_v2_article_category_delete
                                    if (preg_match('#^/admin/v2/article/category/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_article_category_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ArticleCategoryController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                        if (!in_array($requestMethod, ['POST'])) {
                                            $allow = array_merge($allow, ['POST']);
                                            goto not_admin_v2_article_category_delete;
                                        }

                                        return $ret;
                                    }
                                    not_admin_v2_article_category_delete:

                                    // admin_v2_article_category_sort
                                    if ('/admin/v2/article/category/sort' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ArticleCategoryController::sortAction',  '_route' => 'admin_v2_article_category_sort',  '_permission' =>   array (  ),  '_h5' => false,);
                                        if (!in_array($requestMethod, ['POST'])) {
                                            $allow = array_merge($allow, ['POST']);
                                            goto not_admin_v2_article_category_sort;
                                        }

                                        return $ret;
                                    }
                                    not_admin_v2_article_category_sort:

                                }

                                // admin_v2_article_cancel_property
                                if (0 === strpos($pathinfo, '/admin/v2/article/cancel/property') && preg_match('#^/admin/v2/article/cancel/property/(?P<id>[^/]++)/(?P<property>[^/]++)$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_article_cancel_property']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ArticleController::cancelArticlePropertyAction',  '_permission' =>   array (    0 => 'admin_v2_operation_article_manage',  ),  '_h5' => false,));
                                }

                                // admin_v2_article_create
                                if ('/admin/v2/article/create' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ArticleController::createAction',  '_route' => 'admin_v2_article_create',  '_permission' =>   array (    0 => 'admin_v2_operation_article_create',  ),  '_h5' => false,);
                                }

                            }

                            // admin_v2_article_picture_crop
                            if ('/admin/v2/article/picture/crop' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ArticleController::pictureCropAction',  '_route' => 'admin_v2_article_picture_crop',  '_permission' =>   array (    0 => 'admin_v2_operation_article_manage',  ),  '_h5' => false,);
                            }

                            // admin_v2_article_show_upload
                            if ('/admin/v2/article/show/upload' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ArticleController::showUploadAction',  '_route' => 'admin_v2_article_show_upload',  '_permission' =>   array (    0 => 'admin_v2_operation_article_manage',  ),  '_h5' => false,);
                            }

                            // admin_v2_article_set_property
                            if (0 === strpos($pathinfo, '/admin/v2/article/set/property') && preg_match('#^/admin/v2/article/set/property/(?P<id>[^/]++)/(?P<property>[^/]++)$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_article_set_property']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ArticleController::setArticlePropertyAction',  '_permission' =>   array (    0 => 'admin_v2_operation_article_manage',  ),  '_h5' => false,));
                            }

                            // admin_v2_article_edit
                            if (preg_match('#^/admin/v2/article/(?P<id>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_article_edit']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ArticleController::editAction',  '_permission' =>   array (    0 => 'admin_v2_operation_article_manage',  ),  '_h5' => false,));
                            }

                            // admin_v2_article_publish
                            if (preg_match('#^/admin/v2/article/(?P<id>[^/]++)/publish$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_article_publish']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ArticleController::publishAction',  '_permission' =>   array (    0 => 'admin_v2_operation_article_manage',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_article_publish;
                                }

                                return $ret;
                            }
                            not_admin_v2_article_publish:

                            // admin_v2_article_unpublish
                            if (preg_match('#^/admin/v2/article/(?P<id>[^/]++)/unpublish$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_article_unpublish']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ArticleController::unpublishAction',  '_permission' =>   array (    0 => 'admin_v2_operation_article_manage',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_article_unpublish;
                                }

                                return $ret;
                            }
                            not_admin_v2_article_unpublish:

                            // admin_v2_article_thumb_remove
                            if (0 === strpos($pathinfo, '/admin/v2/article/thumb') && preg_match('#^/admin/v2/article/thumb/(?P<id>[^/]++)/remove$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_article_thumb_remove']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ArticleController::thumbRemoveAction',  '_permission' =>   array (    0 => 'admin_v2_operation_article_manage',  ),  '_h5' => false,));
                            }

                            // admin_v2_article_trash
                            if (preg_match('#^/admin/v2/article/(?P<id>[^/]++)/trash$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_article_trash']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ArticleController::trashAction',  '_permission' =>   array (    0 => 'admin_v2_operation_article_manage',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_article_trash;
                                }

                                return $ret;
                            }
                            not_admin_v2_article_trash:

                            // admin_v2_article_delete
                            if ('/admin/v2/article/delete' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ArticleController::deleteAction',  '_route' => 'admin_v2_article_delete',  '_permission' =>   array (    0 => 'admin_v2_operation_article_manage',  ),  '_h5' => false,);
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_article_delete;
                                }

                                return $ret;
                            }
                            not_admin_v2_article_delete:

                        }

                    }

                    elseif (0 === strpos($pathinfo, '/admin/v2/b')) {
                        // admin_v2_homepage_business_advice
                        if ('/admin/v2/business_advice' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\DefaultController::businessAdviceAction',  '_route' => 'admin_v2_homepage_business_advice',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        if (0 === strpos($pathinfo, '/admin/v2/block')) {
                            // admin_v2_block
                            if (preg_match('#^/admin/v2/block/(?P<category>[^/]++)/list$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_block']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\BlockController::indexAction',  'category' => 'theme',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_v2_block_match
                            if (0 === strpos($pathinfo, '/admin/v2/block/list') && preg_match('#^/admin/v2/block/list/(?P<type>[^/]++)/quikSearch$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_block_match']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\BlockController::blockMatchAction',  'type' => 'theme',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_v2_block_create
                            if ('/admin/v2/block/create' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\BlockController::createAction',  '_route' => 'admin_v2_block_create',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_v2_block_delete
                            if (preg_match('#^/admin/v2/block/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_block_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\BlockController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_block_delete;
                                }

                                return $ret;
                            }
                            not_admin_v2_block_delete:

                            if (0 === strpos($pathinfo, '/admin/v2/block/code')) {
                                // admin_v2_block_code_check_forcreate
                                if ('/admin/v2/block/code/check/forcreate' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\BlockController::checkBlockCodeForCreateAction',  '_route' => 'admin_v2_block_code_check_forcreate',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_v2_block_code_check_foredit
                                if (preg_match('#^/admin/v2/block/code/(?P<id>[^/]++)/check/foredit$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_block_code_check_foredit']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\BlockController::checkBlockTemplateCodeForEditAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                }

                            }

                            // admin_v2_block_update
                            if (preg_match('#^/admin/v2/block/(?P<blockTemplateId>[^/]++)/update$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_block_update']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\BlockController::editAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_v2_block_template_edit
                            if (preg_match('#^/admin/v2/block/(?P<blockTemplateId>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_block_template_edit']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\BlockController::editBlockTemplateAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_v2_block_visual_edit
                            if (0 === strpos($pathinfo, '/admin/v2/blockTemplate') && preg_match('#^/admin/v2/blockTemplate/(?P<blockTemplateId>[^/]++)/(?P<type>[^/]++)/visual/edit$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_block_visual_edit']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\BlockController::visualEditAction',  'type' => 'theme',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_v2_block_visual_view_data
                            if (preg_match('#^/admin/v2/block/(?P<blockTemplateId>[^/]++)/data/view$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_block_visual_view_data']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\BlockController::dataViewAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_v2_block_visual_edit_history
                            if (0 === strpos($pathinfo, '/admin/v2/blockTemplate') && preg_match('#^/admin/v2/blockTemplate/(?P<blockTemplateId>[^/]++)/(?P<type>[^/]++)/visual/edit/history$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_block_visual_edit_history']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\BlockController::visualHistoryAction',  'type' => 'theme',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_v2_block_recovery
                            if (preg_match('#^/admin/v2/block/(?P<blockTemplateId>[^/]++)/history/(?P<historyId>[^/]++)/(?P<type>[^/]++)/recovery$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_block_recovery']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\BlockController::recoveryAction',  'type' => 'theme',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_v2_block_history_data
                            if (0 === strpos($pathinfo, '/admin/v2/block/histroy') && preg_match('#^/admin/v2/block/histroy/(?P<blockId>[^/]++)$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_block_history_data']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\BlockController::blockHistoriesDataAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_v2_block_picture_upload
                            if (preg_match('#^/admin/v2/block/(?P<blockId>[^/]++)/picture/upload$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_block_picture_upload']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\BlockController::uploadAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_v2_block_picture_preview
                            if (preg_match('#^/admin/v2/block/(?P<blockId>[^/]++)/picture/preview$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_block_picture_preview']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\BlockController::picPreviewAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_v2_blockhistory_preview
                            if (0 === strpos($pathinfo, '/admin/v2/blockhistory') && preg_match('#^/admin/v2/blockhistory/(?P<id>[^/]++)/preview$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_blockhistory_preview']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\BlockController::previewAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/v2/batch_notification')) {
                            // admin_v2_batch_notification
                            if ('/admin/v2/batch_notification' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\BatchNotificationController::indexAction',  '_route' => 'admin_v2_batch_notification',  '_permission' =>   array (    0 => 'admin_v2_batch_notification',  ),  '_h5' => false,);
                            }

                            // admin_v2_batch_notification_create
                            if ('/admin/v2/batch_notification/create' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\BatchNotificationController::createAction',  '_route' => 'admin_v2_batch_notification_create',  '_permission' =>   array (    0 => 'admin_v2_batch_notification_create',  ),  '_h5' => false,);
                            }

                            // admin_v2_batch_notification_edit
                            if (0 === strpos($pathinfo, '/admin/v2/batch_notification/edit') && preg_match('#^/admin/v2/batch_notification/edit/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_batch_notification_edit']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\BatchNotificationController::editAction',  '_permission' =>   array (    0 => 'admin_v2_batch_notification',  ),  '_h5' => false,));
                            }

                            // admin_v2_batch_notification_delete
                            if (0 === strpos($pathinfo, '/admin/v2/batch_notification/delete') && preg_match('#^/admin/v2/batch_notification/delete/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_batch_notification_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\BatchNotificationController::deleteAction',  '_permission' =>   array (    0 => 'admin_v2_batch_notification',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_batch_notification_delete;
                                }

                                return $ret;
                            }
                            not_admin_v2_batch_notification_delete:

                            // admin_v2_batch_notification_send
                            if (0 === strpos($pathinfo, '/admin/v2/batch_notification/send') && preg_match('#^/admin/v2/batch_notification/send/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_batch_notification_send']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\BatchNotificationController::sendAction',  '_permission' =>   array (    0 => 'admin_v2_batch_notification',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_batch_notification_send;
                                }

                                return $ret;
                            }
                            not_admin_v2_batch_notification_send:

                        }

                        // admin_v2_batch_update_org
                        if (0 === strpos($pathinfo, '/admin/v2/batch/update') && preg_match('#^/admin/v2/batch/update/(?P<module>[^/]++)/org$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_batch_update_org']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\OrgManageController::batchUpdateAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // admin_v2_bill
                        if (0 === strpos($pathinfo, '/admin/v2/bill') && preg_match('#^/admin/v2/bill/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_bill']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Trade\\BillController::indexAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                    }

                    elseif (0 === strpos($pathinfo, '/admin/v2/c')) {
                        // admin_v2_homepage_changelog
                        if ('/admin/v2/changelog' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\DefaultController::changelogAction',  '_route' => 'admin_v2_homepage_changelog',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // admin_v2_check_password
                        if ('/admin/v2/check/password' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseController::checkPasswordAction',  '_route' => 'admin_v2_check_password',  '_permission' =>   array (    0 => 'admin_v2_course_manage',  ),  '_h5' => false,);
                        }

                        if (0 === strpos($pathinfo, '/admin/v2/co')) {
                            if (0 === strpos($pathinfo, '/admin/v2/course')) {
                                if (0 === strpos($pathinfo, '/admin/v2/course_set')) {
                                    // admin_v2_course_set
                                    if ('/admin/v2/course_set/index' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseSetController::indexAction',  '_route' => 'admin_v2_course_set',  '_permission' =>   array (    0 => 'admin_v2_course_manage',  ),  '_h5' => false,);
                                    }

                                    // admin_v2_course_list
                                    if (preg_match('#^/admin/v2/course_set/(?P<id>[^/]++)/course/list$#sD', $pathinfo, $matches)) {
                                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_course_list']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseSetController::courseListAction',  '_permission' =>   array (    0 => 'admin_v2_course_manage',  ),  '_h5' => false,));
                                    }

                                    // admin_v2_course_set_clone_by_web
                                    if (preg_match('#^/admin/v2/course_set/(?P<courseSetId>[^/]++)/clone_by_web$#sD', $pathinfo, $matches)) {
                                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_course_set_clone_by_web']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseSetController::cloneByWebAction',  '_permission' =>   array (    0 => 'admin_v2_course_manage',  ),  '_h5' => false,));
                                        if (!in_array($requestMethod, ['POST'])) {
                                            $allow = array_merge($allow, ['POST']);
                                            goto not_admin_v2_course_set_clone_by_web;
                                        }

                                        return $ret;
                                    }
                                    not_admin_v2_course_set_clone_by_web:

                                    // admin_v2_course_set_clone_by_crontab
                                    if (preg_match('#^/admin/v2/course_set/(?P<courseSetId>[^/]++)/clone_by_crontab$#sD', $pathinfo, $matches)) {
                                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_course_set_clone_by_crontab']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseSetController::cloneByCrontabAction',  '_permission' =>   array (    0 => 'admin_v2_course_manage',  ),  '_h5' => false,));
                                        if (!in_array($requestMethod, ['POST'])) {
                                            $allow = array_merge($allow, ['POST']);
                                            goto not_admin_v2_course_set_clone_by_crontab;
                                        }

                                        return $ret;
                                    }
                                    not_admin_v2_course_set_clone_by_crontab:

                                    // admin_v2_course_set_delete
                                    if (preg_match('#^/admin/v2/course_set/(?P<id>[^/]++)/delete(?:/(?P<type>[^/]++))?$#sD', $pathinfo, $matches)) {
                                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_course_set_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseSetController::deleteAction',  'type' => '',  '_permission' =>   array (    0 => 'admin_v2_course_manage',  ),  '_h5' => false,));
                                    }

                                    // admin_v2_course_set_clone
                                    if (preg_match('#^/admin/v2/course_set/(?P<courseSetId>[^/]++)/clone$#sD', $pathinfo, $matches)) {
                                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_course_set_clone']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseSetController::cloneAction',  'type' => 'web',  '_permission' =>   array (    0 => 'admin_v2_course_manage',  ),  '_h5' => false,));
                                    }

                                    // admin_v2_course_set_publish
                                    if (preg_match('#^/admin/v2/course_set/(?P<id>[^/]++)/publish$#sD', $pathinfo, $matches)) {
                                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_course_set_publish']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseSetController::publishAction',  '_permission' =>   array (    0 => 'admin_v2_course_manage',  ),  '_h5' => false,));
                                        if (!in_array($requestMethod, ['POST'])) {
                                            $allow = array_merge($allow, ['POST']);
                                            goto not_admin_v2_course_set_publish;
                                        }

                                        return $ret;
                                    }
                                    not_admin_v2_course_set_publish:

                                    // admin_v2_course_set_close
                                    if (preg_match('#^/admin/v2/course_set/(?P<id>[^/]++)/close$#sD', $pathinfo, $matches)) {
                                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_course_set_close']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseSetController::closeAction',  '_permission' =>   array (    0 => 'admin_v2_course_set_close',  ),  '_h5' => false,));
                                        if (!in_array($requestMethod, ['POST'])) {
                                            $allow = array_merge($allow, ['POST']);
                                            goto not_admin_v2_course_set_close;
                                        }

                                        return $ret;
                                    }
                                    not_admin_v2_course_set_close:

                                    // admin_v2_course_set_recommend
                                    if (preg_match('#^/admin/v2/course_set/(?P<id>[^/]++)/recommend$#sD', $pathinfo, $matches)) {
                                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_course_set_recommend']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseSetController::recommendAction',  '_permission' =>   array (    0 => 'admin_v2_course_set_recommend_list',    1 => 'admin_v2_course_set_recommend',  ),  '_h5' => false,));
                                    }

                                    // admin_v2_course_set_cancel_recommend
                                    if (preg_match('#^/admin/v2/course_set/(?P<id>[^/]++)/recommend/cancel/(?P<target>[^/]++)$#sD', $pathinfo, $matches)) {
                                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_course_set_cancel_recommend']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseSetController::cancelRecommendAction',  '_permission' =>   array (    0 => 'admin_v2_course_set_recommend_list',    1 => 'admin_v2_course_set_cancel_recommend',  ),  '_h5' => false,));
                                        if (!in_array($requestMethod, ['POST'])) {
                                            $allow = array_merge($allow, ['POST']);
                                            goto not_admin_v2_course_set_cancel_recommend;
                                        }

                                        return $ret;
                                    }
                                    not_admin_v2_course_set_cancel_recommend:

                                    // admin_v2_course_chooser
                                    if ('/admin/v2/course_set/chooser' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseSetController::chooserAction',  '_route' => 'admin_v2_course_chooser',  '_permission' =>   array (  ),  '_h5' => false,);
                                    }

                                    // admin_v2_course_set_recommend_list
                                    if ('/admin/v2/course_set/recommend/list' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseSetController::recommendListAction',  '_route' => 'admin_v2_course_set_recommend_list',  '_permission' =>   array (    0 => 'admin_v2_course_set_recommend_list',  ),  '_h5' => false,);
                                    }

                                    // admin_v2_course_set_data
                                    if (preg_match('#^/admin/v2/course_set/(?P<filter>[^/]++)/data$#sD', $pathinfo, $matches)) {
                                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_course_set_data']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseSetController::dataListAction',  'filter' => 'normal',  '_permission' =>   array (    0 => 'admin_v2_course_set_data',  ),  '_h5' => false,));
                                    }

                                    // admin_v2_course_tag_match
                                    if ('/admin/v2/course_set/tag/match' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseSetController::courseTagMatchAction',  '_route' => 'admin_v2_course_tag_match',  '_permission' =>   array (  ),  '_h5' => false,);
                                    }

                                    if (0 === strpos($pathinfo, '/admin/v2/course_set/detail/data')) {
                                        // admin_v2_course_set_detail_data
                                        if (preg_match('#^/admin/v2/course_set/detail/data/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_course_set_detail_data']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseSetController::detailDataAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                        }

                                        // admin_v2_course_set_detail_data_export_prepare
                                        if (preg_match('#^/admin/v2/course_set/detail/data/(?P<courseId>[^/]++)/export/prepare$#sD', $pathinfo, $matches)) {
                                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_course_set_detail_data_export_prepare']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseSetController::prepareForExportCourseDetailDataAction',  '_permission' =>   array (    0 => 'admin_v2_course_set_data',  ),  '_h5' => false,));
                                        }

                                        // admin_v2_course_set_detail_data_export
                                        if (preg_match('#^/admin/v2/course_set/detail/data/(?P<courseId>[^/]++)/export$#sD', $pathinfo, $matches)) {
                                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_course_set_detail_data_export']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseSetController::exportCourseDetailDataAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                        }

                                    }

                                }

                                // admin_v2_courses_data
                                if (0 === strpos($pathinfo, '/admin/v2/courses/data') && preg_match('#^/admin/v2/courses/data/(?P<courseSetId>[^/]++)$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_courses_data']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseController::coursesDataAction',  '_permission' =>   array (    0 => 'admin_v2_course_set_data',  ),  '_h5' => false,));
                                }

                                // admin_v2_course_task_data_export_prepare
                                if (preg_match('#^/admin/v2/course/(?P<courseId>[^/]++)/datas/export/prepare$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_course_task_data_export_prepare']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseController::prepareForExportTasksDatasAction',  '_permission' =>   array (    0 => 'admin_v2_course_set_data',  ),  '_h5' => false,));
                                }

                                // admin_v2_course_task_data_export
                                if (preg_match('#^/admin/v2/course/(?P<courseId>[^/]++)/datas/export$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_course_task_data_export']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseController::exportTaskDatasAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                }

                                // admin_v2_course_category
                                if ('/admin/v2/course/category' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CategoryController::courseCategoryAction',  '_route' => 'admin_v2_course_category',  '_permission' =>   array (    0 => 'admin_v2_course_category_manage',  ),  '_h5' => false,);
                                }

                                if (0 === strpos($pathinfo, '/admin/v2/course/review')) {
                                    // admin_v2_course_review
                                    if ('/admin/v2/course/review' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\ReviewController::courseReviewListAction',  '_route' => 'admin_v2_course_review',  '_permission' =>   array (    0 => 'admin_v2_course_review_tab',  ),  '_h5' => false,);
                                    }

                                    // admin_v2_course_review_delete
                                    if (preg_match('#^/admin/v2/course/review/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_course_review_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\ReviewController::deleteCourseReviewAction',  '_permission' =>   array (    0 => 'admin_v2_course_review_tab',  ),  '_h5' => false,));
                                        if (!in_array($requestMethod, ['POST'])) {
                                            $allow = array_merge($allow, ['POST']);
                                            goto not_admin_v2_course_review_delete;
                                        }

                                        return $ret;
                                    }
                                    not_admin_v2_course_review_delete:

                                    // admin_v2_course_review_batch_delete
                                    if ('/admin/v2/course/review/batch_delete' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\ReviewController::batchDeleteCourseReviewAction',  '_route' => 'admin_v2_course_review_batch_delete',  '_permission' =>   array (    0 => 'admin_v2_course_review_tab',  ),  '_h5' => false,);
                                        if (!in_array($requestMethod, ['POST'])) {
                                            $allow = array_merge($allow, ['POST']);
                                            goto not_admin_v2_course_review_batch_delete;
                                        }

                                        return $ret;
                                    }
                                    not_admin_v2_course_review_batch_delete:

                                }

                                // admin_v2_course_search_to_fill_banner
                                if ('/admin/v2/course/search_to_fill_banner' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseController::searchToFillBannerAction',  '_route' => 'admin_v2_course_search_to_fill_banner',  '_permission' =>   array (    0 => 'admin_v2_setting_mobile',  ),  '_h5' => false,);
                                }

                                // admin_v2_question_remind_teachers
                                if (preg_match('#^/admin/v2/course/(?P<courseId>[^/]++)/question/(?P<questionId>[^/]++)/remindTeachers$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_question_remind_teachers']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\DefaultController::questionRemindTeachersAction',  '_permission' =>   array (    0 => 'admin_v2',  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_question_remind_teachers;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_question_remind_teachers:

                            }

                            elseif (0 === strpos($pathinfo, '/admin/v2/coupon')) {
                                // admin_v2_coupon
                                if ('/admin/v2/coupon' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Marketing\\CouponController::indexAction',  '_route' => 'admin_v2_coupon',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_v2_coupon_generate
                                if ('/admin/v2/coupon/generate' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Marketing\\CouponController::generateAction',  '_route' => 'admin_v2_coupon_generate',  '_permission' =>   array (    0 => 'admin_v2_coupon_generate',  ),  '_h5' => false,);
                                }

                                // admin_v2_coupon_batch_create
                                if (0 === strpos($pathinfo, '/admin/v2/coupon/batch') && preg_match('#^/admin/v2/coupon/batch/(?P<batchId>[^/]++)/create$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_coupon_batch_create']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Marketing\\CouponController::batchCreateAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_coupon_batch_create;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_coupon_batch_create:

                                // admin_v2_coupon_checkprefix
                                if ('/admin/v2/coupon/checkprefix' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Marketing\\CouponController::checkPrefixAction',  '_route' => 'admin_v2_coupon_checkprefix',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_v2_coupon_delete
                                if (preg_match('#^/admin/v2/coupon/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_coupon_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Marketing\\CouponController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_coupon_delete;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_coupon_delete:

                                // admin_v2_coupon_batch_export
                                if (0 === strpos($pathinfo, '/admin/v2/coupon/export/csv') && preg_match('#^/admin/v2/coupon/export/csv/(?P<batchId>[^/]++)$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_coupon_batch_export']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Marketing\\CouponController::exportCsvAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                }

                                if (0 === strpos($pathinfo, '/admin/v2/coupon/show')) {
                                    // admin_v2_coupon_show
                                    if (preg_match('#^/admin/v2/coupon/show/(?P<batchId>[^/]++)$#sD', $pathinfo, $matches)) {
                                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_coupon_show']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Marketing\\CouponController::detailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                    }

                                    // admin_v2_coupon_show_target
                                    if (0 === strpos($pathinfo, '/admin/v2/coupon/show/target') && preg_match('#^/admin/v2/coupon/show/target/(?P<targetType>[^/]++)/(?P<batchId>[^/]++)$#sD', $pathinfo, $matches)) {
                                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_coupon_show_target']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Marketing\\CouponController::targetDetailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                    }

                                }

                                // admin_v2_coupon_get_receive_url
                                if (0 === strpos($pathinfo, '/admin/v2/coupon/getreceiveurl') && preg_match('#^/admin/v2/coupon/getreceiveurl/(?P<batchId>[^/]++)$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_coupon_get_receive_url']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Marketing\\CouponController::getReceiveUrlAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                }

                                // admin_v2_coupon_query
                                if ('/admin/v2/coupon/index' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Marketing\\CouponController::queryIndexAction',  '_route' => 'admin_v2_coupon_query',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                if (0 === strpos($pathinfo, '/admin/v2/coupon/batch')) {
                                    // admin_v2_coupon_chooser
                                    if (0 === strpos($pathinfo, '/admin/v2/coupon/batch/chooser') && preg_match('#^/admin/v2/coupon/batch/chooser/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_coupon_chooser']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\OperationSettingController::chooseCouponAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                    }

                                    // admin_v2_coupon_chooser_resource_list
                                    if (preg_match('#^/admin/v2/coupon/batch/(?P<batchId>[^/]++)/chooser/resource/list$#sD', $pathinfo, $matches)) {
                                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_coupon_chooser_resource_list']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\OperationSettingController::chooseResourceListAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                    }

                                }

                            }

                            elseif (0 === strpos($pathinfo, '/admin/v2/content')) {
                                // admin_v2_content_create
                                if (0 === strpos($pathinfo, '/admin/v2/content/create') && preg_match('#^/admin/v2/content/create/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_content_create']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ContentController::createAction',  '_permission' =>   array (    0 => 'admin_v2_content',  ),  '_h5' => false,));
                                }

                                // admin_v2_content_edit
                                if (preg_match('#^/admin/v2/content/(?P<id>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_content_edit']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ContentController::editAction',  '_permission' =>   array (    0 => 'admin_v2_content',  ),  '_h5' => false,));
                                }

                                // admin_v2_content_publish
                                if (preg_match('#^/admin/v2/content/(?P<id>[^/]++)/publish$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_content_publish']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ContentController::publishAction',  '_permission' =>   array (    0 => 'admin_v2_content',  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_content_publish;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_content_publish:

                                // admin_v2_content_trash
                                if (preg_match('#^/admin/v2/content/(?P<id>[^/]++)/trash$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_content_trash']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ContentController::trashAction',  '_permission' =>   array (    0 => 'admin_v2_content',  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_content_trash;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_content_trash:

                                // admin_v2_content_delete
                                if (preg_match('#^/admin/v2/content/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_content_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ContentController::deleteAction',  '_permission' =>   array (    0 => 'admin_v2_content',  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_content_delete;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_content_delete:

                                // admin_v2_content_alias_check
                                if ('/admin/v2/content/alias/check' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ContentController::aliasCheckAction',  '_route' => 'admin_v2_content_alias_check',  '_permission' =>   array (    0 => 'admin_v2_content',  ),  '_h5' => false,);
                                }

                            }

                            elseif (0 === strpos($pathinfo, '/admin/v2/coin')) {
                                // admin_v2_coin_user_records
                                if ('/admin/v2/coin/records/user' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Trade\\CoinController::indexAction',  '_route' => 'admin_v2_coin_user_records',  '_permission' =>   array (    0 => 'admin_v2_coin_user_records',  ),  '_h5' => false,);
                                }

                                // admin_v2_coin_flow_detail
                                if ('/admin/v2/coin/flow/detail' === $trimmedPathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Trade\\CoinController::flowDetailAction',  '_route' => 'admin_v2_coin_flow_detail',  '_permission' =>   array (    0 => 'admin_v2_coin_user_records',  ),  '_h5' => false,);
                                    if ('/' === substr($pathinfo, -1)) {
                                        // no-op
                                    } elseif ('GET' !== $canonicalMethod) {
                                        goto not_admin_v2_coin_flow_detail;
                                    } else {
                                        return array_replace($ret, $this->redirect($rawPathinfo.'/', 'admin_v2_coin_flow_detail'));
                                    }

                                    return $ret;
                                }
                                not_admin_v2_coin_flow_detail:

                                // admin_v2_coin_model_save
                                if ('/admin/v2/coin/model/save' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\AssetSettingController::coinModelSaveAction',  '_route' => 'admin_v2_coin_model_save',  '_permission' =>   array (    0 => 'admin_v2_coin_user_records',  ),  '_h5' => false,);
                                }

                                if (0 === strpos($pathinfo, '/admin/v2/coin/picture')) {
                                    // admin_v2_coin_picture
                                    if ('/admin/v2/coin/picture' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\AssetSettingController::coinPictureAction',  '_route' => 'admin_v2_coin_picture',  '_permission' =>   array (    0 => 'admin_v2_coin_settings',  ),  '_h5' => false,);
                                        if (!in_array($requestMethod, ['POST'])) {
                                            $allow = array_merge($allow, ['POST']);
                                            goto not_admin_v2_coin_picture;
                                        }

                                        return $ret;
                                    }
                                    not_admin_v2_coin_picture:

                                    // admin_v2_coin_picture_remove
                                    if ('/admin/v2/coin/picture/remove' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\AssetSettingController::coinPictureRemoveAction',  '_route' => 'admin_v2_coin_picture_remove',  '_permission' =>   array (    0 => 'admin_v2_coin_settings',  ),  '_h5' => false,);
                                        if (!in_array($requestMethod, ['POST'])) {
                                            $allow = array_merge($allow, ['POST']);
                                            goto not_admin_v2_coin_picture_remove;
                                        }

                                        return $ret;
                                    }
                                    not_admin_v2_coin_picture_remove:

                                }

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/v2/classroom')) {
                            // admin_v2_classroom
                            if ('/admin/v2/classroom/index' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\ClassroomController::indexAction',  '_route' => 'admin_v2_classroom',  '_permission' =>   array (    0 => 'admin_v2_classroom',  ),  '_h5' => false,);
                            }

                            // admin_v2_classroom_create
                            if ('/admin/v2/classroom/create' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\ClassroomController::createAction',  '_route' => 'admin_v2_classroom_create',  '_permission' =>   array (    0 => 'admin_v2_classroom_create',  ),  '_h5' => false,);
                            }

                            // admin_v2_classroom_set_recommend
                            if (preg_match('#^/admin/v2/classroom/(?P<id>[^/]++)/recommend$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_classroom_set_recommend']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\ClassroomController::recommendAction',  '_permission' =>   array (    0 => 'admin_v2_classroom_set_recommend',  ),  '_h5' => false,));
                            }

                            // admin_v2_classroom_cancel_recommend
                            if (preg_match('#^/admin/v2/classroom/(?P<id>[^/]++)/recommend/cancel$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_classroom_cancel_recommend']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\ClassroomController::cancelRecommendAction',  '_permission' =>   array (    0 => 'admin_v2_classroom_cancel_recommend',  ),  '_h5' => false,));
                            }

                            // admin_v2_classroom_close
                            if (preg_match('#^/admin/v2/classroom/(?P<id>[^/]++)/close$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_classroom_close']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\ClassroomController::closeAction',  '_permission' =>   array (    0 => 'admin_v2_classroom_close',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_classroom_close;
                                }

                                return $ret;
                            }
                            not_admin_v2_classroom_close:

                            // admin_v2_classroom_open
                            if (preg_match('#^/admin/v2/classroom/(?P<id>[^/]++)/open$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_classroom_open']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\ClassroomController::openAction',  '_permission' =>   array (    0 => 'admin_v2_classroom_open',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_classroom_open;
                                }

                                return $ret;
                            }
                            not_admin_v2_classroom_open:

                            // admin_v2_classroom_delete
                            if (preg_match('#^/admin/v2/classroom/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_classroom_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\ClassroomController::deleteAction',  '_permission' =>   array (    0 => 'admin_v2_classroom_delete',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_classroom_delete;
                                }

                                return $ret;
                            }
                            not_admin_v2_classroom_delete:

                            // admin_v2_classroom_recommend_list
                            if ('/admin/v2/classroom/recommend/list' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\ClassroomController::recommendIndexAction',  '_route' => 'admin_v2_classroom_recommend_list',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            if (0 === strpos($pathinfo, '/admin/v2/classroom/review')) {
                                // admin_v2_classroom_review
                                if ('/admin/v2/classroom/review' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\ReviewController::classroomReviewListAction',  '_route' => 'admin_v2_classroom_review',  '_permission' =>   array (    0 => 'admin_v2_classroom_review_tab',  ),  '_h5' => false,);
                                }

                                // admin_v2_classroom_review_delete
                                if (preg_match('#^/admin/v2/classroom/review/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_classroom_review_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\ReviewController::deleteClassroomReviewAction',  '_permission' =>   array (    0 => 'admin_v2_classroom_review_tab',  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_classroom_review_delete;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_classroom_review_delete:

                                // admin_v2_classroom_review_batch_delete
                                if ('/admin/v2/classroom/review/batch_delete' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\ReviewController::batchDeleteClassroomReviewAction',  '_route' => 'admin_v2_classroom_review_batch_delete',  '_permission' =>   array (    0 => 'admin_v2_classroom_review_tab',  ),  '_h5' => false,);
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_classroom_review_batch_delete;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_classroom_review_batch_delete:

                            }

                            // admin_v2_classroom_chooser
                            if ('/admin/v2/classroom/chooser' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\ClassroomController::chooserAction',  '_route' => 'admin_v2_classroom_chooser',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_v2_classroom_category
                            if ('/admin/v2/classroom/category' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CategoryController::classroomCategoryAction',  '_route' => 'admin_v2_classroom_category',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            if (0 === strpos($pathinfo, '/admin/v2/classroom/thread')) {
                                // admin_v2_classroom_thread
                                if ('/admin/v2/classroom/thread' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\ThreadController::classroomThreadIndexAction',  '_route' => 'admin_v2_classroom_thread',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_v2_classroom_thread_delete
                                if (preg_match('#^/admin/v2/classroom/thread/(?P<threadId>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_classroom_thread_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\ThreadController::classroomThreadDeleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_classroom_thread_delete;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_classroom_thread_delete:

                                // admin_v2_classroom_thread_batch_delete
                                if ('/admin/v2/classroom/thread/batch_delete' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\ThreadController::classroomThreadBatchDeleteAction',  '_route' => 'admin_v2_classroom_thread_batch_delete',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/v2/cloud')) {
                            // admin_v2_cloud_attachment
                            if ('/admin/v2/cloud_attachment' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CloudFileController::attachmentListAction',  '_route' => 'admin_v2_cloud_attachment',  '_permission' =>   array (    0 => 'admin_v2_cloud_attachment',  ),  '_h5' => false,);
                            }

                            if (0 === strpos($pathinfo, '/admin/v2/cloud_file')) {
                                if (0 === strpos($pathinfo, '/admin/v2/cloud_files')) {
                                    // admin_v2_cloud_file
                                    if ('/admin/v2/cloud_files' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CloudFileController::indexAction',  '_route' => 'admin_v2_cloud_file',  '_permission' =>   array (    0 => 'admin_v2_cloud_file',  ),  '_h5' => false,);
                                    }

                                    // admin_v2_cloud_file_manage
                                    if ('/admin/v2/cloud_files/manage' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CloudFileController::manageAction',  '_route' => 'admin_v2_cloud_file_manage',  '_permission' =>   array (    0 => 'admin_v2_cloud_resource',  ),  '_h5' => false,);
                                    }

                                    // admin_v2_cloud_file_render_table
                                    if ('/admin/v2/cloud_files/table/render' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CloudFileController::renderAction',  '_route' => 'admin_v2_cloud_file_render_table',  '_permission' =>   array (    0 => 'admin_v2_cloud_resource',  ),  '_h5' => false,);
                                    }

                                }

                                // admin_v2_cloud_file_detail
                                if (preg_match('#^/admin/v2/cloud_file/(?P<globalId>[^/]++)/detail$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_cloud_file_detail']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CloudFileController::detailAction',  '_permission' =>   array (    0 => 'admin_v2_cloud_resource',  ),  '_h5' => false,));
                                }

                                // admin_v2_cloud_file_edit
                                if (preg_match('#^/admin/v2/cloud_file/(?P<globalId>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_cloud_file_edit']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CloudFileController::editAction',  'fields' => '',  '_permission' =>   array (    0 => 'admin_v2_cloud_resource',  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_cloud_file_edit;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_cloud_file_edit:

                                // admin_v2_cloud_file_preview
                                if (preg_match('#^/admin/v2/cloud_file/(?P<globalId>[^/]++)/preview$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_cloud_file_preview']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CloudFileController::previewAction',  '_permission' =>   array (    0 => 'admin_v2_cloud_resource',  ),  '_h5' => false,));
                                }

                                // admin_v2_cloud_file_reconvert
                                if (preg_match('#^/admin/v2/cloud_file/(?P<globalId>[^/]++)/reconvert$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_cloud_file_reconvert']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CloudFileController::reconvertAction',  '_permission' =>   array (    0 => 'admin_v2_cloud_resource',  ),  '_h5' => false,));
                                }

                                // admin_v2_cloud_file_download
                                if (preg_match('#^/admin/v2/cloud_file/(?P<globalId>[^/]++)/download$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_cloud_file_download']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CloudFileController::downloadAction',  '_permission' =>   array (    0 => 'admin_v2_cloud_resource',  ),  '_h5' => false,));
                                }

                                // admin_v2_cloud_file_delete
                                if (preg_match('#^/admin/v2/cloud_file/(?P<globalId>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_cloud_file_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CloudFileController::deleteAction',  '_permission' =>   array (    0 => 'admin_v2_cloud_resource',  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_cloud_file_delete;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_cloud_file_delete:

                                // admin_v2_cloud_file_batch_delete
                                if ('/admin/v2/cloud_file/delete/batch' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CloudFileController::batchDeleteAction',  '_route' => 'admin_v2_cloud_file_batch_delete',  '_permission' =>   array (    0 => 'admin_v2_cloud_resource',  ),  '_h5' => false,);
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_cloud_file_batch_delete;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_cloud_file_batch_delete:

                                // admin_v2_cloud_file_delete_modal_show
                                if ('/admin/v2/cloud_file/delete/show' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CloudFileController::deleteShowAction',  '_route' => 'admin_v2_cloud_file_delete_modal_show',  '_permission' =>   array (    0 => 'admin_v2_cloud_resource',  ),  '_h5' => false,);
                                }

                                // admin_v2_cloud_file_tag_show
                                if ('/admin/v2/cloud_file/tag/show' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CloudFileController::batchTagShowAction',  '_route' => 'admin_v2_cloud_file_tag_show',  '_permission' =>   array (    0 => 'admin_v2_cloud_resource',  ),  '_h5' => false,);
                                }

                            }

                            elseif (0 === strpos($pathinfo, '/admin/v2/cloud/access')) {
                                // admin_v2_wechat_app_access
                                if ('/admin/v2/cloud/accessWechat' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::accessWechatAction',  '_route' => 'admin_v2_wechat_app_access',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_v2_cloud_access
                                if ('/admin/v2/cloud/access' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::accessAction',  '_route' => 'admin_v2_cloud_access',  '_permission' =>   array (    0 => 'admin_v2_my_cloud_overview',  ),  '_h5' => false,);
                                }

                            }

                            // admin_v2_cloud_account_person
                            if ('/admin/v2/cloud/account/person' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::accountPersonAction',  '_route' => 'admin_v2_cloud_account_person',  '_permission' =>   array (    0 => 'admin_v2_my_cloud_overview',  ),  '_h5' => false,);
                            }

                            // admin_v2_cloud_recharge
                            if ('/admin/v2/cloud/recharge' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::rechargeAction',  '_route' => 'admin_v2_cloud_recharge',  '_permission' =>   array (    0 => 'admin_v2_my_cloud_overview',  ),  '_h5' => false,);
                            }

                            // admin_v2_cloud_list_coupon
                            if ('/admin/v2/cloud/list/coupon' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::listCouponAction',  '_route' => 'admin_v2_cloud_list_coupon',  '_permission' =>   array (    0 => 'admin_v2_my_cloud_overview',  ),  '_h5' => false,);
                            }

                            // admin_v2_cloud_service_overview
                            if (0 === strpos($pathinfo, '/admin/v2/cloud/service') && preg_match('#^/admin/v2/cloud/service/(?P<type>[^/]++)/overview$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_cloud_service_overview']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::serviceOverviewAction',  '_permission' =>   array (    0 => 'admin_v2_my_cloud_overview',  ),  '_h5' => false,));
                            }

                            // admin_v2_cloud_buy
                            if (preg_match('#^/admin/v2/cloud/(?P<type>[^/]++)/buy$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_cloud_buy']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::buyAction',  '_permission' =>   array (    0 => 'admin_v2_my_cloud_overview',  ),  '_h5' => false,));
                            }

                            if (0 === strpos($pathinfo, '/admin/v2/cloud/sms')) {
                                // admin_v2_cloud_sms_account
                                if ('/admin/v2/cloud/sms/account' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::smsAccountAction',  '_route' => 'admin_v2_cloud_sms_account',  '_permission' =>   array (    0 => 'admin_v2_my_cloud_overview',  ),  '_h5' => false,);
                                }

                                // admin_v2_cloud_sms_detail
                                if ('/admin/v2/cloud/sms/detail' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::smsDetailAction',  '_route' => 'admin_v2_cloud_sms_detail',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_v2_cloud_sms_statistics
                                if ('/admin/v2/cloud/sms/statistics' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::smsStatisticsAction',  '_route' => 'admin_v2_cloud_sms_statistics',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_v2_cloud_sms_setting
                                if ('/admin/v2/cloud/sms/setting' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::smsSettingAction',  '_route' => 'admin_v2_cloud_sms_setting',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                            }

                            // admin_v2_cloud_video
                            if ('/admin/v2/cloud/video' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::videoAction',  '_route' => 'admin_v2_cloud_video',  '_permission' =>   array (    0 => 'admin_v2_my_cloud_overview',  ),  '_h5' => false,);
                            }

                            // admin_v2_cloud_live
                            if ('/admin/v2/cloud/live' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::liveAction',  '_route' => 'admin_v2_cloud_live',  '_permission' =>   array (    0 => 'admin_v2_my_cloud_overview',  ),  '_h5' => false,);
                            }

                            // admin_v2_cloud_show
                            if (preg_match('#^/admin/v2/cloud/(?P<type>[^/]++)/show$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_cloud_show']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::cloudShowAction',  'type' => 'video',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_v2_cloud_tlp
                            if ('/admin/v2/cloud/tlp' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::tlpAction',  '_route' => 'admin_v2_cloud_tlp',  '_permission' =>   array (    0 => 'admin_v2_my_cloud_overview',  ),  '_h5' => false,);
                            }

                            if (0 === strpos($pathinfo, '/admin/v2/cloud/video')) {
                                // admin_v2_cloud_video_upgrade
                                if ('/admin/v2/cloud/video/upgrade' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::videoUpgradeAction',  '_route' => 'admin_v2_cloud_video_upgrade',  '_permission' =>   array (    0 => 'admin_v2_my_cloud_overview',  ),  '_h5' => false,);
                                }

                                // admin_v2_cloud_video_renew
                                if ('/admin/v2/cloud/video/renew' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::videoRenewAction',  '_route' => 'admin_v2_cloud_video_renew',  '_permission' =>   array (    0 => 'admin_v2_my_cloud_overview',  ),  '_h5' => false,);
                                }

                                // admin_v2_cloud_video_detail
                                if ('/admin/v2/cloud/video/detail' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::videoDetailAction',  '_route' => 'admin_v2_cloud_video_detail',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_v2_cloud_video_account
                                if ('/admin/v2/cloud/video/account' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::videoAccountAction',  '_route' => 'admin_v2_cloud_video_account',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                            }

                            elseif (0 === strpos($pathinfo, '/admin/v2/cloud/live')) {
                                // admin_v2_cloud_live_upgrade
                                if ('/admin/v2/cloud/live/upgrade' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::liveUpgradeAction',  '_route' => 'admin_v2_cloud_live_upgrade',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_v2_cloud_live_renew
                                if ('/admin/v2/cloud/live/renew' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::liveRenewAction',  '_route' => 'admin_v2_cloud_live_renew',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_v2_cloud_live_more
                                if ('/admin/v2/cloud/live/more' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::liveMoreAction',  '_route' => 'admin_v2_cloud_live_more',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                            }

                            // admin_v2_cloud_sms_sign
                            if ('/admin/v2/cloud/sms/sign' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::smsSignAction',  '_route' => 'admin_v2_cloud_sms_sign',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_v2_cloud_email_buy
                            if (preg_match('#^/admin/v2/cloud/(?P<type>[^/]++)/buy/custom$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_cloud_email_buy']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::emailBuyAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            if (0 === strpos($pathinfo, '/admin/v2/cloud/email/list')) {
                                // admin_v2_cloud_email_list
                                if ('/admin/v2/cloud/email/list' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::emailListAction',  '_route' => 'admin_v2_cloud_email_list',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_v2_cloud_email_count
                                if ('/admin/v2/cloud/email/list' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::emailCountAction',  '_route' => 'admin_v2_cloud_email_count',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                            }

                            elseif (0 === strpos($pathinfo, '/admin/v2/cloud/search')) {
                                // admin_v2_cloud_search
                                if ('/admin/v2/cloud/search' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::searchAction',  '_route' => 'admin_v2_cloud_search',  '_permission' =>   array (    0 => 'admin_v2_my_cloud_overview',  ),  '_h5' => false,);
                                }

                                // admin_v2_cloud_search_detail
                                if ('/admin/v2/cloud/search/detail' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::searchDetailAction',  '_route' => 'admin_v2_cloud_search_detail',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                            }

                            // admin_v2_cloud_detail
                            if ('/admin/v2/cloud/detail' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::detailAction',  '_route' => 'admin_v2_cloud_detail',  '_permission' =>   array (    0 => 'admin_v2_my_cloud_overview',  ),  '_h5' => false,);
                            }

                            // admin_cloud_doc
                            if ('/admin/v2/cloud/doc' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudController::docAction',  '_route' => 'admin_cloud_doc',  '_permission' =>   array (    0 => 'admin_v2_my_cloud_overview',  ),  '_h5' => false,);
                            }

                            // admin_v2_cloud_ad
                            if ('/admin/v2/cloud/ad' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::getAdAction',  '_route' => 'admin_v2_cloud_ad',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_v2_cloud_video_overview_renew
                            if ('/admin/v2/cloud/video/renew/modal' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::showRenewVideoAction',  '_route' => 'admin_v2_cloud_video_overview_renew',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/v2/category')) {
                            // admin_v2_category_create
                            if ('/admin/v2/category/create' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CategoryController::createAction',  '_route' => 'admin_v2_category_create',  '_permission' =>   array (    0 => 'admin_v2_category_create',  ),  '_h5' => false,);
                            }

                            // admin_v2_category_edit
                            if (preg_match('#^/admin/v2/category/(?P<id>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_category_edit']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CategoryController::editAction',  '_permission' =>   array (    0 => 'admin_v2_course_category_manage',  ),  '_h5' => false,));
                            }

                            // admin_v2_category_delete
                            if (preg_match('#^/admin/v2/category/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_category_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CategoryController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_category_delete;
                                }

                                return $ret;
                            }
                            not_admin_v2_category_delete:

                            // admin_v2_category_sort
                            if ('/admin/v2/category/sort' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CategoryController::sortAction',  '_route' => 'admin_v2_category_sort',  '_permission' =>   array (  ),  '_h5' => false,);
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_category_sort;
                                }

                                return $ret;
                            }
                            not_admin_v2_category_sort:

                            // admin_v2_category_checkcode
                            if ('/admin/v2/category/checkcode' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CategoryController::checkCodeAction',  '_route' => 'admin_v2_category_checkcode',  '_permission' =>   array (    0 => 'admin_v2_course_category_manage',  ),  '_h5' => false,);
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/v2/crontab')) {
                            // admin_v2_crontab
                            if ('/admin/v2/crontab' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\JobController::crontabAction',  '_route' => 'admin_v2_crontab',  '_permission' =>   array (    0 => 'admin_v2_crontab',  ),  '_h5' => false,);
                            }

                            // admin_v2_crontab_resotre
                            if ('/admin/v2/crontab/restore' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\JobController::crontabRestoreAction',  '_route' => 'admin_v2_crontab_resotre',  '_permission' =>   array (  ),  '_h5' => false,);
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_crontab_resotre;
                                }

                                return $ret;
                            }
                            not_admin_v2_crontab_resotre:

                        }

                    }

                    // admin_v2_live_course
                    if (0 === strpos($pathinfo, '/admin/v2/livecourse') && preg_match('#^/admin/v2/livecourse(?:/(?P<status>[^/]++))?$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_live_course']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\LiveCourseController::indexAction',  'status' => 'coming',  '_permission' =>   array (    0 => 'admin_v2_live_course',  ),  '_h5' => false,));
                    }

                    if (0 === strpos($pathinfo, '/admin/v2/login')) {
                        if (0 === strpos($pathinfo, '/admin/v2/login/marketing')) {
                            // admin_v2_login_micromarketing_boot
                            if ('/admin/v2/login/marketing/boot' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Marketing\\MicromarketingController::bootAction',  '_route' => 'admin_v2_login_micromarketing_boot',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_v2_login_micromarketing
                            if ('/admin/v2/login/marketing' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Marketing\\MicromarketingController::loginAction',  '_route' => 'admin_v2_login_micromarketing',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/v2/login/distributor')) {
                            // admin_v2_login_distributor_boot
                            if ('/admin/v2/login/distributor/boot' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Marketing\\DistributorController::bootAction',  '_route' => 'admin_v2_login_distributor_boot',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_v2_login_distributor
                            if ('/admin/v2/login/distributor' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Marketing\\DistributorController::loginAction',  '_route' => 'admin_v2_login_distributor',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/v2/login_record')) {
                            // admin_v2_login_record
                            if ('/admin/v2/login_record' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\LoginRecordController::indexAction',  '_route' => 'admin_v2_login_record',  '_permission' =>   array (    0 => 'admin_v2_login_record',  ),  '_h5' => false,);
                            }

                            // admin_v2_login_record_details
                            if (preg_match('#^/admin/v2/login_record/(?P<id>[^/]++)/details$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_login_record_details']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\LoginRecordController::showUserLoginRecordAction',  '_permission' =>   array (    0 => 'admin_v2_login_record',  ),  '_h5' => false,));
                            }

                        }

                    }

                    elseif (0 === strpos($pathinfo, '/admin/v2/o')) {
                        if (0 === strpos($pathinfo, '/admin/v2/op')) {
                            if (0 === strpos($pathinfo, '/admin/v2/open_course')) {
                                // admin_v2_open_course
                                if (preg_match('#^/admin/v2/open_course(?:/(?P<filter>[^/]++))?$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_open_course']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\OpenCourseController::indexAction',  'filter' => 'open',  '_permission' =>   array (    0 => 'admin_v2_open_course',  ),  '_h5' => false,));
                                }

                                // admin_v2_open_course_recommend_list
                                if ('/admin/v2/open_course/recommend/list' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\OpenCourseController::recommendListAction',  '_route' => 'admin_v2_open_course_recommend_list',  '_permission' =>   array (    0 => 'admin_v2_open_course_recommend_list',  ),  '_h5' => false,);
                                }

                                // admin_v2_open_course_delete
                                if (preg_match('#^/admin/v2/open_course/(?P<courseId>[^/]++)/delete(?:/(?P<type>[^/]++))?$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_open_course_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\OpenCourseController::deleteAction',  'type' => '',  '_permission' =>   array (  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_open_course_delete;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_open_course_delete:

                                // admin_v2_open_course_publish
                                if (preg_match('#^/admin/v2/open_course/(?P<id>[^/]++)/publish$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_open_course_publish']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\OpenCourseController::publishAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_open_course_publish;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_open_course_publish:

                                // admin_v2_open_course_close
                                if (preg_match('#^/admin/v2/open_course/(?P<id>[^/]++)/close$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_open_course_close']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\OpenCourseController::closeAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_open_course_close;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_open_course_close:

                                // admin_v2_open_course_recommend
                                if (preg_match('#^/admin/v2/open_course/(?P<id>[^/]++)/recommend$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_open_course_recommend']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\OpenCourseController::recommendAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                }

                                // admin_v2_open_course_cancel_recommend
                                if (preg_match('#^/admin/v2/open_course/(?P<id>[^/]++)/recommend/cancel/(?P<target>[^/]++)$#sD', $pathinfo, $matches)) {
                                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_open_course_cancel_recommend']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\OpenCourseController::cancelRecommendAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_open_course_cancel_recommend;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_open_course_cancel_recommend:

                                if (0 === strpos($pathinfo, '/admin/v2/open_course/analysis')) {
                                    // admin_v2_open_course_analysis
                                    if ('/admin/v2/open_course/analysis/index' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\OpenCourseAnalysisController::indexAction',  '_route' => 'admin_v2_open_course_analysis',  '_permission' =>   array (    0 => 'admin_v2_open_course_analysis',  ),  '_h5' => false,);
                                    }

                                    // admin_v2_open_course_analysis_referer_summary_list
                                    if ('/admin/v2/open_course/analysis/referer/list' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\OpenCourseAnalysisController::summaryListAction',  '_route' => 'admin_v2_open_course_analysis_referer_summary_list',  '_permission' =>   array (  ),  '_h5' => false,);
                                    }

                                    // admin_v2_open_course_analysis_referer_summary
                                    if ('/admin/v2/open_course/analysis/referer/summary' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\OpenCourseAnalysisController::summaryAction',  '_route' => 'admin_v2_open_course_analysis_referer_summary',  '_permission' =>   array (  ),  '_h5' => false,);
                                    }

                                    // admin_v2_open_course_analysis_referer_watch_statistics
                                    if ('/admin/v2/open_course/analysis/watch' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\OpenCourseAnalysisController::watchAction',  '_route' => 'admin_v2_open_course_analysis_referer_watch_statistics',  '_permission' =>   array (  ),  '_h5' => false,);
                                    }

                                }

                                // admin_v2_open_course_analysis_referer_detail
                                if (preg_match('#^/admin/v2/open_course/(?P<id>[^/]++)/analysis/referer/detail$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_open_course_analysis_referer_detail']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\OpenCourseAnalysisController::detailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                }

                                // admin_v2_open_course_analysis_referer_detail_list
                                if (preg_match('#^/admin/v2/open_course/(?P<id>[^/]++)/analysis/referer/detailList$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_open_course_analysis_referer_detail_list']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\OpenCourseAnalysisController::detailListAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                }

                                // admin_v2_open_course_analysis_conversion
                                if ('/admin/v2/open_course/analysis/conversion' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\OpenCourseAnalysisController::conversionAction',  '_route' => 'admin_v2_open_course_analysis_conversion',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_v2_open_course_analysis_conversion_result
                                if (preg_match('#^/admin/v2/open_course/(?P<courseId>[^/]++)/analysis/conversion/result$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_open_course_analysis_conversion_result']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\OpenCourseAnalysisController::conversionResultAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                }

                            }

                            elseif (0 === strpos($pathinfo, '/admin/v2/operation/mobile')) {
                                // admin_v2_operation_mobile_upgrade
                                if ('/admin/v2/operation/mobile_upgrade' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\MobileSettingController::mobileUpgradeAction',  '_route' => 'admin_v2_operation_mobile_upgrade',  '_permission' =>   array (    0 => 'admin_operation_mobile_banner_manage',  ),  '_h5' => false,);
                                }

                                // admin_v2_operation_mobile_select
                                if ('/admin/v2/operation/mobile/select' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\MobileSettingController::mobileSelectAction',  '_route' => 'admin_v2_operation_mobile_select',  '_permission' =>   array (    0 => 'admin_operation_mobile_select_manage',  ),  '_h5' => false,);
                                }

                                // admin_v2_operation_mobile_customization_upgrade
                                if ('/admin/v2/operation/mobile/customization_upgrade' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\MobileSettingController::customizationUpgradeAction',  '_route' => 'admin_v2_operation_mobile_customization_upgrade',  '_permission' =>   array (  ),  '_h5' => false,);
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_operation_mobile_customization_upgrade;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_operation_mobile_customization_upgrade:

                            }

                            // admin_v2_optimize_remove_tmp
                            if ('/admin/v2/optimize/remove-tmp' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\OptimizeController::removeTempAction',  '_route' => 'admin_v2_optimize_remove_tmp',  '_permission' =>   array (    0 => 'admin_v2_optimize_settings',  ),  '_h5' => false,);
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_optimize_remove_tmp;
                                }

                                return $ret;
                            }
                            not_admin_v2_optimize_remove_tmp:

                        }

                        // admin_v2_online
                        if ('/admin/v2/online' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\OnlineController::indexAction',  '_route' => 'admin_v2_online',  '_permission' =>   array (    0 => 'admin_v2_online',  ),  '_h5' => false,);
                        }

                        if (0 === strpos($pathinfo, '/admin/v2/order')) {
                            // admin_v2_order_manage
                            if ('/admin/v2/order/manage' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Trade\\OrderController::indexAction',  '_route' => 'admin_v2_order_manage',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_v2_order_detail
                            if (preg_match('#^/admin/v2/order/(?P<id>[^/]++)/detail$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_order_detail']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Trade\\OrderController::detailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_v2_order_adjust_price
                            if (preg_match('#^/admin/v2/order/(?P<id>[^/]++)/adjust_price$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_order_adjust_price']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Trade\\OrderController::adjustPriceAction',  '_permission' =>   array (    0 => 'admin_v2_trade',  ),  '_h5' => false,));
                            }

                            if (0 === strpos($pathinfo, '/admin/v2/order/refund')) {
                                // admin_v2_order_refunds
                                if ('/admin/v2/order/refunds' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Trade\\OrderRefundController::indexAction',  '_route' => 'admin_v2_order_refunds',  '_permission' =>   array (    0 => 'admin_v2_trade',  ),  '_h5' => false,);
                                }

                                // admin_v2_order_refund_detail
                                if (preg_match('#^/admin/v2/order/refund/(?P<id>[^/]++)/detail$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_order_refund_detail']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Trade\\OrderRefundController::refundDetailAction',  '_permission' =>   array (    0 => 'admin_v2_trade',  ),  '_h5' => false,));
                                }

                            }

                            // admin_v2_order_audit_refund
                            if (preg_match('#^/admin/v2/order/(?P<refundId>[^/]++)/audit_refund$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_order_audit_refund']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Trade\\OrderRefundController::auditRefundAction',  '_permission' =>   array (    0 => 'admin_v2_trade',  ),  '_h5' => false,));
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/v2/org')) {
                            // admin_v2_org
                            if ('/admin/v2/org' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\OrgManageController::indexAction',  '_route' => 'admin_v2_org',  '_permission' =>   array (    0 => 'admin_v2_org',  ),  '_h5' => false,);
                            }

                            // admin_v2_org_create
                            if ('/admin/v2/org/create' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\OrgManageController::createAction',  '_route' => 'admin_v2_org_create',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_v2_org_update
                            if (preg_match('#^/admin/v2/org/(?P<id>[^/]++)/update$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_org_update']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\OrgManageController::updateAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_v2_org_delete
                            if (preg_match('#^/admin/v2/org/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_org_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\OrgManageController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_org_delete;
                                }

                                return $ret;
                            }
                            not_admin_v2_org_delete:

                            // admin_v2_org_check_code
                            if ('/admin/v2/org/checkcode' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\OrgManageController::checkCodeAction',  '_route' => 'admin_v2_org_check_code',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_v2_org_check_name
                            if ('/admin/v2/org/checkname' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\OrgManageController::checkNameAction',  '_route' => 'admin_v2_org_check_name',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_v2_org_sort
                            if ('/admin/v2/org/sort' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\OrgManageController::sortAction',  '_route' => 'admin_v2_org_sort',  '_permission' =>   array (  ),  '_h5' => false,);
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_org_sort;
                                }

                                return $ret;
                            }
                            not_admin_v2_org_sort:

                        }

                    }

                    elseif (0 === strpos($pathinfo, '/admin/v2/t')) {
                        if (0 === strpos($pathinfo, '/admin/v2/tag')) {
                            // admin_v2_tag
                            if ('/admin/v2/tag' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\TagController::indexAction',  '_route' => 'admin_v2_tag',  '_permission' =>   array (    0 => 'admin_v2_course_tag_manage',  ),  '_h5' => false,);
                            }

                            // admin_v2_tag_create
                            if ('/admin/v2/tag/create' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\TagController::createAction',  '_route' => 'admin_v2_tag_create',  '_permission' =>   array (    0 => 'admin_v2_course_tag_add',  ),  '_h5' => false,);
                            }

                            // admin_v2_tag_update
                            if (preg_match('#^/admin/v2/tag/(?P<id>[^/]++)/update$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_tag_update']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\TagController::updateAction',  '_permission' =>   array (    0 => 'admin_v2_course_tag_manage',  ),  '_h5' => false,));
                            }

                            // admin_v2_tag_delete
                            if (preg_match('#^/admin/v2/tag/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_tag_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\TagController::deleteAction',  '_permission' =>   array (    0 => 'admin_v2_course_tag_manage',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_tag_delete;
                                }

                                return $ret;
                            }
                            not_admin_v2_tag_delete:

                            // admin_v2_tag_checkname
                            if ('/admin/v2/tag/checkname' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\TagController::checkNameAction',  '_route' => 'admin_v2_tag_checkname',  '_permission' =>   array (    0 => 'admin_v2_course_tag_manage',  ),  '_h5' => false,);
                            }

                            if (0 === strpos($pathinfo, '/admin/v2/tag/group')) {
                                // admin_v2_tag_group
                                if ('/admin/v2/tag/group' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\TagGroupController::indexAction',  '_route' => 'admin_v2_tag_group',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_v2_tag_group_update
                                if (preg_match('#^/admin/v2/tag/group/(?P<groupId>[^/]++)/update$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_tag_group_update']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\TagGroupController::updateAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                }

                                // admin_v2_tag_group_create
                                if ('/admin/v2/tag/group/create' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\TagGroupController::createAction',  '_route' => 'admin_v2_tag_group_create',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_v2_tag_group_delete
                                if (preg_match('#^/admin/v2/tag/group/(?P<tagId>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_tag_group_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\TagGroupController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                }

                                // admin_v2_tag_group_checkname
                                if ('/admin/v2/tag/group/checkname' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\TagGroupController::checkNameAction',  '_route' => 'admin_v2_tag_group_checkname',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/v2/thread')) {
                            // admin_v2_course_thread
                            if ('/admin/v2/thread' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\ThreadController::courseThreadIndexAction',  '_route' => 'admin_v2_course_thread',  '_permission' =>   array (    0 => 'admin_v2_course_thread',  ),  '_h5' => false,);
                            }

                            // admin_v2_course_thread_delete
                            if (preg_match('#^/admin/v2/thread/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_course_thread_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\ThreadController::courseThreadDeleteAction',  '_permission' =>   array (    0 => 'admin_v2_course_thread',    1 => 'admin_v2_course_question_manage',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_course_thread_delete;
                                }

                                return $ret;
                            }
                            not_admin_v2_course_thread_delete:

                            // admin_v2_course_thread_batch_delete
                            if ('/admin/v2/thread/batch_delete' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\ThreadController::courseThreadBatchDeleteAction',  '_route' => 'admin_v2_course_thread_batch_delete',  '_permission' =>   array (    0 => 'admin_v2_course_thread',  ),  '_h5' => false,);
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_course_thread_batch_delete;
                                }

                                return $ret;
                            }
                            not_admin_v2_course_thread_batch_delete:

                        }

                        elseif (0 === strpos($pathinfo, '/admin/v2/theme')) {
                            // admin_v2_theme_manage
                            if (preg_match('#^/admin/v2/theme/(?P<uri>[^/]++)/manage$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_theme_manage']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ThemeController::manageIndexAction',  '_permission' =>   array (    0 => 'admin_v2_setting_theme',  ),  '_h5' => false,));
                            }

                            // admin_v2_reset_currentTheme_config
                            if (preg_match('#^/admin/v2/theme/(?P<uri>[^/]++)/config/reset$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_reset_currentTheme_config']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ThemeController::resetConfigAction',  '_permission' =>   array (    0 => 'admin_v2_setting_theme',  ),  '_h5' => false,));
                            }

                            // admin_v2_save_themes_config
                            if ('/admin/v2/theme/config/save' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ThemeController::saveConfigAction',  '_route' => 'admin_v2_save_themes_config',  '_permission' =>   array (    0 => 'admin_v2_setting_theme',  ),  '_h5' => false,);
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_save_themes_config;
                                }

                                return $ret;
                            }
                            not_admin_v2_save_themes_config:

                            // admin_v2_confirm_themes_config
                            if (preg_match('#^/admin/v2/theme/(?P<uri>[^/]++)/config/confirm$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_confirm_themes_config']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ThemeController::confirmConfigAction',  '_permission' =>   array (    0 => 'admin_v2_setting_theme',  ),  '_h5' => false,));
                            }

                            // admin_v2_themes_show
                            if ('/admin/v2/theme/show' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ThemeController::showAction',  '_route' => 'admin_v2_themes_show',  '_permission' =>   array (    0 => 'admin_v2_setting_theme',  ),  '_h5' => false,);
                            }

                            // admin_v2_themes_config_edit
                            if ('/admin/v2/theme/config/edit' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\ThemeController::themeConfigEditAction',  '_route' => 'admin_v2_themes_config_edit',  '_permission' =>   array (    0 => 'admin_v2_setting_theme',  ),  '_h5' => false,);
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/v2/teacher')) {
                            // admin_v2_teacher
                            if ('/admin/v2/teacher' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\TeacherController::indexAction',  '_route' => 'admin_v2_teacher',  '_permission' =>   array (    0 => 'admin_v2_teacher',  ),  '_h5' => false,);
                            }

                            // admin_v2_teacher_promote
                            if (preg_match('#^/admin/v2/teacher/(?P<id>[^/]++)/promote$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_teacher_promote']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\TeacherController::promoteAction',  '_permission' =>   array (    0 => 'admin_v2_teacher_promote',  ),  '_h5' => false,));
                            }

                            // admin_v2_teacher_promote_list
                            if ('/admin/v2/teacher/promote/list' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\TeacherController::promoteListAction',  '_route' => 'admin_v2_teacher_promote_list',  '_permission' =>   array (    0 => 'admin_v2_teacher_promote',  ),  '_h5' => false,);
                            }

                            // admin_v2_teacher_promote_cancel
                            if (preg_match('#^/admin/v2/teacher/(?P<id>[^/]++)/promote/cancel$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_teacher_promote_cancel']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\TeacherController::promoteCancelAction',  '_permission' =>   array (    0 => 'admin_v2_teacher',    1 => 'admin_v2_teacher_promote',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_teacher_promote_cancel;
                                }

                                return $ret;
                            }
                            not_admin_v2_teacher_promote_cancel:

                        }

                    }

                    elseif (0 === strpos($pathinfo, '/admin/v2/note')) {
                        // admin_v2_course_note
                        if ('/admin/v2/note' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseController::noteListAction',  '_route' => 'admin_v2_course_note',  '_permission' =>   array (    0 => 'admin_v2_course_note_manage',  ),  '_h5' => false,);
                        }

                        // admin_v2_note_delete
                        if (preg_match('#^/admin/v2/note/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_note_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseController::deleteNoteAction',  '_permission' =>   array (    0 => 'admin_v2_course_note_manage',  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_v2_note_delete;
                            }

                            return $ret;
                        }
                        not_admin_v2_note_delete:

                        // admin_v2_note_batch_delete
                        if ('/admin/v2/note/batch_delete' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Teach\\CourseController::batchDeleteNoteAction',  '_route' => 'admin_v2_note_batch_delete',  '_permission' =>   array (    0 => 'admin_v2_course_note_manage',  ),  '_h5' => false,);
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_v2_note_batch_delete;
                            }

                            return $ret;
                        }
                        not_admin_v2_note_batch_delete:

                    }

                    elseif (0 === strpos($pathinfo, '/admin/v2/invite')) {
                        // admin_v2_invite_record
                        if ('/admin/v2/invite/record' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Marketing\\InviteController::recordAction',  '_route' => 'admin_v2_invite_record',  '_permission' =>   array (    0 => 'admin_v2_operation_invite',  ),  '_h5' => false,);
                        }

                        // admin_v2_invite
                        if ('/admin/v2/invite' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Marketing\\InviteController::userRecordsAction',  '_route' => 'admin_v2_invite',  '_permission' =>   array (    0 => 'admin_v2_operation_invite',  ),  '_h5' => false,);
                        }

                        // admin_v2_invite_coupon
                        if (preg_match('#^/admin/v2/invite/(?P<filter>[^/]++)/coupon/?$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_invite_coupon']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Marketing\\InviteController::couponAction',  'filter' => 'invited',  '_permission' =>   array (  ),  '_h5' => false,));
                            if ('/' === substr($pathinfo, -1)) {
                                // no-op
                            } elseif ('GET' !== $canonicalMethod) {
                                goto not_admin_v2_invite_coupon;
                            } else {
                                return array_replace($ret, $this->redirect($rawPathinfo.'/', 'admin_v2_invite_coupon'));
                            }

                            return $ret;
                        }
                        not_admin_v2_invite_coupon:

                        // admin_v2_invite_coupon_query
                        if ('/admin/v2/invite/coupon/query' === $trimmedPathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Marketing\\InviteController::queryInviteCouponAction',  '_route' => 'admin_v2_invite_coupon_query',  '_permission' =>   array (  ),  '_h5' => false,);
                            if ('/' === substr($pathinfo, -1)) {
                                // no-op
                            } elseif ('GET' !== $canonicalMethod) {
                                goto not_admin_v2_invite_coupon_query;
                            } else {
                                return array_replace($ret, $this->redirect($rawPathinfo.'/', 'admin_v2_invite_coupon_query'));
                            }

                            return $ret;
                        }
                        not_admin_v2_invite_coupon_query:

                        // admin_v2_invite_detail
                        if ('/admin/v2/invite/detail' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Marketing\\InviteController::inviteDetailAction',  '_route' => 'admin_v2_invite_detail',  '_permission' =>   array (    0 => 'admin_v2_operation_invite',  ),  '_h5' => false,);
                        }

                    }

                    // admin_v2_setting_mobile_iap_product
                    if ('/admin/v2/iap_setting/mobile_iap_product' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\IAPController::mobileIapProductAction',  '_route' => 'admin_v2_setting_mobile_iap_product',  '_permission' =>   array (    0 => 'admin_v2_setting_mobile_iap_product',  ),  '_h5' => false,);
                    }

                    if (0 === strpos($pathinfo, '/admin/v2/wechat')) {
                        // admin_v2_wechat_app
                        if ('/admin/v2/wechat_app' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\SettingController::weChatAppAction',  '_route' => 'admin_v2_wechat_app',  '_permission' =>   array (    0 => 'admin_v2_wechat_app',  ),  '_h5' => false,);
                        }

                        if (0 === strpos($pathinfo, '/admin/v2/wechat/notification')) {
                            if (0 === strpos($pathinfo, '/admin/v2/wechat/notification/record')) {
                                // admin_v2_wechat_notification_record
                                if ('/admin/v2/wechat/notification/record' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\WeChatNotificationController::indexAction',  '_route' => 'admin_v2_wechat_notification_record',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_v2_wechat_notification_record_detail
                                if (preg_match('#^/admin/v2/wechat/notification/record/(?P<id>[^/]++)/detail$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_wechat_notification_record_detail']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\WeChatNotificationController::recordDetailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                }

                            }

                            // admin_v2_wechat_notification_manage
                            if ('/admin/v2/wechat/notification/manage' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\WeChatNotificationController::manageAction',  '_route' => 'admin_v2_wechat_notification_manage',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_v2_wechat_notification_setting_modal
                            if ('/admin/v2/wechat/notification/setting_edit' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\WeChatNotificationController::settingModalAction',  '_route' => 'admin_v2_wechat_notification_setting_modal',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_v2_wechat_notification_show
                            if ('/admin/v2/wechat/notification/show' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\WeChatNotificationController::showAction',  '_route' => 'admin_v2_wechat_notification_show',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                        }

                        // admin_v2_setting_wechat_auth
                        if ('/admin/v2/wechat/auth/setting' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\WeChatSettingController::indexAction',  '_route' => 'admin_v2_setting_wechat_auth',  '_permission' =>   array (    0 => 'admin_v2_setting_wechat_auth',  ),  '_h5' => false,);
                        }

                        // admin_v2_setting_wechat_pre_auth_url
                        if (0 === strpos($pathinfo, '/admin/v2/wechat/pre_auth_url') && preg_match('#^/admin/v2/wechat/pre_auth_url/(?P<platformType>[^/]++)$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_setting_wechat_pre_auth_url']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\WeChatSettingController::preAuthUrlAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                    }

                    elseif (0 === strpos($pathinfo, '/admin/v2/d')) {
                        if (0 === strpos($pathinfo, '/admin/v2/discovery_column')) {
                            // admin_v2_discovery_column_index
                            if ('/admin/v2/discovery_column/index' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\DiscoveryColumnController::indexAction',  '_route' => 'admin_v2_discovery_column_index',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_v2_discovery_column_create
                            if ('/admin/v2/discovery_column/create' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\DiscoveryColumnController::createAction',  '_route' => 'admin_v2_discovery_column_create',  '_permission' =>   array (    0 => 'admin_v2_setting_mobile',  ),  '_h5' => false,);
                            }

                            // admin_v2_discovery_column_delete
                            if (preg_match('#^/admin/v2/discovery_column/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_discovery_column_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\DiscoveryColumnController::deleteAction',  '_permission' =>   array (    0 => 'admin_v2_setting_mobile',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_discovery_column_delete;
                                }

                                return $ret;
                            }
                            not_admin_v2_discovery_column_delete:

                            // admin_v2_discovery_column_edit
                            if (preg_match('#^/admin/v2/discovery_column/(?P<id>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_discovery_column_edit']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\DiscoveryColumnController::editAction',  '_permission' =>   array (    0 => 'admin_v2_setting_mobile',  ),  '_h5' => false,));
                            }

                            // admin_v2_discovery_column_title_check
                            if (preg_match('#^/admin/v2/discovery_column/(?P<id>[^/]++)/title_check$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_discovery_column_title_check']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\DiscoveryColumnController::checkTitleAction',  '_permission' =>   array (    0 => 'admin_v2_setting_mobile',  ),  '_h5' => false,));
                            }

                            // admin_v2_discovery_column_sort
                            if ('/admin/v2/discovery_column/sort' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\DiscoveryColumnController::sortAction',  '_route' => 'admin_v2_discovery_column_sort',  '_permission' =>   array (    0 => 'admin_v2_setting_mobile',  ),  '_h5' => false,);
                            }

                            // admin_v2_discovery_column_category_tree
                            if ('/admin/v2/discovery_column/category/tree' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\DiscoveryColumnController::categoryTreeAction',  '_route' => 'admin_v2_discovery_column_category_tree',  '_permission' =>   array (    0 => 'admin_v2_setting_mobile',  ),  '_h5' => false,);
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/v2/de')) {
                            // admin_v2_message_delete_messages
                            if ('/admin/v2/delete/choosed/messages' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\MessageController::deleteChoosedMessagesAction',  '_route' => 'admin_v2_message_delete_messages',  '_permission' =>   array (    0 => 'admin_v2_message_manage',  ),  '_h5' => false,);
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_message_delete_messages;
                                }

                                return $ret;
                            }
                            not_admin_v2_message_delete_messages:

                            if (0 === strpos($pathinfo, '/admin/v2/destroy_account')) {
                                // admin_v2_destroy_account_record
                                if ('/admin/v2/destroy_account/record' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\DestroyAccountController::recordIndexAction',  '_route' => 'admin_v2_destroy_account_record',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_v2_destroy_account_record_detail
                                if (preg_match('#^/admin/v2/destroy_account/(?P<id>[^/]++)/record/detail$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_destroy_account_record_detail']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\DestroyAccountController::recordDetailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                }

                                // admin_v2_destroy_account_record_audit
                                if (preg_match('#^/admin/v2/destroy_account/(?P<id>[^/]++)/record/audit$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_destroy_account_record_audit']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\DestroyAccountController::auditAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                }

                            }

                            elseif (0 === strpos($pathinfo, '/admin/v2/destroyed_account')) {
                                // admin_v2_destroyed_account
                                if ('/admin/v2/destroyed_account' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\DestroyAccountController::indexAction',  '_route' => 'admin_v2_destroyed_account',  '_permission' =>   array (  ),  '_h5' => false,);
                                }

                                // admin_v2_destroyed_account_detail
                                if (preg_match('#^/admin/v2/destroyed_account/(?P<id>[^/]++)/detail$#sD', $pathinfo, $matches)) {
                                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_destroyed_account_detail']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\DestroyAccountController::detailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                                }

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/v2/data_statistics')) {
                            // admin_v2_data_statistics_overview
                            if ('/admin/v2/data_statistics/overview' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\DataStatistics\\OverviewController::indexAction',  '_route' => 'admin_v2_data_statistics_overview',  '_permission' =>   array (    0 => 'admin_v2_data_statistics_overview',  ),  '_h5' => false,);
                            }

                            // admin_v2_data_statistics_order_overview
                            if (0 === strpos($pathinfo, '/admin/v2/data_statistics/order') && preg_match('#^/admin/v2/data_statistics/order/(?P<period>[^/]++)/overview$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_data_statistics_order_overview']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\DataStatistics\\OverviewController::orderAction',  '_permission' =>   array (    0 => 'admin_v2_data_statistics_overview',  ),  '_h5' => false,));
                            }

                            // admin_v2_data_statistics_daily_overview
                            if ('/admin/v2/data_statistics/daily/overview' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\DataStatistics\\OverviewController::dailyAction',  '_route' => 'admin_v2_data_statistics_daily_overview',  '_permission' =>   array (    0 => 'admin_v2_data_statistics_overview',  ),  '_h5' => false,);
                            }

                            // admin_v2_data_statistics_study_overview
                            if (0 === strpos($pathinfo, '/admin/v2/data_statistics/study') && preg_match('#^/admin/v2/data_statistics/study/(?P<period>[^/]++)/overview$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_data_statistics_study_overview']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\DataStatistics\\OverviewController::studyAction',  '_permission' =>   array (    0 => 'admin_v2_data_statistics_overview',  ),  '_h5' => false,));
                            }

                            // admin_v2_data_statistics_task_learn_overview
                            if (0 === strpos($pathinfo, '/admin/v2/data_statistics/task/learn') && preg_match('#^/admin/v2/data_statistics/task/learn/(?P<period>[^/]++)/overview$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_data_statistics_task_learn_overview']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\DataStatistics\\OverviewController::taskLearnAction',  '_permission' =>   array (    0 => 'admin_v2_data_statistics_overview',  ),  '_h5' => false,));
                            }

                            // admin_v2_data_statistics_index
                            if (0 === strpos($pathinfo, '/admin/v2/data_statistics/tab') && preg_match('#^/admin/v2/data_statistics/tab(?:/(?P<tab>[^/]++))?$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_data_statistics_index']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\DataStatistics\\StatisticsController::indexAction',  'tab' => 'trend',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_v2_data_statistics_course_explore_overview
                            if (0 === strpos($pathinfo, '/admin/v2/data_statistics/course/explore') && preg_match('#^/admin/v2/data_statistics/course/explore/(?P<period>[^/]++)/overview$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_data_statistics_course_explore_overview']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\DataStatistics\\OverviewController::courseExploreAction',  '_permission' =>   array (    0 => 'admin_v2_data_statistics_overview',  ),  '_h5' => false,));
                            }

                        }

                    }

                    elseif (0 === strpos($pathinfo, '/admin/v2/group')) {
                        // admin_v2_group
                        if ('/admin/v2/group' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\GroupController::indexAction',  '_route' => 'admin_v2_group',  '_permission' =>   array (    0 => 'admin_v2_operation_group_manage',  ),  '_h5' => false,);
                        }

                        if (0 === strpos($pathinfo, '/admin/v2/group/thread')) {
                            // admin_v2_groupThread
                            if ('/admin/v2/group/thread' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\GroupController::threadAction',  '_route' => 'admin_v2_groupThread',  '_permission' =>   array (    0 => 'admin_v2_operation_group_thread',  ),  '_h5' => false,);
                            }

                            // admin_v2_group_thread_cancel_elite
                            if (preg_match('#^/admin/v2/group/thread/(?P<threadId>[^/]++)/removeElite$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_group_thread_cancel_elite']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\GroupController::removeEliteAction',  '_permission' =>   array (    0 => 'admin_v2operation_group_manage',  ),  '_h5' => false,));
                            }

                            // admin_v2_group_thread_set_elite
                            if (preg_match('#^/admin/v2/group/thread/(?P<threadId>[^/]++)/setElite$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_group_thread_set_elite']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\GroupController::setEliteAction',  '_permission' =>   array (    0 => 'admin_v2_operation_group_manage',  ),  '_h5' => false,));
                            }

                            // admin_v2_group_thread_cancel_stick
                            if (preg_match('#^/admin/v2/group/thread/(?P<threadId>[^/]++)/removeStick$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_group_thread_cancel_stick']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\GroupController::removeStickAction',  '_permission' =>   array (    0 => 'admin_v2_operation_group_manage',  ),  '_h5' => false,));
                            }

                            // admin_v2_group_thread_set_stick
                            if (preg_match('#^/admin/v2/group/thread/(?P<threadId>[^/]++)/setStick$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_group_thread_set_stick']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\GroupController::setStickAction',  '_permission' =>   array (    0 => 'admin_v2_operation_group_manage',  ),  '_h5' => false,));
                            }

                            // admin_v2_group_thread_close
                            if (preg_match('#^/admin/v2/group/thread/(?P<threadId>[^/]++)/closeThread$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_group_thread_close']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\GroupController::closeThreadAction',  '_permission' =>   array (    0 => 'admin_v2_operation_group_manage',  ),  '_h5' => false,));
                            }

                            // admin_v2_group_thread_open
                            if (preg_match('#^/admin/v2/group/thread/(?P<threadId>[^/]++)/openThread$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_group_thread_open']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\GroupController::openThreadAction',  '_permission' =>   array (    0 => 'admin_v2_operation_group_manage',  ),  '_h5' => false,));
                            }

                            // admin_v2_group_thread_delete
                            if (preg_match('#^/admin/v2/group/thread/(?P<threadId>[^/]++)/deleteThread$#sD', $pathinfo, $matches)) {
                                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_group_thread_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\GroupController::deleteThreadAction',  '_permission' =>   array (    0 => 'admin_v2_operation_group_manage',  ),  '_h5' => false,));
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_group_thread_delete;
                                }

                                return $ret;
                            }
                            not_admin_v2_group_thread_delete:

                        }

                        // admin_v2_groupThread_batch_delete
                        if ('/admin/v2/group/batchDeleteThread' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\GroupController::batchDeleteThreadAction',  '_route' => 'admin_v2_groupThread_batch_delete',  '_permission' =>   array (    0 => 'admin_v2_operation_group_thread',  ),  '_h5' => false,);
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_v2_groupThread_batch_delete;
                            }

                            return $ret;
                        }
                        not_admin_v2_groupThread_batch_delete:

                        // admin_v2_group_close
                        if (preg_match('#^/admin/v2/group/(?P<id>[^/]++)/close$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_group_close']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\GroupController::closeGroupAction',  '_permission' =>   array (    0 => 'admin_v2_operation_group_manage',  ),  '_h5' => false,));
                        }

                        // admin_v2_group_open
                        if (preg_match('#^/admin/v2/group/(?P<id>[^/]++)/open$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_group_open']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\GroupController::openGroupAction',  '_permission' =>   array (    0 => 'admin_v2_operation_group_manage',  ),  '_h5' => false,));
                        }

                        // admin_v2_group_transfer
                        if (0 === strpos($pathinfo, '/admin/v2/group/transfer') && preg_match('#^/admin/v2/group/transfer/(?P<groupId>[^/]++)$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_group_transfer']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\GroupController::transferGroupAction',  '_permission' =>   array (    0 => 'admin_v2_operation_group_manage',  ),  '_h5' => false,));
                        }

                    }

                    // admin_v2_generate_short_link
                    if ('/admin/v2/generate/short/link' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\SmsController::changeLinkAction',  '_route' => 'admin_v2_generate_short_link',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // admin_v2_message
                    if ('/admin/v2/message' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\MessageController::indexAction',  '_route' => 'admin_v2_message',  '_permission' =>   array (    0 => 'admin_v2_message_manage',  ),  '_h5' => false,);
                    }

                    if (0 === strpos($pathinfo, '/admin/v2/mock')) {
                        // admin_v2_mocked
                        if ('/admin/v2/mock' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\MockController::indexAction',  '_route' => 'admin_v2_mocked',  '_permission' =>   array (    0 => 'admin_v2_mocked',  ),  '_h5' => false,);
                        }

                        if (0 === strpos($pathinfo, '/admin/v2/mock/distributor_')) {
                            // admin_v2_mocked_distributor_token
                            if (0 === strpos($pathinfo, '/admin/v2/mock/distributor_token') && preg_match('#^/admin/v2/mock/distributor_token/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_mocked_distributor_token']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\MockController::mockDistributorTokenAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_v2_mocked_distributor_get_post_data
                            if ('/admin/v2/mock/distributor_get_post_data' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\MockController::getPostDistributorDataAction',  '_route' => 'admin_v2_mocked_distributor_get_post_data',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_v2_mocked_distributor_post_data
                            if ('/admin/v2/mock/distributor_post_data' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\MockController::postDistributorDataAction',  '_route' => 'admin_v2_mocked_distributor_post_data',  '_permission' =>   array (  ),  '_h5' => false,);
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_admin_v2_mocked_distributor_post_data;
                                }

                                return $ret;
                            }
                            not_admin_v2_mocked_distributor_post_data:

                        }

                        // admin_v2_mocked_download_token
                        if ('/admin/v2/mock/download_token' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\MockController::downloadTokenAction',  '_route' => 'admin_v2_mocked_download_token',  '_permission' =>   array (  ),  '_h5' => false,);
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_v2_mocked_download_token;
                            }

                            return $ret;
                        }
                        not_admin_v2_mocked_download_token:

                        // admin_v2_mocked_marketing_post_data
                        if ('/admin/v2/mock/marketing_post_data' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\MockController::postMarketingDataAction',  '_route' => 'admin_v2_mocked_marketing_post_data',  '_permission' =>   array (  ),  '_h5' => false,);
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_v2_mocked_marketing_post_data;
                            }

                            return $ret;
                        }
                        not_admin_v2_mocked_marketing_post_data:

                        // admin_v2_mocked_post_data_version_3
                        if ('/admin/v2/mock/post_data_version_3' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\MockController::postDataWithVersion3Action',  '_route' => 'admin_v2_mocked_post_data_version_3',  '_permission' =>   array (  ),  '_h5' => false,);
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_v2_mocked_post_data_version_3;
                            }

                            return $ret;
                        }
                        not_admin_v2_mocked_post_data_version_3:

                    }

                    elseif (0 === strpos($pathinfo, '/admin/v2/keyword')) {
                        // admin_v2_keyword
                        if ('/admin/v2/keyword' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\SensitiveController::indexAction',  '_route' => 'admin_v2_keyword',  '_permission' =>   array (    0 => 'admin_v2_keyword',  ),  '_h5' => false,);
                        }

                        // admin_v2_keyword_create
                        if ('/admin/v2/keyword/create' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\SensitiveController::createAction',  '_route' => 'admin_v2_keyword_create',  '_permission' =>   array (    0 => 'admin_v2_keyword_create',  ),  '_h5' => false,);
                        }

                        // admin_v2_keyword_delete
                        if (preg_match('#^/admin/v2/keyword/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_keyword_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\SensitiveController::deleteAction',  '_permission' =>   array (    0 => 'admin_v2_keyword',  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_v2_keyword_delete;
                            }

                            return $ret;
                        }
                        not_admin_v2_keyword_delete:

                        // admin_v2_keyword_change
                        if (preg_match('#^/admin/v2/keyword/(?P<id>[^/]++)/change$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_keyword_change']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\SensitiveController::changeAction',  '_permission' =>   array (    0 => 'admin_v2_keyword',  ),  '_h5' => false,));
                        }

                        // admin_v2_keyword_banlogs
                        if ('/admin/v2/keyword/banlogs' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Operating\\SensitiveController::banlogsAction',  '_route' => 'admin_v2_keyword_banlogs',  '_permission' =>   array (    0 => 'admin_v2_keyword_banlogs',  ),  '_h5' => false,);
                        }

                    }

                    elseif (0 === strpos($pathinfo, '/admin/v2/user')) {
                        // admin_v2_user
                        if ('/admin/v2/user' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\UserManageController::indexAction',  '_route' => 'admin_v2_user',  '_permission' =>   array (    0 => 'admin_v2_user_manage',  ),  '_h5' => false,);
                        }

                        if (0 === strpos($pathinfo, '/admin/v2/user/create')) {
                            // admin_v2_user_create
                            if ('/admin/v2/user/create' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\UserManageController::createAction',  '_route' => 'admin_v2_user_create',  '_permission' =>   array (    0 => 'admin_v2_user_create',  ),  '_h5' => false,);
                            }

                            // admin_v2_user_create_email_check
                            if ('/admin/v2/user/create/email/check' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\UserManageController::emailCheckAction',  '_route' => 'admin_v2_user_create_email_check',  '_permission' =>   array (    0 => 'admin_v2_user_manage',  ),  '_h5' => false,);
                            }

                            // admin_v2_user_create_email_or_mobile_check
                            if ('/admin/v2/user/create/email_or_mobile/check' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\UserManageController::emailOrMobileCheckAction',  '_route' => 'admin_v2_user_create_email_or_mobile_check',  '_permission' =>   array (    0 => 'admin_v2_user_manage',  ),  '_h5' => false,);
                            }

                            // admin_v2_user_create_mobile_check
                            if ('/admin/v2/user/create/mobile/check' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\UserManageController::mobileCheckAction',  '_route' => 'admin_v2_user_create_mobile_check',  '_permission' =>   array (    0 => 'admin_v2_user_manage',  ),  '_h5' => false,);
                            }

                            // admin_v2_user_create_nickname_check
                            if ('/admin/v2/user/create/nickname/check' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\UserManageController::nicknameCheckAction',  '_route' => 'admin_v2_user_create_nickname_check',  '_permission' =>   array (    0 => 'admin_v2_user_manage',  ),  '_h5' => false,);
                            }

                        }

                        // admin_v2_user_update_nickname_check
                        if (0 === strpos($pathinfo, '/admin/v2/user/update') && preg_match('#^/admin/v2/user/update/(?P<userId>[^/]++)/nickname/check$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_user_update_nickname_check']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\UserManageController::updateNicknameCheckAction',  '_permission' =>   array (    0 => 'admin_v2_user_manage',  ),  '_h5' => false,));
                        }

                        // admin_v2_user_show
                        if (preg_match('#^/admin/v2/user/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_user_show']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\UserManageController::showAction',  '_permission' =>   array (    0 => 'admin_v2',  ),  '_h5' => false,));
                        }

                        // admin_v2_user_edit
                        if (preg_match('#^/admin/v2/user/(?P<id>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_user_edit']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\UserManageController::editAction',  '_permission' =>   array (    0 => 'admin_v2_user_edit',  ),  '_h5' => false,));
                        }

                        // admin_v2_user_org_update
                        if (preg_match('#^/admin/v2/user/(?P<id>[^/]++)/org/update$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_user_org_update']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\UserManageController::orgUpdateAction',  '_permission' =>   array (    0 => 'admin_v2_user_org_update',  ),  '_h5' => false,));
                        }

                        // admin_v2_user_lock
                        if (preg_match('#^/admin/v2/user/(?P<id>[^/]++)/lock$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_user_lock']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\UserManageController::lockAction',  '_permission' =>   array (    0 => 'admin_v2_user_lock',  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_v2_user_lock;
                            }

                            return $ret;
                        }
                        not_admin_v2_user_lock:

                        // admin_v2_user_unlock
                        if (preg_match('#^/admin/v2/user/(?P<id>[^/]++)/unlock$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_user_unlock']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\UserManageController::unlockAction',  '_permission' =>   array (    0 => 'admin_v2_user_unlock',  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_v2_user_unlock;
                            }

                            return $ret;
                        }
                        not_admin_v2_user_unlock:

                        // admin_v2_user_roles
                        if (preg_match('#^/admin/v2/user/(?P<id>[^/]++)/roles$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_user_roles']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\UserManageController::rolesAction',  '_permission' =>   array (    0 => 'admin_v2_user_roles',  ),  '_h5' => false,));
                        }

                        // admin_v2_user_avatar
                        if (preg_match('#^/admin/v2/user/(?P<id>[^/]++)/avatar$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_user_avatar']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\UserManageController::avatarAction',  '_permission' =>   array (    0 => 'admin_v2_user_avatar',  ),  '_h5' => false,));
                        }

                        // admin_v2_user_avatar_crop
                        if (preg_match('#^/admin/v2/user/(?P<id>[^/]++)/avatar/crop$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_user_avatar_crop']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\UserManageController::avatarCropAction',  '_permission' =>   array (    0 => 'admin_v2_user_avatar',  ),  '_h5' => false,));
                        }

                        // admin_v2_user_change_nickname
                        if (preg_match('#^/admin/v2/user/(?P<userId>[^/]++)/change/nickname$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_user_change_nickname']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\UserManageController::changeNicknameAction',  '_permission' =>   array (    0 => 'admin_v2_user_change_nickname',  ),  '_h5' => false,));
                        }

                        // admin_v2_user_change_password
                        if (preg_match('#^/admin/v2/user/(?P<userId>[^/]++)/change/password$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_user_change_password']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\UserManageController::changePasswordAction',  '_permission' =>   array (    0 => 'admin_v2_user_change_password',  ),  '_h5' => false,));
                        }

                        // admin_v2_user_send_passwordreset_email
                        if (preg_match('#^/admin/v2/user/(?P<id>[^/]++)/send_passwordreset_email$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_user_send_passwordreset_email']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\UserManageController::sendPasswordResetEmailAction',  '_permission' =>   array (    0 => 'admin_v2_user_send_passwordreset_email',  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_v2_user_send_passwordreset_email;
                            }

                            return $ret;
                        }
                        not_admin_v2_user_send_passwordreset_email:

                        // admin_v2_user_send_emailverify_email
                        if (preg_match('#^/admin/v2/user/(?P<id>[^/]++)/send_emailverify_email$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_user_send_emailverify_email']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\UserManageController::sendEmailVerifyEmailAction',  '_permission' =>   array (    0 => 'admin_v2_user_send_emailverify_email',  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_v2_user_send_emailverify_email;
                            }

                            return $ret;
                        }
                        not_admin_v2_user_send_emailverify_email:

                        // admin_v2_fans_list
                        if ('/admin/v2/user/fans/list' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\WechatFansController::indexAction',  '_route' => 'admin_v2_fans_list',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        if (0 === strpos($pathinfo, '/admin/v2/user/learn')) {
                            // admin_v2_user_learn_statistics
                            if ('/admin/v2/user/learn/statistics' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\LearnStatisticsController::indexAction',  '_route' => 'admin_v2_user_learn_statistics',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_v2_user_learn_detail
                            if (preg_match('#^/admin/v2/user/learn/(?P<userId>[^/]++)/detail$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_user_learn_detail']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\LearnStatisticsController::detailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_v2_user_learn_chart
                            if (preg_match('#^/admin/v2/user/learn/(?P<userId>[^/]++)/chart$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_user_learn_chart']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\LearnStatisticsController::learnChartAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // admin_v2_user_learn_statistics_info
                            if ('/admin/v2/user/learn/statistics/info' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\User\\LearnStatisticsController::syncInfoAction',  '_route' => 'admin_v2_user_learn_statistics_info',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/v2/user_fields')) {
                            // admin_v2_user_fields_add
                            if ('/admin/v2/user_fields/add' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\UserSettingController::addUserFieldsAction',  '_route' => 'admin_v2_user_fields_add',  '_permission' =>   array (    0 => 'admin_v2_setting_user_fields',  ),  '_h5' => false,);
                            }

                            // admin_v2_user_fields_delete
                            if (0 === strpos($pathinfo, '/admin/v2/user_fields/delete') && preg_match('#^/admin/v2/user_fields/delete/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_user_fields_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\UserSettingController::deleteUserFieldsAction',  '_permission' =>   array (    0 => 'admin_v2_setting_user_fields',  ),  '_h5' => false,));
                            }

                            // admin_v2_user_fields_edit
                            if (0 === strpos($pathinfo, '/admin/v2/user_fields/edit') && preg_match('#^/admin/v2/user_fields/edit/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_user_fields_edit']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\UserSettingController::editUserFieldsAction',  '_permission' =>   array (    0 => 'admin_v2_setting_user_fields',  ),  '_h5' => false,));
                            }

                        }

                    }

                    // admin_v2_uploadfile_head_leader_params
                    if ('/admin/v2/uploadfile/video/head/leader/params' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::headLeaderParamsAction',  '_route' => 'admin_v2_uploadfile_head_leader_params',  '_permission' =>   array (    0 => 'admin_v2_edu_cloud_video_overview',  ),  '_h5' => false,);
                    }

                    // admin_v2_publish_sms_send
                    if (0 === strpos($pathinfo, '/admin/v2/publish/sms_send') && preg_match('#^/admin/v2/publish/sms_send/(?P<targetType>[^/]++)/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_publish_sms_send']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\SmsController::sendAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    if (0 === strpos($pathinfo, '/admin/v2/plumber')) {
                        // admin_v2_plumber
                        if ('/admin/v2/plumber' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\PlumberController::indexAction',  '_route' => 'admin_v2_plumber',  '_permission' =>   array (    0 => 'admin_v2_plumber',  ),  '_h5' => false,);
                        }

                        // admin_v2_plumber_queue
                        if ('/admin/v2/plumber/queue' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\PlumberController::queueAction',  '_route' => 'admin_v2_plumber_queue',  '_permission' =>   array (    0 => 'admin_v2_plumber_queue',  ),  '_h5' => false,);
                        }

                    }

                    // admin_v2_feedback
                    if ('/admin/v2/feedback' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\DefaultController::feedbackAction',  '_route' => 'admin_v2_feedback',  '_permission' =>   array (    0 => 'admin_v2',  ),  '_h5' => false,);
                    }

                    if (0 === strpos($pathinfo, '/admin/v2/role')) {
                        // admin_v2_roles
                        if ('/admin/v2/roles' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\RoleController::indexAction',  '_route' => 'admin_v2_roles',  '_permission' =>   array (    0 => 'admin_v2_role_manage',  ),  '_h5' => false,);
                        }

                        // admin_v2_role_create
                        if ('/admin/v2/role/create' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\RoleController::createAction',  '_route' => 'admin_v2_role_create',  '_permission' =>   array (    0 => 'admin_v2_role_create',  ),  '_h5' => false,);
                        }

                        // admin_v2_role_edit
                        if (preg_match('#^/admin/v2/role/(?P<id>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_role_edit']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\RoleController::editAction',  '_permission' =>   array (    0 => 'admin_v2_role_edit',  ),  '_h5' => false,));
                        }

                        // admin_v2_role_delete
                        if (preg_match('#^/admin/v2/role/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_role_delete']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\RoleController::deleteAction',  '_permission' =>   array (    0 => 'admin_v2_role_delete',  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_v2_role_delete;
                            }

                            return $ret;
                        }
                        not_admin_v2_role_delete:

                        // admin_v2_role_show
                        if (preg_match('#^/admin/v2/role/(?P<id>[^/]++)/show$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_role_show']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\RoleController::showAction',  '_permission' =>   array (    0 => 'admin_v2_role_manage',  ),  '_h5' => false,));
                        }

                        // admin_v2_role_check_name
                        if ('/admin/v2/role/checkName' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\RoleController::checkNameAction',  '_route' => 'admin_v2_role_check_name',  '_permission' =>   array (    0 => 'admin_v2_role_manage',  ),  '_h5' => false,);
                        }

                        // admin_v2_role_check_code
                        if ('/admin/v2/role/checkCode' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\RoleController::checkCodeAction',  '_route' => 'admin_v2_role_check_code',  '_permission' =>   array (    0 => 'admin_v2_role_manage',  ),  '_h5' => false,);
                        }

                    }

                    elseif (0 === strpos($pathinfo, '/admin/v2/reports/status')) {
                        // admin_v2_report_status
                        if ('/admin/v2/reports/status' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\SystemController::reportAction',  '_route' => 'admin_v2_report_status',  '_permission' =>   array (    0 => 'admin_v2_report_status_list',  ),  '_h5' => false,);
                        }

                        // admin_v2_report_status_php
                        if ('/admin/v2/reports/status/php' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\SystemController::phpAction',  '_route' => 'admin_v2_report_status_php',  '_permission' =>   array (    0 => 'admin_v2_report_status_list',  ),  '_h5' => false,);
                        }

                        // admin_v2_report_status_directory
                        if ('/admin/v2/reports/status/directory' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\SystemController::checkDirAction',  '_route' => 'admin_v2_report_status_directory',  '_permission' =>   array (    0 => 'admin_v2_report_status_list',  ),  '_h5' => false,);
                        }

                        // admin_v2_report_status_ucenter
                        if ('/admin/v2/reports/status/ucenter' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\SystemController::ucenterAction',  '_route' => 'admin_v2_report_status_ucenter',  '_permission' =>   array (    0 => 'admin_v2_report_status_list',  ),  '_h5' => false,);
                        }

                        // admin_v2_report_status_email_send
                        if ('/admin/v2/reports/status/email/send' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\System\\SystemController::emailSendCheckAction',  '_route' => 'admin_v2_report_status_email_send',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                    }

                    elseif (0 === strpos($pathinfo, '/admin/v2/edu_cloud')) {
                        if (0 === strpos($pathinfo, '/admin/v2/edu_cloud/video')) {
                            // admin_v2_edu_cloud_video_overview
                            if ('/admin/v2/edu_cloud/video/overview' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::videoOverviewAction',  '_route' => 'admin_v2_edu_cloud_video_overview',  '_permission' =>   array (    0 => 'admin_v2_edu_cloud_video_overview',  ),  '_h5' => false,);
                            }

                            // admin_v2_edu_cloud_video_setting
                            if ('/admin/v2/edu_cloud/video/setting' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::videoSettingAction',  '_route' => 'admin_v2_edu_cloud_video_setting',  '_permission' =>   array (    0 => 'admin_v2_edu_cloud_video_setting',  ),  '_h5' => false,);
                            }

                            // admin_v2_cloud_video_switch
                            if ('/admin/v2/edu_cloud/video/switch' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::videoSwitchAction',  '_route' => 'admin_v2_cloud_video_switch',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            if (0 === strpos($pathinfo, '/admin/v2/edu_cloud/video_')) {
                                // admin_v2_setting_cloud_video_watermark_upload
                                if ('/admin/v2/edu_cloud/video_watermark/upload' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::videoWatermarkUploadAction',  '_route' => 'admin_v2_setting_cloud_video_watermark_upload',  '_permission' =>   array (    0 => 'admin_v2_edu_cloud_video_overview',  ),  '_h5' => false,);
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_setting_cloud_video_watermark_upload;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_setting_cloud_video_watermark_upload:

                                // admin_v2_setting_cloud_video_watermark_remove
                                if ('/admin/v2/edu_cloud/video_watermark/remove' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::videoWatermarkRemoveAction',  '_route' => 'admin_v2_setting_cloud_video_watermark_remove',  '_permission' =>   array (    0 => 'admin_v2_edu_cloud_video_overview',  ),  '_h5' => false,);
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_setting_cloud_video_watermark_remove;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_setting_cloud_video_watermark_remove:

                                // admin_v2_setting_cloud_video_embed_watermark_upload
                                if ('/admin/v2/edu_cloud/video_embed_watermark/upload' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::videoEmbedWatermarkUploadAction',  '_route' => 'admin_v2_setting_cloud_video_embed_watermark_upload',  '_permission' =>   array (    0 => 'admin_v2_edu_cloud_video_overview',  ),  '_h5' => false,);
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_setting_cloud_video_embed_watermark_upload;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_setting_cloud_video_embed_watermark_upload:

                                // admin_v2_setting_cloud_video_embed_watermark_remove
                                if ('/admin/v2/edu_cloud/video_embed_watermark/remove' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::videoWatermarkRemoveAction',  '_route' => 'admin_v2_setting_cloud_video_embed_watermark_remove',  '_permission' =>   array (    0 => 'admin_v2_edu_cloud_video_overview',  ),  '_h5' => false,);
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_setting_cloud_video_embed_watermark_remove;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_setting_cloud_video_embed_watermark_remove:

                            }

                        }

                        // admin_v2_cloud_normal_video_delete
                        if ('/admin/v2/edu_cloud/normal/video/delete' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::deleteVideoAction',  '_route' => 'admin_v2_cloud_normal_video_delete',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        if (0 === strpos($pathinfo, '/admin/v2/edu_cloud/edulive')) {
                            // admin_v2_edu_cloud_edulive_overview
                            if ('/admin/v2/edu_cloud/edulive/overview' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::liveOverviewAction',  '_route' => 'admin_v2_edu_cloud_edulive_overview',  '_permission' =>   array (    0 => 'admin_v2_cloud_edulive',  ),  '_h5' => false,);
                            }

                            // admin_v2_edu_cloud_edulive_setting
                            if ('/admin/v2/edu_cloud/edulive/setting' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::liveSettingAction',  '_route' => 'admin_v2_edu_cloud_edulive_setting',  '_permission' =>   array (    0 => 'admin_v2_cloud_edulive',  ),  '_h5' => false,);
                            }

                            // admin_v2_cloud_edulive_logo_crop
                            if (preg_match('#^/admin/v2/edu_cloud/edulive/(?P<type>[^/]++)/logo/crop$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_cloud_edulive_logo_crop']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::logoCropAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/v2/edu_cloud/email')) {
                            // admin_v2_edu_cloud_email_overview
                            if ('/admin/v2/edu_cloud/email/overview' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::emailOverviewAction',  '_route' => 'admin_v2_edu_cloud_email_overview',  '_permission' =>   array (    0 => 'admin_v2_cloud_email',  ),  '_h5' => false,);
                            }

                            // admin_v2_edu_cloud_email_setting
                            if ('/admin/v2/edu_cloud/email/setting' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::emailSettingAction',  '_route' => 'admin_v2_edu_cloud_email_setting',  '_permission' =>   array (    0 => 'admin_v2_cloud_email',  ),  '_h5' => false,);
                            }

                            // admin_v2_edu_cloud_email_switch
                            if ('/admin/v2/edu_cloud/email/switch' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::emailSwitchAction',  '_route' => 'admin_v2_edu_cloud_email_switch',  '_permission' =>   array (    0 => 'admin_v2_cloud_email',  ),  '_h5' => false,);
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/v2/edu_cloud/sms')) {
                            // admin_v2_edu_cloud_sms_overview
                            if ('/admin/v2/edu_cloud/sms/overview' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\CloudServerController::smsOverviewAction',  '_route' => 'admin_v2_edu_cloud_sms_overview',  '_permission' =>   array (    0 => 'admin_v2_cloud_sms',  ),  '_h5' => false,);
                            }

                            // admin_v2_edu_cloud_sms_setting
                            if ('/admin/v2/edu_cloud/sms/setting' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::smsSettingAction',  '_route' => 'admin_v2_edu_cloud_sms_setting',  '_permission' =>   array (    0 => 'admin_v2_edu_cloud_sms_setting',  ),  '_h5' => false,);
                            }

                            // admin_v2_edu_cloud_sms_status
                            if ('/admin/v2/edu_cloud/sms/status' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::smsStatusAction',  '_route' => 'admin_v2_edu_cloud_sms_status',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/v2/edu_cloud/search')) {
                            // admin_v2_edu_cloud_search_overview
                            if ('/admin/v2/edu_cloud/search/overview' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::searchOverviewAction',  '_route' => 'admin_v2_edu_cloud_search_overview',  '_permission' =>   array (    0 => 'admin_v2_edu_cloud_search_overview',  ),  '_h5' => false,);
                            }

                            // admin_v2_edu_cloud_search_open
                            if ('/admin/v2/edu_cloud/search/open' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::searchOpenAction',  '_route' => 'admin_v2_edu_cloud_search_open',  '_permission' =>   array (    0 => 'admin_v2_cloud_search',  ),  '_h5' => false,);
                            }

                            // admin_v2_edu_cloud_search_setting
                            if ('/admin/v2/edu_cloud/search/setting' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::searchSettingAction',  '_route' => 'admin_v2_edu_cloud_search_setting',  '_permission' =>   array (    0 => 'admin_v2_edu_cloud_search_setting',  ),  '_h5' => false,);
                            }

                            // admin_v2_edu_cloud_search_clause
                            if ('/admin/v2/edu_cloud/search/clause' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::searchClauseAction',  '_route' => 'admin_v2_edu_cloud_search_clause',  '_permission' =>   array (    0 => 'admin_v2_cloud_search',  ),  '_h5' => false,);
                            }

                            // admin_v2_edu_cloud_search_close
                            if ('/admin/v2/edu_cloud/search/close' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::searchCloseAction',  '_route' => 'admin_v2_edu_cloud_search_close',  '_permission' =>   array (    0 => 'admin_v2_cloud_search',  ),  '_h5' => false,);
                            }

                            // admin_v2_edu_cloud_search_reapply
                            if ('/admin/v2/edu_cloud/search/reapply' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::searchReapplyAction',  '_route' => 'admin_v2_edu_cloud_search_reapply',  '_permission' =>   array (    0 => 'admin_v2_cloud_search',  ),  '_h5' => false,);
                            }

                            // admin_v2_edu_cloud_search_result_type
                            if ('/admin/v2/edu_cloud/search_result/type' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::setSearchResultTypeAction',  '_route' => 'admin_v2_edu_cloud_search_result_type',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/v2/edu_cloud/a')) {
                            // admin_v2_edu_cloud_apply_for_sms
                            if ('/admin/v2/edu_cloud/apply_for_sms' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::applyForSmsAction',  '_route' => 'admin_v2_edu_cloud_apply_for_sms',  '_permission' =>   array (    0 => 'admin_v2_cloud_sms',  ),  '_h5' => false,);
                            }

                            if (0 === strpos($pathinfo, '/admin/v2/edu_cloud/app/im')) {
                                // admin_v2_app_im
                                if ('/admin/v2/edu_cloud/app/im' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::appImAction',  '_route' => 'admin_v2_app_im',  '_permission' =>   array (    0 => 'admin_v2_app_im',  ),  '_h5' => false,);
                                }

                                // admin_v2_app_im_update
                                if ('/admin/v2/edu_cloud/app/im/update' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::appImUpdateStatusAction',  '_route' => 'admin_v2_app_im_update',  '_permission' =>   array (    0 => 'admin_v2_app_im',  ),  '_h5' => false,);
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_app_im_update;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_app_im_update:

                            }

                            // admin_v2_edu_cloud_sms_no_message
                            if ('/admin/v2/edu_cloud/admin_edu_cloud_sms_no_message' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::smsNoMessageAction',  '_route' => 'admin_v2_edu_cloud_sms_no_message',  '_permission' =>   array (    0 => 'admin_v2_cloud_sms',  ),  '_h5' => false,);
                            }

                        }

                        // admin_v2_edu_cloud_consult_setting
                        if ('/admin/v2/edu_cloud/consult/setting' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\EduCloudController::consultSettingAction',  '_route' => 'admin_v2_edu_cloud_consult_setting',  '_permission' =>   array (    0 => 'admin_v2_edu_cloud_consult_setting',  ),  '_h5' => false,);
                        }

                        // admin_v2_cloud_data_lab
                        if ('/admin/v2/edu_cloud/data/lab' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\DataLabController::dataAction',  '_route' => 'admin_v2_cloud_data_lab',  '_permission' =>   array (    0 => 'admin_v2_cloud_data_lab',  ),  '_h5' => false,);
                        }

                        if (0 === strpos($pathinfo, '/admin/v2/edu_cloud/data/lab/setting')) {
                            // admin_v2_cloud_data_lab_setting
                            if ('/admin/v2/edu_cloud/data/lab/setting' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\DataLabController::setttingAction',  '_route' => 'admin_v2_cloud_data_lab_setting',  '_permission' =>   array (    0 => 'admin_v2_cloud_data_lab_setting',  ),  '_h5' => false,);
                            }

                            // admin_v2_cloud_data_lab_setting_enable_modal
                            if ('/admin/v2/edu_cloud/data/lab/setting/modal/enable' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\DataLabController::enableAction',  '_route' => 'admin_v2_cloud_data_lab_setting_enable_modal',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // admin_v2_cloud_data_lab_setting_disable_modal
                            if ('/admin/v2/edu_cloud/data/lab/setting/modal/disable' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\DataLabController::disableAction',  '_route' => 'admin_v2_cloud_data_lab_setting_disable_modal',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                        }

                        elseif (0 === strpos($pathinfo, '/admin/v2/edu_cloud/f')) {
                            // admin_v2_cloud_face_identify_setting
                            if ('/admin/v2/edu_cloud/face_identify/setting' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\FeatureLabController::faceIdentifyAction',  '_route' => 'admin_v2_cloud_face_identify_setting',  '_permission' =>   array (    0 => 'admin_v2_cloud_face_identify',  ),  '_h5' => false,);
                            }

                            if (0 === strpos($pathinfo, '/admin/v2/edu_cloud/facein')) {
                                if (0 === strpos($pathinfo, '/admin/v2/edu_cloud/facein/user_face')) {
                                    // admin_v2_edu_cloud_facein_overview
                                    if ('/admin/v2/edu_cloud/facein/user_face' === $pathinfo) {
                                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\FaceInspectionController::overviewAction',  '_route' => 'admin_v2_edu_cloud_facein_overview',  '_permission' =>   array (    0 => 'admin_v2_cloud_facein',  ),  '_h5' => false,);
                                    }

                                    // admin_v2_edu_cloud_facein_useface_detail
                                    if (preg_match('#^/admin/v2/edu_cloud/facein/user_face/(?P<userId>[^/]++)/detail$#sD', $pathinfo, $matches)) {
                                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_edu_cloud_facein_useface_detail']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\FaceInspectionController::userFaceDetailAction',  '_permission' =>   array (    0 => 'admin_v2_cloud_facein',  ),  '_h5' => false,));
                                    }

                                }

                                // admin_v2_edu_cloud_facein_update
                                if ('/admin/v2/edu_cloud/facein/update' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\FaceInspectionController::updateAction',  '_route' => 'admin_v2_edu_cloud_facein_update',  '_permission' =>   array (    0 => 'admin_v2_cloud_facein',  ),  '_h5' => false,);
                                    if (!in_array($requestMethod, ['POST'])) {
                                        $allow = array_merge($allow, ['POST']);
                                        goto not_admin_v2_edu_cloud_facein_update;
                                    }

                                    return $ret;
                                }
                                not_admin_v2_edu_cloud_facein_update:

                                // admin_v2_edu_cloud_facein_setting
                                if ('/admin/v2/edu_cloud/facein/setting' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\FaceInspectionController::settingAction',  '_route' => 'admin_v2_edu_cloud_facein_setting',  '_permission' =>   array (    0 => 'admin_v2_cloud_facein',  ),  '_h5' => false,);
                                }

                                // admin_v2_edu_cloud_facein_generate_link
                                if ('/admin/v2/edu_cloud/facein/generate/link' === $pathinfo) {
                                    return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\FaceInspectionController::generateLinkAction',  '_route' => 'admin_v2_edu_cloud_facein_generate_link',  '_permission' =>   array (    0 => 'admin_v2_cloud_facein',  ),  '_h5' => false,);
                                }

                            }

                            // admin_v2_cloud_feature_lab_setting
                            if ('/admin/v2/edu_cloud/feature/lab' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\CloudCenter\\FeatureLabController::settingAction',  '_route' => 'admin_v2_cloud_feature_lab_setting',  '_permission' =>   array (    0 => 'admin_v2_cloud_feature_lab',  ),  '_h5' => false,);
                            }

                        }

                    }

                    elseif (0 === strpos($pathinfo, '/admin/v2/job')) {
                        // admin_v2_jobs
                        if ('/admin/v2/jobs' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\JobController::indexAction',  '_route' => 'admin_v2_jobs',  '_permission' =>   array (    0 => 'admin_v2_jobs',  ),  '_h5' => false,);
                        }

                        // admin_v2_job_logs
                        if ('/admin/v2/job/logs' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\JobController::logsAction',  '_route' => 'admin_v2_job_logs',  '_permission' =>   array (    0 => 'admin_v2_job_logs',  ),  '_h5' => false,);
                        }

                        // admin_v2_job_fired_logs
                        if (preg_match('#^/admin/v2/job/(?P<id>[^/]++)/fire/(?P<jobFiredId>[^/]++)/logs$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_job_fired_logs']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\JobController::fireLogsAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // admin_v2_job_set_next_exec_time
                        if (preg_match('#^/admin/v2/job/(?P<id>[^/]++)/set_next_exec_time$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_job_set_next_exec_time']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\JobController::setNextExecTimeAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // admin_v2_job_fires
                        if (preg_match('#^/admin/v2/job/(?P<id>[^/]++)/fires$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_job_fires']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\JobController::firesAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // admin_v2_job_enabled
                        if (preg_match('#^/admin/v2/job/(?P<id>[^/]++)/enabled$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_job_enabled']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\JobController::enabledAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_v2_job_enabled;
                            }

                            return $ret;
                        }
                        not_admin_v2_job_enabled:

                        // admin_v2_job_disabled
                        if (preg_match('#^/admin/v2/job/(?P<id>[^/]++)/disabled$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_job_disabled']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\JobController::disabledAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_admin_v2_job_disabled;
                            }

                            return $ret;
                        }
                        not_admin_v2_job_disabled:

                    }

                    // admin_v2_xapi_setting
                    if ('/admin/v2/xapi/setting' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\XapiController::settingAction',  '_route' => 'admin_v2_xapi_setting',  '_permission' =>   array (    0 => 'admin_v2_xapi_setting',  ),  '_h5' => false,);
                    }

                    if (0 === strpos($pathinfo, '/admin/v2/xapi/statement')) {
                        // admin_v2_xapi_statement_list
                        if ('/admin/v2/xapi/statement_list' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\XapiController::indexAction',  '_route' => 'admin_v2_xapi_statement_list',  '_permission' =>   array (    0 => 'admin_v2_xapi_statement_list',  ),  '_h5' => false,);
                        }

                        // admin_v2_xapi_statement_detail
                        if (preg_match('#^/admin/v2/xapi/statement/(?P<id>[^/]++)/detail$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'admin_v2_xapi_statement_detail']), array (  '_controller' => 'AppBundle\\Controller\\AdminV2\\Developer\\XapiController::detailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                    }

                }

            }

        }

        elseif (0 === strpos($pathinfo, '/t')) {
            // bazinga_jstranslation_js
            if (0 === strpos($pathinfo, '/translations') && preg_match('#^/translations(?:/(?P<domain>[\\w]+)(?:\\.(?P<_format>js|json))?)?$#sD', $pathinfo, $matches)) {
                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'bazinga_jstranslation_js']), array (  '_controller' => 'bazinga.jstranslation.controller:getTranslationsAction',  'domain' => 'messages',  '_format' => 'js',  '_permission' =>   array (  ),  '_h5' => false,));
                if (!in_array($canonicalMethod, ['GET'])) {
                    $allow = array_merge($allow, ['GET']);
                    goto not_bazinga_jstranslation_js;
                }

                return $ret;
            }
            not_bazinga_jstranslation_js:

            // try_export
            if (0 === strpos($pathinfo, '/try/export') && preg_match('#^/try/export/(?P<name>[^/]++)(?:/(?P<limit>[^/]++))?$#sD', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, ['_route' => 'try_export']), array (  '_controller' => 'AppBundle\\Controller\\Export\\ExportController::tryExportAction',  'limit' => '',  '_permission' =>   array (  ),  '_h5' => false,));
            }

            // workshow_top
            if ('/top' === $pathinfo) {
                return array (  '_controller' => 'WorkshowPlugin\\Controller\\AuthController::headerAction',  '_route' => 'workshow_top',  '_permission' =>   array (  ),  '_h5' => false,);
            }

            if (0 === strpos($pathinfo, '/tag')) {
                // tag
                if ('/tag' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\TagController::indexAction',  '_route' => 'tag',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // tag_all
                if ('/tag/all_jsonm' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\TagController::allAction',  '_route' => 'tag_all',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // tag_match
                if ('/tag/match_jsonp' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\TagController::matchAction',  '_route' => 'tag_match',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // tag_show
                if (preg_match('#^/tag/(?P<name>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'tag_show']), array (  '_controller' => 'AppBundle\\Controller\\TagController::showAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

            }

            elseif (0 === strpos($pathinfo, '/task')) {
                // live_statistics_json_data
                if (preg_match('#^/task/(?P<taskId>[^/]++)/live_statistics/(?P<liveId>[^/]++)/json_data$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'live_statistics_json_data']), array (  '_controller' => 'AppBundle\\Controller\\LiveStatistics\\CourseLiveStatisticsController::jsonDataAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // live_statistics_modal
                if (preg_match('#^/task/(?P<taskId>[^/]++)/live_statistics/(?P<liveId>[^/]++)/modal/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'live_statistics_modal']), array (  '_controller' => 'AppBundle\\Controller\\LiveStatistics\\CourseLiveStatisticsController::modalAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

            }

            elseif (0 === strpos($pathinfo, '/teacher')) {
                // teacher
                if ('/teacher' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\TeacherController::indexAction',  '_route' => 'teacher',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // teacher_search
                if ('/teacher/search' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\TeacherController::searchAction',  '_route' => 'teacher_search',  '_permission' =>   array (  ),  '_h5' => false,);
                }

            }

            elseif (0 === strpos($pathinfo, '/testpaper')) {
                // testpaper_check
                if (preg_match('#^/testpaper/(?P<resultId>[^/]++)/check$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'testpaper_check']), array (  '_controller' => 'AppBundle\\Controller\\Course\\TestpaperManageController::checkForwordAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // testpaper_show
                if (preg_match('#^/testpaper/(?P<resultId>[^/]++)/show$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'testpaper_show']), array (  '_controller' => 'AppBundle\\Controller\\Testpaper\\TestpaperController::doTestAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                if (0 === strpos($pathinfo, '/testpaper/result')) {
                    // testpaper_result_show
                    if (preg_match('#^/testpaper/result/(?P<answerRecordId>[^/]++)/show$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'testpaper_result_show']), array (  '_controller' => 'AppBundle\\Controller\\Testpaper\\TestpaperController::showResultAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // testpaper_result_submit
                    if (preg_match('#^/testpaper/result/(?P<resultId>[^/]++)/submit$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'testpaper_result_submit']), array (  '_controller' => 'AppBundle\\Controller\\Testpaper\\TestpaperController::submitTestAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_testpaper_result_submit;
                        }

                        return $ret;
                    }
                    not_testpaper_result_submit:

                    // testpaper_finish
                    if (preg_match('#^/testpaper/result/(?P<resultId>[^/]++)/finish$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'testpaper_finish']), array (  '_controller' => 'AppBundle\\Controller\\Testpaper\\TestpaperController::finishTestAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // testpaper_do_suspend
                    if (preg_match('#^/testpaper/result/(?P<resultId>[^/]++)/suspend$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'testpaper_do_suspend']), array (  '_controller' => 'AppBundle\\Controller\\Testpaper\\TestpaperController::testSuspendAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_testpaper_do_suspend;
                        }

                        return $ret;
                    }
                    not_testpaper_do_suspend:

                }

                // testpaper_re_edit
                if (0 === strpos($pathinfo, '/testpaper/re_edit') && preg_match('#^/testpaper/re_edit/(?P<token>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'testpaper_re_edit']), array (  '_controller' => 'AppBundle\\Controller\\Testpaper\\ManageController::reEditAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // testpaper_import_save
                if (preg_match('#^/testpaper/(?P<token>[^/]++)/import_save$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'testpaper_import_save']), array (  '_controller' => 'AppBundle\\Controller\\Testpaper\\ManageController::saveImportTestpaperAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_testpaper_import_save;
                    }

                    return $ret;
                }
                not_testpaper_import_save:

            }

            elseif (0 === strpos($pathinfo, '/thread')) {
                // group_thread_adopt
                if (preg_match('#^/thread/(?P<postId>[^/]++)/adopt$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'group_thread_adopt']), array (  '_controller' => 'AppBundle\\Controller\\GroupThreadController::adoptAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // thread_jump
                if (preg_match('#^/thread/(?P<threadId>[^/]++)/jump$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'thread_jump']), array (  '_controller' => 'AppBundle\\Controller\\ThreadController::jumpAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // thread_post_jump
                if (preg_match('#^/thread/(?P<threadId>[^/]++)/post/(?P<postId>[^/]++)/jump$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'thread_post_jump']), array (  '_controller' => 'AppBundle\\Controller\\ThreadController::postJumpAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // thread_post
                if (preg_match('#^/thread/(?P<threadId>[^/]++)/post$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'thread_post']), array (  '_controller' => 'AppBundle\\Controller\\ThreadController::postAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // thread_post_reply
                if (preg_match('#^/thread/(?P<threadId>[^/]++)/post/(?P<postId>[^/]++)/$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'thread_post_reply']), array (  '_controller' => 'AppBundle\\Controller\\ThreadController::postReplyAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_thread_post_reply;
                    }

                    return $ret;
                }
                not_thread_post_reply:

                // thread_post_subposts
                if (preg_match('#^/thread/(?P<threadId>[^/]++)/post/(?P<postId>[^/]++)/subposts$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'thread_post_subposts']), array (  '_controller' => 'AppBundle\\Controller\\ThreadController::subpostsAction',  'threadId' => 0,  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // thread_post_delete
                if (preg_match('#^/thread/(?P<threadId>[^/]++)/post/(?P<postId>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'thread_post_delete']), array (  '_controller' => 'AppBundle\\Controller\\ThreadController::postDeleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_thread_post_delete;
                    }

                    return $ret;
                }
                not_thread_post_delete:

                // thread_post_up
                if (preg_match('#^/thread/(?P<threadId>[^/]++)/post/(?P<postId>[^/]++)/up$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'thread_post_up']), array (  '_controller' => 'AppBundle\\Controller\\ThreadController::postUpAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_thread_post_up;
                    }

                    return $ret;
                }
                not_thread_post_up:

                // thread_delete
                if (preg_match('#^/thread/(?P<threadId>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'thread_delete']), array (  '_controller' => 'AppBundle\\Controller\\ThreadController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_thread_delete;
                    }

                    return $ret;
                }
                not_thread_delete:

                // thread_set_sticky
                if (preg_match('#^/thread/(?P<threadId>[^/]++)/set_sticky$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'thread_set_sticky']), array (  '_controller' => 'AppBundle\\Controller\\ThreadController::setStickyAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_thread_set_sticky;
                    }

                    return $ret;
                }
                not_thread_set_sticky:

                // thread_cancel_sticky
                if (preg_match('#^/thread/(?P<threadId>[^/]++)/cancel_sticky$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'thread_cancel_sticky']), array (  '_controller' => 'AppBundle\\Controller\\ThreadController::cancelStickyAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_thread_cancel_sticky;
                    }

                    return $ret;
                }
                not_thread_cancel_sticky:

                // thread_set_nice
                if (preg_match('#^/thread/(?P<threadId>[^/]++)/set_nice$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'thread_set_nice']), array (  '_controller' => 'AppBundle\\Controller\\ThreadController::setNiceAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_thread_set_nice;
                    }

                    return $ret;
                }
                not_thread_set_nice:

                // thread_cancel_nice
                if (preg_match('#^/thread/(?P<threadId>[^/]++)/cancel_nice$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'thread_cancel_nice']), array (  '_controller' => 'AppBundle\\Controller\\ThreadController::cancelNiceAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_thread_cancel_nice;
                    }

                    return $ret;
                }
                not_thread_cancel_nice:

                // thread_export_members
                if (preg_match('#^/thread/(?P<threadId>[^/]++)/export/members$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'thread_export_members']), array (  '_controller' => 'AppBundle\\Controller\\Thread\\MemberController::exportAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

            }

        }

        elseif (0 === strpos($pathinfo, '/m')) {
            if (0 === strpos($pathinfo, '/ma')) {
                if (0 === strpos($pathinfo, '/mapi_v2')) {
                    // mapi_order_submit_pay_request
                    if (0 === strpos($pathinfo, '/mapi_v2/order') && preg_match('#^/mapi_v2/order/(?P<id>[^/]++)/submit_pay_request$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'mapi_order_submit_pay_request']), array (  '_controller' => 'Topxia\\MobileBundleV2\\Controller\\MobileOrderController::submitPayRequestAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($canonicalMethod, ['GET', 'POST'])) {
                            $allow = array_merge($allow, ['GET', 'POST']);
                            goto not_mapi_order_submit_pay_request;
                        }

                        return $ret;
                    }
                    not_mapi_order_submit_pay_request:

                    // mapi_mobile_teacher_app
                    if ('/mapi_v2/teacherApp' === $pathinfo) {
                        return array (  '_controller' => 'Topxia\\MobileBundleV2\\Controller\\TeacherAppController::indexAction',  '_route' => 'mapi_mobile_teacher_app',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    if (0 === strpos($pathinfo, '/mapi_v2/pay')) {
                        // topxia_mobile_alipay_notify
                        if (preg_match('#^/mapi_v2/pay/(?P<name>[^/]++)/alipay_notify$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'topxia_mobile_alipay_notify']), array (  '_controller' => 'Topxia\\MobileBundleV2\\Controller\\MobileAlipayController::payNotifyAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // topxia_mobile_alipay_merchant
                        if (preg_match('#^/mapi_v2/pay/(?P<name>[^/]++)/alipay_merchant$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'topxia_mobile_alipay_merchant']), array (  '_controller' => 'Topxia\\MobileBundleV2\\Controller\\MobileAlipayController::payMerchantAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // topxia_mobile_alipay_callback
                        if (preg_match('#^/mapi_v2/pay/(?P<name>[^/]++)/alipay_callback$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'topxia_mobile_alipay_callback']), array (  '_controller' => 'Topxia\\MobileBundleV2\\Controller\\MobileAlipayController::payCallBackAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                    }

                    // topxia_mobile_alipay_pay
                    if ('/mapi_v2/alipay_pay' === $pathinfo) {
                        return array (  '_controller' => 'Topxia\\MobileBundleV2\\Controller\\MobileAlipayController::payAction',  '_route' => 'topxia_mobile_alipay_pay',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    if (0 === strpos($pathinfo, '/mapi_v2/mobile/main')) {
                        // mapi_mobile_esmobile_app
                        if ('/mapi_v2/mobile/main' === $pathinfo) {
                            return array (  '_controller' => 'Topxia\\MobileBundleV2\\Controller\\MobileAppController::indexAction',  '_route' => 'mapi_mobile_esmobile_app',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // mapi_mobile_esmobile_app_version
                        if ('/mapi_v2/mobile/main/version' === $pathinfo) {
                            return array (  '_controller' => 'Topxia\\MobileBundleV2\\Controller\\MobileAppController::versionAction',  '_route' => 'mapi_mobile_esmobile_app_version',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                    }

                    // mapi_mobile_esmobile_app_resource
                    if (0 === strpos($pathinfo, '/mapi_v2/mobile') && preg_match('#^/mapi_v2/mobile/(?P<code>[^/]++)/resource$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'mapi_mobile_esmobile_app_resource']), array (  '_controller' => 'Topxia\\MobileBundleV2\\Controller\\MobileAppController::resourceAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // mapi_mobile_api
                    if (preg_match('#^/mapi_v2/(?P<service>[^/]++)/(?P<method>[^/]++)$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'mapi_mobile_api']), array (  '_controller' => 'Topxia\\MobileBundleV2\\Controller\\MobileApiController::indexAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($canonicalMethod, ['GET', 'POST'])) {
                            $allow = array_merge($allow, ['GET', 'POST']);
                            goto not_mapi_mobile_api;
                        }

                        return $ret;
                    }
                    not_mapi_mobile_api:

                }

                elseif (0 === strpos($pathinfo, '/material')) {
                    if (0 === strpos($pathinfo, '/material/lib')) {
                        // material_lib_browsing
                        if ('/material/lib/browse' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\MaterialLibController::indexAction',  '_route' => 'material_lib_browsing',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // material_lib_show_browsing
                        if ('/material/lib/show/browse' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\MaterialLibController::showMyMaterialLibFormAction',  '_route' => 'material_lib_show_browsing',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        if (0 === strpos($pathinfo, '/material/lib/my/sharing')) {
                            // material_lib_my_sharing
                            if ('/material/lib/my/sharing/show' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\MaterialLibController::showShareFormAction',  '_route' => 'material_lib_my_sharing',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // material_lib_save_sharing
                            if ('/material/lib/my/sharing/save' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\MaterialLibController::saveShareAction',  '_route' => 'material_lib_save_sharing',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // material_lib_my_sharing_detail
                            if ('/material/lib/my/sharing_detail/show' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\MaterialLibController::historyDetailShowAction',  '_route' => 'material_lib_my_sharing_detail',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // material_lib_my_sharing_users
                            if ('/material/lib/my/sharing_users/show' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\MaterialLibController::historyUserShowAction',  '_route' => 'material_lib_my_sharing_users',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // material_lib_show_sharing_history
                            if ('/material/lib/my/sharing/history' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\MaterialLibController::showShareHistoryAction',  '_route' => 'material_lib_show_sharing_history',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // material_lib_cancel_sharing
                            if ('/material/lib/my/sharing/cancel' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\MaterialLibController::cancelShareAction',  '_route' => 'material_lib_cancel_sharing',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                        }

                        // material_lib_save_collection
                        if ('/material/lib/my/collection/save' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\MaterialLibController::collectAction',  '_route' => 'material_lib_save_collection',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // material_lib_my_sharing_contacts
                        if ('/material/lib/recent/contacts' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\MaterialLibController::findMySharingContactsAction',  '_route' => 'material_lib_my_sharing_contacts',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // material_tag_show_match
                        if ('/material/lib/tag/match' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\MaterialLibController::matchAction',  '_route' => 'material_tag_show_match',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // material_lib_file_preview
                        if (0 === strpos($pathinfo, '/material/lib/file') && preg_match('#^/material/lib/file/(?P<fileId>[^/]++)/preview$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'material_lib_file_preview']), array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\MaterialLibController::previewAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // material_lib_file_player
                        if (preg_match('#^/material/lib/(?P<fileId>[^/]++)/player$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'material_lib_file_player']), array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\MaterialLibController::playerAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // material_reconvert
                        if (preg_match('#^/material/lib/(?P<globalId>[^/]++)/reconvert$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'material_reconvert']), array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\MaterialLibController::reconvertAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // material_thumbnail_generate
                        if (preg_match('#^/material/lib/(?P<globalId>[^/]++)/thumbnail/generate$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'material_thumbnail_generate']), array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\MaterialLibController::generateThumbnailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // material_lib_file_detail
                        if (preg_match('#^/material/lib/(?P<fileId>[^/]++)/detail$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'material_lib_file_detail']), array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\MaterialLibController::detailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // material_lib_choose
                        if ('/material/lib/choose' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\MaterialLibController::materialChooseAction',  '_route' => 'material_lib_choose',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                    }

                    elseif (0 === strpos($pathinfo, '/materiallib')) {
                        // material_edit
                        if (preg_match('#^/materiallib/(?P<fileId>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'material_edit']), array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\MaterialLibController::editAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_material_edit;
                            }

                            return $ret;
                        }
                        not_material_edit:

                        // material_download
                        if (preg_match('#^/materiallib/(?P<fileId>[^/]++)/download$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'material_download']), array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\MaterialLibController::downloadAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // material_delete
                        if (preg_match('#^/materiallib/(?P<fileId>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'material_delete']), array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\MaterialLibController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_material_delete;
                            }

                            return $ret;
                        }
                        not_material_delete:

                        // material_unshare
                        if (preg_match('#^/materiallib/(?P<fileId>[^/]++)/unshare$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'material_unshare']), array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\MaterialLibController::unshareAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                    }

                    elseif (0 === strpos($pathinfo, '/materials/batch')) {
                        // material_batch_delete
                        if ('/materials/batch/delete' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\MaterialLibController::batchDeleteAction',  '_route' => 'material_batch_delete',  '_permission' =>   array (  ),  '_h5' => false,);
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_material_batch_delete;
                            }

                            return $ret;
                        }
                        not_material_batch_delete:

                        // material_batch_share
                        if ('/materials/batch/share' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\MaterialLibController::batchShareAction',  '_route' => 'material_batch_share',  '_permission' =>   array (  ),  '_h5' => false,);
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_material_batch_share;
                            }

                            return $ret;
                        }
                        not_material_batch_share:

                        // material_batch_tag_show
                        if ('/materials/batch/tag/show' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\MaterialLibController::batchTagShowAction',  '_route' => 'material_batch_tag_show',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                    }

                    // material_delete_modal_show
                    if ('/materials/delete/show' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\MaterialLibController::deleteModalShowAction',  '_route' => 'material_delete_modal_show',  '_permission' =>   array (  ),  '_h5' => false,);
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_material_delete_modal_show;
                        }

                        return $ret;
                    }
                    not_material_delete_modal_show:

                }

                elseif (0 === strpos($pathinfo, '/marketing/user/login')) {
                    // marketing_user_login
                    if ('/marketing/user/login' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\MarketingUserController::loginAction',  '_route' => 'marketing_user_login',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // user_login_marketing
                    if ('/marketing/user/login' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\MarketingUserController::loginAction',  '_route' => 'user_login_marketing',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

                // marketing_activity
                if (0 === strpos($pathinfo, '/marketing/activity') && preg_match('#^/marketing/activity/(?P<activityId>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'marketing_activity']), array (  '_controller' => 'AppBundle\\Controller\\MarketingController::activityAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

            }

            elseif (0 === strpos($pathinfo, '/me')) {
                if (0 === strpos($pathinfo, '/media')) {
                    // media_play
                    if (preg_match('#^/media/(?P<mediaId>[^/]++)/play$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'media_play']), array (  '_controller' => 'AppBundle\\Controller\\Media\\IndexController::playAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // media_subtitle_preview
                    if (preg_match('#^/media/(?P<mediaId>[^/]++)/subtitles/preview$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'media_subtitle_preview']), array (  '_controller' => 'AppBundle\\Controller\\SubtitleController::previewAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // media_subtitle_manage
                    if (preg_match('#^/media/(?P<mediaId>[^/]++)/subtitles/manage$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'media_subtitle_manage']), array (  '_controller' => 'AppBundle\\Controller\\SubtitleController::manageAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // media_subtitle_list
                    if (preg_match('#^/media/(?P<mediaId>[^/]++)/subtitles$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'media_subtitle_list']), array (  '_controller' => 'AppBundle\\Controller\\SubtitleController::listAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // media_subtitle_create
                    if (preg_match('#^/media/(?P<mediaId>[^/]++)/subtitle/create$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'media_subtitle_create']), array (  '_controller' => 'AppBundle\\Controller\\SubtitleController::createAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_media_subtitle_create;
                        }

                        return $ret;
                    }
                    not_media_subtitle_create:

                    // media_subtitle_delete
                    if (preg_match('#^/media/(?P<mediaId>[^/]++)/subtitle/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'media_subtitle_delete']), array (  '_controller' => 'AppBundle\\Controller\\SubtitleController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_media_subtitle_delete;
                        }

                        return $ret;
                    }
                    not_media_subtitle_delete:

                    // media_subtitle_manage_dialog
                    if ('/media/subtitles/manage/dialog' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\SubtitleController::manageDialogAction',  '_route' => 'media_subtitle_manage_dialog',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // media_materiallib_choose
                    if ('/media/materiallib/choose' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\FileChooserController::materialChooseAction',  '_route' => 'media_materiallib_choose',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // media_materiallib_contacts
                    if ('/media/materiallib/contacts' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\FileChooserController::findMySharingContactsAction',  '_route' => 'media_materiallib_contacts',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    if (0 === strpos($pathinfo, '/media/course')) {
                        // media_course_file_choose
                        if (0 === strpos($pathinfo, '/media/coursefile') && preg_match('#^/media/coursefile/(?P<courseId>[^/]++)/choose$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'media_course_file_choose']), array (  '_controller' => 'AppBundle\\Controller\\FileChooserController::courseFileChooseAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // media_video_import
                        if (preg_match('#^/media/course/(?P<courseId>[^/]++)/import$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'media_video_import']), array (  '_controller' => 'AppBundle\\Controller\\FileChooserController::importAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                    }

                }

                elseif (0 === strpos($pathinfo, '/message')) {
                    // message_create
                    if (0 === strpos($pathinfo, '/message/create') && preg_match('#^/message/create/(?P<toId>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'message_create']), array (  '_controller' => 'AppBundle\\Controller\\MessageController::createAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // message
                    if ('/message' === $trimmedPathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\MessageController::indexAction',  '_route' => 'message',  '_permission' =>   array (  ),  '_h5' => false,);
                        if ('/' === substr($pathinfo, -1)) {
                            // no-op
                        } elseif ('GET' !== $canonicalMethod) {
                            goto not_message;
                        } else {
                            return array_replace($ret, $this->redirect($rawPathinfo.'/', 'message'));
                        }

                        return $ret;
                    }
                    not_message:

                    // message_check_receiver
                    if ('/message/check/receiver' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\MessageController::checkReceiverAction',  '_route' => 'message_check_receiver',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    if (0 === strpos($pathinfo, '/message/conversation')) {
                        // message_conversation_show
                        if (preg_match('#^/message/conversation/(?P<conversationId>[^/]++)$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'message_conversation_show']), array (  '_controller' => 'AppBundle\\Controller\\MessageController::showConversationAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // message_conversation_delete
                        if (preg_match('#^/message/conversation/(?P<conversationId>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'message_conversation_delete']), array (  '_controller' => 'AppBundle\\Controller\\MessageController::deleteConversationAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_message_conversation_delete;
                            }

                            return $ret;
                        }
                        not_message_conversation_delete:

                        // message_delete
                        if (preg_match('#^/message/conversation/(?P<conversationId>[^/]++)/message/(?P<messageId>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'message_delete']), array (  '_controller' => 'AppBundle\\Controller\\MessageController::deleteConversationMessageAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_message_delete;
                            }

                            return $ret;
                        }
                        not_message_delete:

                    }

                    elseif (0 === strpos($pathinfo, '/message/send')) {
                        // message_send
                        if ('/message/send' === $trimmedPathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\MessageController::sendAction',  '_route' => 'message_send',  '_permission' =>   array (  ),  '_h5' => false,);
                            if ('/' === substr($pathinfo, -1)) {
                                // no-op
                            } elseif ('GET' !== $canonicalMethod) {
                                goto not_message_send;
                            } else {
                                return array_replace($ret, $this->redirect($rawPathinfo.'/', 'message_send'));
                            }

                            return $ret;
                        }
                        not_message_send:

                        // message_send_to_receiver
                        if (preg_match('#^/message/send/(?P<receiverId>[^/]++)/to/receiver/?$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'message_send_to_receiver']), array (  '_controller' => 'AppBundle\\Controller\\MessageController::sendToAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if ('/' === substr($pathinfo, -1)) {
                                // no-op
                            } elseif ('GET' !== $canonicalMethod) {
                                goto not_message_send_to_receiver;
                            } else {
                                return array_replace($ret, $this->redirect($rawPathinfo.'/', 'message_send_to_receiver'));
                            }

                            return $ret;
                        }
                        not_message_send_to_receiver:

                    }

                }

                // member_operation_record
                if (0 === strpos($pathinfo, '/member') && preg_match('#^/member/(?P<operatType>[^/]++)/record/(?P<targetType>[^/]++)/(?P<targetId>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'member_operation_record']), array (  '_controller' => 'AppBundle\\Controller\\MemberOperationRecordController::showRecordAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

            }

            elseif (0 === strpos($pathinfo, '/my')) {
                if (0 === strpos($pathinfo, '/my/te')) {
                    if (0 === strpos($pathinfo, '/my/teaching')) {
                        // my_teaching_course_sets
                        if (0 === strpos($pathinfo, '/my/teaching/course_sets') && preg_match('#^/my/teaching/course_sets(?:/(?P<filter>[^/]++))?$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'my_teaching_course_sets']), array (  '_controller' => 'AppBundle\\Controller\\My\\CourseSetController::teachingAction',  'filter' => 'normal',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // my_teaching_classrooms
                        if ('/my/teaching/classrooms' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\My\\ClassroomController::teachingAction',  '_route' => 'my_teaching_classrooms',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // my_teaching_open_courses
                        if (0 === strpos($pathinfo, '/my/teaching/open/courses') && preg_match('#^/my/teaching/open/courses(?:/(?P<filter>[^/]++))?$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'my_teaching_open_courses']), array (  '_controller' => 'AppBundle\\Controller\\My\\OpenCourseController::teachingAction',  'filter' => 'open',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // my_teaching_threads
                        if (0 === strpos($pathinfo, '/my/teaching/threads') && preg_match('#^/my/teaching/threads/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'my_teaching_threads']), array (  '_controller' => 'AppBundle\\Controller\\My\\ThreadController::teachingAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // my_teaching_live_calendar
                        if ('/my/teaching/live/calendar' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\My\\CourseSetController::teachingLivesCalendarAction',  '_route' => 'my_teaching_live_calendar',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                    }

                    // my_testpaper_check_list
                    if ('/my/testpaper/check' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\My\\TestpaperController::checkListAction',  '_route' => 'my_testpaper_check_list',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // my_testpaper_list
                    if ('/my/testpaper/list' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\My\\TestpaperController::listAction',  '_route' => 'my_testpaper_list',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

                // my_live_courses_learning
                if ('/my/learning/live' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\My\\CourseSetController::livesAction',  '_route' => 'my_live_courses_learning',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                if (0 === strpos($pathinfo, '/my/question')) {
                    // my_favorite_question_list
                    if ('/my/question/favorite/list' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\My\\QuestionController::favoriteListAction',  '_route' => 'my_favorite_question_list',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // my_favorite_question_preview
                    if (preg_match('#^/my/question/(?P<id>[^/]++)/favorite/preview$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'my_favorite_question_preview']), array (  '_controller' => 'AppBundle\\Controller\\My\\QuestionController::previewAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // my_question_favorite
                    if (preg_match('#^/my/question/(?P<questionId>[^/]++)/favorite$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'my_question_favorite']), array (  '_controller' => 'AppBundle\\Controller\\My\\QuestionController::favoriteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // my_question_unfavorite
                    if (0 === strpos($pathinfo, '/my/question/unfavorite') && preg_match('#^/my/question/unfavorite/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'my_question_unfavorite']), array (  '_controller' => 'AppBundle\\Controller\\My\\QuestionController::unFavoriteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                }

                elseif (0 === strpos($pathinfo, '/my/homework')) {
                    // my_homework_check_list
                    if (0 === strpos($pathinfo, '/my/homework/check') && preg_match('#^/my/homework/check(?:/(?P<status>[^/]++))?$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'my_homework_check_list']), array (  '_controller' => 'AppBundle\\Controller\\My\\HomeworkController::checkListAction',  'status' => 'reviewing',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // my_homework_list
                    if (preg_match('#^/my/homework/(?P<status>[^/]++)/list$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'my_homework_list']), array (  '_controller' => 'AppBundle\\Controller\\My\\HomeworkController::listAction',  'status' => 'finished',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                }

                elseif (0 === strpos($pathinfo, '/my/order')) {
                    // my_orders
                    if ('/my/orders' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\My\\OrderController::indexAction',  '_route' => 'my_orders',  '_permission' =>   array (  ),  '_h5' => true,);
                    }

                    if (0 === strpos($pathinfo, '/my/order_refund')) {
                        // my_order_refunds
                        if ('/my/order_refunds' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\My\\OrderRefundController::indexAction',  '_route' => 'my_order_refunds',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // my_order_refund_detail
                        if (preg_match('#^/my/order_refund/(?P<id>[^/]++)/detail$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'my_order_refund_detail']), array (  '_controller' => 'AppBundle\\Controller\\My\\OrderRefundController::detailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // my_order_refund_apply
                        if (preg_match('#^/my/order_refund/(?P<id>[^/]++)/apply$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'my_order_refund_apply']), array (  '_controller' => 'AppBundle\\Controller\\My\\OrderRefundController::applyRefundAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                    }

                    // my_order_cancel
                    if (preg_match('#^/my/order/(?P<id>[^/]++)/cancel$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'my_order_cancel']), array (  '_controller' => 'AppBundle\\Controller\\My\\OrderController::cancelAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_my_order_cancel;
                        }

                        return $ret;
                    }
                    not_my_order_cancel:

                    // web_user_order_detail
                    if (preg_match('#^/my/order/(?P<id>[^/]++)/detail$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'web_user_order_detail']), array (  '_controller' => 'AppBundle\\Controller\\My\\OrderController::detailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                }

                // my_refunds
                if ('/my/refunds' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\My\\OrderController::refundsAction',  '_route' => 'my_refunds',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // income_records
                if ('/my/income_records' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle:My/MoneyRecord:index',  '_route' => 'income_records',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                if (0 === strpos($pathinfo, '/my/invitecode')) {
                    // my_invite_code
                    if ('/my/invitecode' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\My\\CoinController::inviteCodeAction',  '_route' => 'my_invite_code',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // receive_coupon
                    if ('/my/invitecode/receivecoupon' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\My\\CoinController::receiveCouponAction',  '_route' => 'receive_coupon',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

                // payout_records
                if ('/my/payout_records' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle:My/MoneyRecord:payout',  '_route' => 'payout_records',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // my_page_show
                if ('/my/page/show' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\UserController::pageShowAction',  '_route' => 'my_page_show',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // group_thread_check_user
                if ('/mygroup/checkuser' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\GroupThreadController::checkUserAction',  '_route' => 'group_thread_check_user',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // my_bill
                if ('/my/bill' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\My\\CoinController::cashBillAction',  '_route' => 'my_bill',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                if (0 === strpos($pathinfo, '/my/coin')) {
                    // my_coin
                    if ('/my/coin' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\My\\CoinController::indexAction',  '_route' => 'my_coin',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // coin_show
                    if ('/my/coin/show' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\My\\CoinController::showAction',  '_route' => 'coin_show',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

                // my
                if ('/my' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\My\\CourseController::indexAction',  '_route' => 'my',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                if (0 === strpos($pathinfo, '/my/c')) {
                    // my_cards
                    if ('/my/cards' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\My\\CardController::indexAction',  '_route' => 'my_cards',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    if (0 === strpos($pathinfo, '/my/course')) {
                        if (0 === strpos($pathinfo, '/my/courses/l')) {
                            // my_courses_learning
                            if ('/my/courses/learning' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\My\\CourseController::learningAction',  '_route' => 'my_courses_learning',  '_permission' =>   array (  ),  '_h5' => true,);
                            }

                            // my_courses_learned
                            if ('/my/courses/learned' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\My\\CourseController::learnedAction',  '_route' => 'my_courses_learned',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // my_courses_live_calendar
                            if ('/my/courses/live/calendar' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\My\\CourseController::learningLivesCalendarAction',  '_route' => 'my_courses_live_calendar',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                        }

                        // my_course_sets_favorite
                        if ('/my/courses/favorite' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\My\\CourseSetController::favoriteAction',  '_route' => 'my_course_sets_favorite',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // my_course_show
                        if (preg_match('#^/my/course/(?P<id>[^/]++)(?:/(?P<tab>[^/]++))?$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'my_course_show']), array (  '_controller' => 'AppBundle\\Controller\\My\\CourseController::showAction',  'tab' => 'tasks',  '_permission' =>   array (  ),  '_h5' => true,));
                        }

                    }

                    elseif (0 === strpos($pathinfo, '/my/classroom')) {
                        // my_classrooms
                        if ('/my/classrooms' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\My\\ClassroomController::classroomAction',  '_route' => 'my_classrooms',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // my_classroom_discussions
                        if ('/my/classroom/discussions' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\My\\ClassroomController::classroomDiscussionsAction',  '_route' => 'my_classroom_discussions',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // my_classroom_questions
                        if ('/my/classroom/questions' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\My\\ClassroomController::classroomQuestionsAction',  '_route' => 'my_classroom_questions',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                    }

                }

                // my_questions
                if ('/my/questions' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\My\\ThreadController::questionsAction',  '_route' => 'my_questions',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // question_bank_list
                if ('/my/question_banks' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\QuestionBank\\ManageController::indexAction',  '_route' => 'question_bank_list',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // my_discussions
                if ('/my/discussions' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\My\\ThreadController::discussionsAction',  '_route' => 'my_discussions',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                if (0 === strpos($pathinfo, '/my/notebook')) {
                    // my_notebooks
                    if ('/my/notebooks' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\My\\NotebookController::indexAction',  '_route' => 'my_notebooks',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // my_notebook_show
                    if (preg_match('#^/my/notebook/(?P<courseId>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'my_notebook_show']), array (  '_controller' => 'AppBundle\\Controller\\My\\NotebookController::showAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                }

                // my_note_delete
                if (0 === strpos($pathinfo, '/my/note') && preg_match('#^/my/note/(?P<id>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'my_note_delete']), array (  '_controller' => 'AppBundle\\Controller\\My\\NotebookController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_my_note_delete;
                    }

                    return $ret;
                }
                not_my_note_delete:

                if (0 === strpos($pathinfo, '/my/group')) {
                    // my_group_member_center
                    if ('/my/group' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\My\\GroupController::memberCenterAction',  '_route' => 'my_group_member_center',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // my_group_member_join
                    if ('/my/group/join' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\My\\GroupController::memberJoinAction',  '_route' => 'my_group_member_join',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // my_group_member_threads
                    if ('/my/group/threads' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\My\\GroupController::memberThreadsAction',  '_route' => 'my_group_member_threads',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // my_group_member_posts
                    if ('/my/group/posts' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\My\\GroupController::memberPostsAction',  '_route' => 'my_group_member_posts',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // my_group_thread_collecting
                    if ('/my/group/collecting' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\My\\GroupController::collectingAction',  '_route' => 'my_group_thread_collecting',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

                // my_teaching_classroom_threads
                if (0 === strpos($pathinfo, '/my/teaching/classroom/threads') && preg_match('#^/my/teaching/classroom/threads/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'my_teaching_classroom_threads']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomController::classroomThreadsAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // facein_capture_index
                if (0 === strpos($pathinfo, '/my/facein/capture') && preg_match('#^/my/facein/capture/(?P<code>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'facein_capture_index']), array (  '_controller' => 'AppBundle\\Controller\\FaceInspection\\CaptureController::indexAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

            }

            elseif (0 === strpos($pathinfo, '/mobile')) {
                // mobile
                if ('/mobile' === $trimmedPathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\MobileController::indexAction',  '_route' => 'mobile',  '_permission' =>   array (  ),  '_h5' => false,);
                    if ('/' === substr($pathinfo, -1)) {
                        // no-op
                    } elseif ('GET' !== $canonicalMethod) {
                        goto not_mobile;
                    } else {
                        return array_replace($ret, $this->redirect($rawPathinfo.'/', 'mobile'));
                    }

                    return $ret;
                }
                not_mobile:

                if (0 === strpos($pathinfo, '/mobile/download')) {
                    // mobile_download_qrcode
                    if ('/mobile/downloadQrcode' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\MobileController::downloadQrcodeAction',  '_route' => 'mobile_download_qrcode',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // mobile_download
                    if ('/mobile/download' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\MobileController::downloadAction',  '_route' => 'mobile_download',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

                // mobile_userterms
                if ('/mobile/userterms' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\MobileController::usertermsAction',  '_route' => 'mobile_userterms',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // mobile_privacy_Policy
                if ('/mobile/privacy_policy' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\MobileController::privacyPolicyAction',  '_route' => 'mobile_privacy_Policy',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // mobile_qrcode
                if ('/mobile/qrcode' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\CommonController::mobileQrcodeAction',  '_route' => 'mobile_qrcode',  '_permission' =>   array (  ),  '_h5' => false,);
                }

            }

        }

        elseif (0 === strpos($pathinfo, '/g')) {
            // workshow_gallery
            if (0 === strpos($pathinfo, '/gallery') && preg_match('#^/gallery/(?P<workid>[^/]++)$#sD', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, ['_route' => 'workshow_gallery']), array (  '_controller' => 'WorkshowPlugin\\Controller\\AuthController::galleryAction',  '_permission' =>   array (  ),  '_h5' => false,));
            }

            if (0 === strpos($pathinfo, '/group')) {
                // group
                if ('/group' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\GroupController::indexAction',  '_route' => 'group',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // group_search_group
                if ('/group/search_group' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\GroupController::searchAction',  '_route' => 'group_search_group',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // group_add
                if ('/group/add' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\GroupController::addGroupAction',  '_route' => 'group_add',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // group_show
                if (preg_match('#^/group/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'group_show']), array (  '_controller' => 'AppBundle\\Controller\\GroupController::groupIndexAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // group_join
                if (preg_match('#^/group/(?P<id>[^/]++)/join$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'group_join']), array (  '_controller' => 'AppBundle\\Controller\\GroupController::groupJoinAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_group_join;
                    }

                    return $ret;
                }
                not_group_join:

                // group_exit
                if (preg_match('#^/group/(?P<id>[^/]++)/exit$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'group_exit']), array (  '_controller' => 'AppBundle\\Controller\\GroupController::groupExitAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_group_exit;
                    }

                    return $ret;
                }
                not_group_exit:

                if (0 === strpos($pathinfo, '/group/member')) {
                    // group_member
                    if (preg_match('#^/group/member/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'group_member']), array (  '_controller' => 'AppBundle\\Controller\\GroupController::groupMemberAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // group_member_delete
                    if (0 === strpos($pathinfo, '/group/member/delete') && preg_match('#^/group/member/delete/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'group_member_delete']), array (  '_controller' => 'AppBundle\\Controller\\GroupController::deleteMembersAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_group_member_delete;
                        }

                        return $ret;
                    }
                    not_group_member_delete:

                }

                // group_set_admin
                if (0 === strpos($pathinfo, '/group/set/admin') && preg_match('#^/group/set/admin/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'group_set_admin']), array (  '_controller' => 'AppBundle\\Controller\\GroupController::setAdminAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // group_remove_admin
                if (0 === strpos($pathinfo, '/group/remove/admin') && preg_match('#^/group/remove/admin/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'group_remove_admin']), array (  '_controller' => 'AppBundle\\Controller\\GroupController::removeAdminAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // group_set
                if (preg_match('#^/group/(?P<id>[^/]++)/setting/info$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'group_set']), array (  '_controller' => 'AppBundle\\Controller\\GroupController::groupSetAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // group_setLogoCrop
                if (preg_match('#^/group/(?P<id>[^/]++)/setting/logoCrop$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'group_setLogoCrop']), array (  '_controller' => 'AppBundle\\Controller\\GroupController::logoCropAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // group_logo_set
                if (preg_match('#^/group/(?P<id>[^/]++)/setting/logo$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'group_logo_set']), array (  '_controller' => 'AppBundle\\Controller\\GroupController::setGrouplogoAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // group_edit
                if (0 === strpos($pathinfo, '/group/info/edit') && preg_match('#^/group/info/edit/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'group_edit']), array (  '_controller' => 'AppBundle\\Controller\\GroupController::groupEditAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // group_backgroundlogo_set
                if (0 === strpos($pathinfo, '/group/set/backgroundlogo') && preg_match('#^/group/set/backgroundlogo/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'group_backgroundlogo_set']), array (  '_controller' => 'AppBundle\\Controller\\GroupController::setGroupBackgroundLogoAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // group_search
                if (preg_match('#^/group/(?P<id>[^/]++)/serach$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'group_search']), array (  '_controller' => 'AppBundle\\Controller\\GroupThreadController::searchResultAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // group_thread_post
                if (0 === strpos($pathinfo, '/group/thread') && preg_match('#^/group/thread/(?P<groupId>[^/]++)/(?P<threadId>[^/]++)/post$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'group_thread_post']), array (  '_controller' => 'AppBundle\\Controller\\GroupThreadController::postThreadAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // group_thread_add
                if (preg_match('#^/group/(?P<id>[^/]++)/thread/create$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'group_thread_add']), array (  '_controller' => 'AppBundle\\Controller\\GroupThreadController::addThreadAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // group_thread_update
                if (preg_match('#^/group/(?P<id>[^/]++)/thread/(?P<threadId>[^/]++)/update$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'group_thread_update']), array (  '_controller' => 'AppBundle\\Controller\\GroupThreadController::updateThreadAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // group_thread_show
                if (preg_match('#^/group/(?P<id>[^/]++)/thread/(?P<threadId>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'group_thread_show']), array (  '_controller' => 'AppBundle\\Controller\\GroupThreadController::groupThreadIndexAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                if (0 === strpos($pathinfo, '/group/thread')) {
                    // group_thread_setElite
                    if (preg_match('#^/group/thread/(?P<threadId>[^/]++)/setElite$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'group_thread_setElite']), array (  '_controller' => 'AppBundle\\Controller\\GroupThreadController::setEliteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // group_thread_removeElite
                    if (preg_match('#^/group/thread/(?P<threadId>[^/]++)/removeElite$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'group_thread_removeElite']), array (  '_controller' => 'AppBundle\\Controller\\GroupThreadController::removeEliteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // group_thread_setStick
                    if (preg_match('#^/group/thread/(?P<threadId>[^/]++)/setStick$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'group_thread_setStick']), array (  '_controller' => 'AppBundle\\Controller\\GroupThreadController::setStickAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // group_thread_removeStick
                    if (preg_match('#^/group/thread/(?P<threadId>[^/]++)/removeStick$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'group_thread_removeStick']), array (  '_controller' => 'AppBundle\\Controller\\GroupThreadController::removeStickAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // group_thread_closeThread
                    if (preg_match('#^/group/thread/(?P<threadId>[^/]++)/closeThread/(?P<memberId>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'group_thread_closeThread']), array (  '_controller' => 'AppBundle\\Controller\\GroupThreadController::closeThreadAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // group_thread_deletePost
                    if (0 === strpos($pathinfo, '/group/thread/deletePost') && preg_match('#^/group/thread/deletePost/(?P<postId>[^/]++)$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'group_thread_deletePost']), array (  '_controller' => 'AppBundle\\Controller\\GroupThreadController::deletePostAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_group_thread_deletePost;
                        }

                        return $ret;
                    }
                    not_group_thread_deletePost:

                    // group_upload
                    if ('/group/thread/upload' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\GroupThreadController::uploadAction',  '_route' => 'group_upload',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

                // group_thread_post_reply
                if (0 === strpos($pathinfo, '/group/post') && preg_match('#^/group/post/(?P<postId>[^/]++)/reply$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'group_thread_post_reply']), array (  '_controller' => 'AppBundle\\Controller\\GroupThreadController::postReplyAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

            }

            elseif (0 === strpos($pathinfo, '/global_file')) {
                // global_file_document_player
                if (preg_match('#^/global_file/(?P<globalId>[^/]++)/player$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'global_file_document_player']), array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\GlobalFilePlayerController::globalDocumentPlayerAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // global_file_hls_playlist
                if (preg_match('#^/global_file/(?P<globalId>[^/]++)/playlist/(?P<token>[^/\\.]++)\\.m3u8$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'global_file_hls_playlist']), array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\GlobalFilePlayerController::playlistAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // global_file_hls_stream
                if (preg_match('#^/global_file/(?P<globalId>[^/]++)/stream/(?P<level>[^/]++)/(?P<token>[^/\\.]++)\\.m3u8$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'global_file_hls_stream']), array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\GlobalFilePlayerController::streamAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // global_file_hls_clef
                if (preg_match('#^/global_file/(?P<globalId>[^/]++)/clef/(?P<token>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'global_file_hls_clef']), array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\GlobalFilePlayerController::clefAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // global_file_document
                if (preg_match('#^/global_file/(?P<globalId>[^/]++)/document$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'global_file_document']), array (  '_controller' => 'AppBundle\\Controller\\MaterialLib\\GlobalFilePlayerController::documentAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

            }

            // goods_show
            if (0 === strpos($pathinfo, '/goods/show') && preg_match('#^/goods/show/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, ['_route' => 'goods_show']), array (  '_controller' => 'AppBundle\\Controller\\Goods\\GoodsController::showAction',  '_permission' =>   array (  ),  '_h5' => false,));
            }

        }

        // homepage
        if ('' === $trimmedPathinfo) {
            return array (  '_controller' => 'CustomBundle\\Controller\\DefaultController::indexAction',  '_route' => 'homepage',  '_permission' =>   array (  ),  '_h5' => true,);
            if ('/' === substr($pathinfo, -1)) {
                // no-op
            } elseif ('GET' !== $canonicalMethod) {
                goto not_homepage;
            } else {
                return array_replace($ret, $this->redirect($rawPathinfo.'/', 'homepage'));
            }

            return $ret;
        }
        not_homepage:

        if (0 === strpos($pathinfo, '/l')) {
            // ltc
            if (0 === strpos($pathinfo, '/ltc') && preg_match('#^/ltc/(?P<endpoint>[^/]++)$#sD', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, ['_route' => 'ltc']), array (  '_controller' => 'AppBundle\\Controller\\LTC\\RuntimeController::entryPointAction',  '_permission' =>   array (  ),  '_h5' => false,));
            }

            if (0 === strpos($pathinfo, '/live')) {
                // live_jump
                if ('/live/jump' === $pathinfo) {
                    return array (  '_controller' => 'CustomBundle\\Controller\\DefaultController::jumpAction',  '_route' => 'live_jump',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // liveroom_ticket
                if (0 === strpos($pathinfo, '/liveroom') && preg_match('#^/liveroom/(?P<roomId>[^/]++)/ticket$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'liveroom_ticket']), array (  '_controller' => 'AppBundle\\Controller\\LiveroomController::ticketAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // live_auth
                if ('/live/auth' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\LiveAuthController::indexAction',  '_route' => 'live_auth',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // live_course_set_explore
                if ('/live' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\Course\\LiveCourseSetController::exploreAction',  '_route' => 'live_course_set_explore',  '_permission' =>   array (  ),  '_h5' => false,);
                }

            }

            elseif (0 === strpos($pathinfo, '/login')) {
                // login
                if ('/login' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\LoginController::indexAction',  '_route' => 'login',  '_permission' =>   array (  ),  '_h5' => true,);
                }

                // login_check
                if ('/login_check' === $pathinfo) {
                    return array('_route' => 'login_check','_permission' => array (
        ),'_h5' => false);
                }

                // login_ajax
                if ('/login/ajax' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\LoginController::ajaxAction',  '_route' => 'login_ajax',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // login_qrcode
                if ('/login/qrcode' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\LoginController::qrcodeAction',  '_route' => 'login_qrcode',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                if (0 === strpos($pathinfo, '/login/face_token')) {
                    // login_face_token
                    if (preg_match('#^/login/face_token/(?P<token>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'login_face_token']), array (  '_controller' => 'AppBundle\\Controller\\LoginController::faceTokenAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // login_parse_face_token
                    if (0 === strpos($pathinfo, '/login/face_token/parse') && preg_match('#^/login/face_token/parse/(?P<token>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'login_parse_face_token']), array (  '_controller' => 'AppBundle\\Controller\\LoginController::parseFaceTokenAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                }

                elseif (0 === strpos($pathinfo, '/login/bind')) {
                    // login_bind
                    if (preg_match('#^/login/bind/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'login_bind']), array (  '_controller' => 'AppBundle\\Controller\\LoginBindController::indexAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // login_bind_callback
                    if (preg_match('#^/login/bind/(?P<type>[^/]++)/callback$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'login_bind_callback']), array (  '_controller' => 'AppBundle\\Controller\\LoginBindController::callbackAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                }

                // login_check_email
                if ('/login/check/email' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\LoginController::checkEmailAction',  '_route' => 'login_check_email',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // _oauth2_token
                if ('/login/oauth/access_token' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\OAuth2\\TokenController::tokenAction',  '_route' => '_oauth2_token',  '_permission' =>   array (  ),  '_h5' => false,);
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not__oauth2_token;
                    }

                    return $ret;
                }
                not__oauth2_token:

                // login_wechat_qrcode
                if ('/login/wechat/qrcode' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\LoginController::wechatQrcodeAction',  '_route' => 'login_wechat_qrcode',  '_permission' =>   array (  ),  '_h5' => false,);
                }

            }

            // logout
            if ('/logout' === $pathinfo) {
                return array('_route' => 'logout','_permission' => array (
    ),'_h5' => false);
            }

            if (0 === strpos($pathinfo, '/lesson')) {
                // testpaper_do
                if (preg_match('#^/lesson/(?P<lessonId>[^/]++)/testpaper/(?P<testId>[^/]++)/do$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'testpaper_do']), array (  '_controller' => 'AppBundle\\Controller\\Testpaper\\TestpaperController::doTestpaperAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // homework_start_do
                if (preg_match('#^/lesson/(?P<lessonId>[^/]++)/homework/(?P<homeworkId>[^/]++)/startDo$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'homework_start_do']), array (  '_controller' => 'AppBundle\\Controller\\HomeworkController::startDoAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // exercise_start_do
                if (preg_match('#^/lesson/(?P<lessonId>[^/]++)/exercise/(?P<exerciseId>[^/]++)/startDo$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'exercise_start_do']), array (  '_controller' => 'AppBundle\\Controller\\ExerciseController::startDoAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

            }

        }

        elseif (0 === strpos($pathinfo, '/s')) {
            // switch_language
            if ('/switch/language' === $pathinfo) {
                return array (  '_controller' => 'CustomBundle\\Controller\\DefaultController::translateAction',  '_route' => 'switch_language',  '_permission' =>   array (  ),  '_h5' => false,);
            }

            // switch_org
            if (0 === strpos($pathinfo, '/swithOrg') && preg_match('#^/swithOrg/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, ['_route' => 'switch_org']), array (  '_controller' => 'AppBundle\\Controller\\OrgController::switchOrgAction',  '_permission' =>   array (  ),  '_h5' => false,));
            }

            // search
            if ('/search' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\SearchController::indexAction',  '_route' => 'search',  '_permission' =>   array (  ),  '_h5' => false,);
            }

            if (0 === strpos($pathinfo, '/settings')) {
                // settings
                if ('/settings' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\SettingsController::profileAction',  '_route' => 'settings',  '_permission' =>   array (  ),  '_h5' => true,);
                }

                if (0 === strpos($pathinfo, '/settings/a')) {
                    // settings_avatar_crop_modal
                    if ('/settings/avatar/crop/modal' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\SettingsController::avatarCropModalAction',  '_route' => 'settings_avatar_crop_modal',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // settings_avatar_fetch_partner
                    if ('/settings/avatar/fetch_partner' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\SettingsController::avatarFetchPartnerAction',  '_route' => 'settings_avatar_fetch_partner',  '_permission' =>   array (  ),  '_h5' => false,);
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_settings_avatar_fetch_partner;
                        }

                        return $ret;
                    }
                    not_settings_avatar_fetch_partner:

                    // setting_approval_submit
                    if ('/settings/approval/submit' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\SettingsController::approvalSubmitAction',  '_route' => 'setting_approval_submit',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

                elseif (0 === strpos($pathinfo, '/settings/p')) {
                    // settings_profile_avatar_crop_modal
                    if ('/settings/profile/avatar/crop/modal' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\SettingsController::profileAvatarCropModalAction',  '_route' => 'settings_profile_avatar_crop_modal',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // settings_pay_password
                    if ('/settings/pay_password' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\SettingsController::payPasswordAction',  '_route' => 'settings_pay_password',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // settings_password
                    if ('/settings/password' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\SettingsController::passwordAction',  '_route' => 'settings_password',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

                elseif (0 === strpos($pathinfo, '/settings/security')) {
                    // settings_security
                    if ('/settings/security' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\SettingsController::securityAction',  '_route' => 'settings_security',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // settings_security_questions
                    if ('/settings/security_questions' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\SettingsController::securityQuestionsAction',  '_route' => 'settings_security_questions',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

                elseif (0 === strpos($pathinfo, '/settings/set')) {
                    // settings_set_password
                    if ('/settings/set_password' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\SettingsController::setPasswordAction',  '_route' => 'settings_set_password',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // settings_setup_password
                    if ('/settings/setup_password' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\SettingsController::setupPasswordAction',  '_route' => 'settings_setup_password',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // settings_setup_check_nickname
                    if ('/settings/setup/check_nickname' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\SettingsController::setupCheckNicknameAction',  '_route' => 'settings_setup_check_nickname',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

                // settings_reset_pay_password
                if ('/settings/reset_pay_password' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\SettingsController::resetPayPasswordAction',  '_route' => 'settings_reset_pay_password',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                if (0 === strpos($pathinfo, '/settings/find_pay_password')) {
                    // settings_find_pay_password
                    if ('/settings/find_pay_password' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\SettingsController::findPayPasswordAction',  '_route' => 'settings_find_pay_password',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // settings_find_pay_password_by_sms
                    if ('/settings/find_pay_password_by_sms' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\SettingsController::findPayPasswordBySmsAction',  '_route' => 'settings_find_pay_password_by_sms',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // settings_find_pay_password_by_question
                    if ('/settings/find_pay_password_by_question' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\SettingsController::findPayPasswordByQuestionAction',  '_route' => 'settings_find_pay_password_by_question',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

                // settings_update_pay_password
                if ('/settings/update_pay_password' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\SettingsController::updatePayPasswordAction',  '_route' => 'settings_update_pay_password',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // settings_binds_unbind
                if (0 === strpos($pathinfo, '/settings/unbind') && preg_match('#^/settings/unbind/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'settings_binds_unbind']), array (  '_controller' => 'AppBundle\\Controller\\SettingsController::unBindAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_settings_binds_unbind;
                    }

                    return $ret;
                }
                not_settings_binds_unbind:

                if (0 === strpos($pathinfo, '/settings/nickname')) {
                    // setting_nickname
                    if ('/settings/nickname' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\SettingsController::nicknameAction',  '_route' => 'setting_nickname',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // update_nickname_check
                    if ('/settings/nickname/check' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\SettingsController::nicknameCheckAction',  '_route' => 'update_nickname_check',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

                elseif (0 === strpos($pathinfo, '/settings/email')) {
                    // settings_email
                    if ('/settings/email' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\SettingsController::emailAction',  '_route' => 'settings_email',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // settings_email_verify
                    if ('/settings/email/verify' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\SettingsController::emailVerifyAction',  '_route' => 'settings_email_verify',  '_permission' =>   array (  ),  '_h5' => false,);
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_settings_email_verify;
                        }

                        return $ret;
                    }
                    not_settings_email_verify:

                }

                elseif (0 === strpos($pathinfo, '/settings/bind')) {
                    // settings_binds
                    if ('/settings/binds' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\SettingsController::bindsAction',  '_route' => 'settings_binds',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // settings_binds_bind
                    if (preg_match('#^/settings/bind/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'settings_binds_bind']), array (  '_controller' => 'AppBundle\\Controller\\SettingsController::bindAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // settings_binds_bind_callback
                    if (preg_match('#^/settings/bind/(?P<type>[^/]++)/callback$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'settings_binds_bind_callback']), array (  '_controller' => 'AppBundle\\Controller\\SettingsController::bindCallbackAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // settings_bind_mobile
                    if ('/settings/bind_mobile' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\SettingsController::bindMobileAction',  '_route' => 'settings_bind_mobile',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

                // settings_check_login_password
                if ('/settings/check_login_password' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\SettingsController::passwordCheckAction',  '_route' => 'settings_check_login_password',  '_permission' =>   array (  ),  '_h5' => false,);
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_settings_check_login_password;
                    }

                    return $ret;
                }
                not_settings_check_login_password:

            }

            // systeminfo
            if ('/systeminfo' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\SysteminfoController::indexAction',  '_route' => 'systeminfo',  '_permission' =>   array (  ),  '_h5' => false,);
            }

            if (0 === strpos($pathinfo, '/subject')) {
                // subject_edit_template
                if (0 === strpos($pathinfo, '/subject/edit') && preg_match('#^/subject/edit/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'subject_edit_template']), array (  '_controller' => 'AppBundle\\Controller\\Testpaper\\ManageController::editTemplateAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_subject_edit_template;
                    }

                    return $ret;
                }
                not_subject_edit_template:

                // subject_option_template
                if (0 === strpos($pathinfo, '/subject/option') && preg_match('#^/subject/option/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'subject_option_template']), array (  '_controller' => 'AppBundle\\Controller\\Testpaper\\ManageController::optionTemplateAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // subject_show_template
                if (0 === strpos($pathinfo, '/subject/show') && preg_match('#^/subject/show/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'subject_show_template']), array (  '_controller' => 'AppBundle\\Controller\\Testpaper\\ManageController::showTemplateAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_subject_show_template;
                    }

                    return $ret;
                }
                not_subject_show_template:

            }

            // subject_convert_template
            if ('/sublect/convert' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\Testpaper\\ManageController::convertTemplateAction',  '_route' => 'subject_convert_template',  '_permission' =>   array (  ),  '_h5' => false,);
                if (!in_array($requestMethod, ['POST'])) {
                    $allow = array_merge($allow, ['POST']);
                    goto not_subject_convert_template;
                }

                return $ret;
            }
            not_subject_convert_template:

        }

        elseif (0 === strpos($pathinfo, '/c')) {
            if (0 === strpos($pathinfo, '/co')) {
                if (0 === strpos($pathinfo, '/course')) {
                    // homepage_category
                    if ('/course/search' === $pathinfo) {
                        return array (  '_controller' => 'CustomBundle\\Controller\\DefaultController::coursesCategoryAction',  '_route' => 'homepage_category',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // course_thread_player_show
                    if (0 === strpos($pathinfo, '/course/thread/file') && preg_match('#^/course/thread/file/(?P<id>[^/]++)/player/show$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_thread_player_show']), array (  '_controller' => 'AppBundle\\Controller\\Course\\ThreadController::playerShowAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // content_course_rule
                    if ('/courserule' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::courseRuleAction',  '_route' => 'content_course_rule',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // course_set_live_capacity
                    if (0 === strpos($pathinfo, '/course_set') && preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/live_capacity$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_live_capacity']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::liveCapacityAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_activity_trigger
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/activity/(?P<activityId>[^/]++)/trigger$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_activity_trigger']), array (  '_controller' => 'AppBundle\\Controller\\Activity\\ActivityController::triggerAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_activity_trigger;
                        }

                        return $ret;
                    }
                    not_course_activity_trigger:

                    // course_acitvity_watch
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/activity/(?P<id>[^/]++)/watch$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_acitvity_watch']), array (  '_controller' => 'AppBundle\\Controller\\Activity\\VideoController::watchAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_activity_download
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/activiy/(?P<activityId>[^/]++)/download$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_activity_download']), array (  '_controller' => 'AppBundle\\Controller\\Activity\\DownloadController::downloadFileAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_activity_manage_custom_route
                    if (preg_match('#^/course/(?P<fromCourseId>[^/]++)/manage/activity_(?P<mediaType>[^/]++)/(?P<id>[^/]++)/(?P<routeName>[^/]++)$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_activity_manage_custom_route']), array (  '_controller' => 'AppBundle\\Controller\\Activity\\ActivityController::customManageRouteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_manage_activity_manage_custom_route;
                        }

                        return $ret;
                    }
                    not_course_manage_activity_manage_custom_route:

                    // course_manage_activity_content_modal
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/manage/activity_(?P<type>[^/]++)/(?P<activityId>[^/]++)/content_modal$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_activity_content_modal']), array (  '_controller' => 'AppBundle\\Controller\\Activity\\ActivityController::contentModalAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_activity_finish_modal
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/manage/activity_(?P<type>[^/]++)/(?P<activityId>[^/]++)/finish_modal$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_activity_finish_modal']), array (  '_controller' => 'AppBundle\\Controller\\Activity\\ActivityController::finishModalAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_activity_learning_custom_route
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/learning$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_activity_learning_custom_route']), array (  '_controller' => 'AppBundle\\Controller\\Activity\\ActivityController::customLearningRouteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_task_show
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<id>[^/]++)/show$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_show']), array (  '_controller' => 'AppBundle\\Controller\\TaskController::showAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_task_preview
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<id>[^/]++)/preview$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_preview']), array (  '_controller' => 'AppBundle\\Controller\\TaskController::previewAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_task_content_preview
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<id>[^/]++)/content/preview$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_content_preview']), array (  '_controller' => 'AppBundle\\Controller\\TaskController::contentPreviewAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_task_activity_show
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<id>[^/]++)/activity_show$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_activity_show']), array (  '_controller' => 'AppBundle\\Controller\\TaskController::taskActivityAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_task_trigger
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<id>[^/]++)/trigger$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_trigger']), array (  '_controller' => 'AppBundle\\Controller\\TaskController::triggerAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_task_finish
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<id>[^/]++)/finish$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_finish']), array (  '_controller' => 'AppBundle\\Controller\\TaskController::finishAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_task_qrcode
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<id>[^/]++)/qrcode$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_qrcode']), array (  '_controller' => 'AppBundle\\Controller\\TaskController::qrcodeAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_task_finished_prompt
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<id>[^/]++)/finished_prompt$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_finished_prompt']), array (  '_controller' => 'AppBundle\\Controller\\TaskController::taskFinishedPromptAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_task_token_download
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/token/(?P<token>[^/]++)/download$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_token_download']), array (  '_controller' => 'AppBundle\\Controller\\TaskController::downloadFileByTokenAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_task_pre_create_check
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/pre_create_check$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_task_pre_create_check']), array (  '_controller' => 'AppBundle\\Controller\\TaskManageController::preCreateCheckAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_manage_task_pre_create_check;
                        }

                        return $ret;
                    }
                    not_course_manage_task_pre_create_check:

                    // course_manage_task_pre_update_check
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/activity/(?P<activityId>[^/]++)/pre_update_check$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_task_pre_update_check']), array (  '_controller' => 'AppBundle\\Controller\\TaskManageController::preUpdateCheckAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_manage_task_pre_update_check;
                        }

                        return $ret;
                    }
                    not_course_manage_task_pre_update_check:

                    // course_manage_task_create
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_task_create']), array (  '_controller' => 'AppBundle\\Controller\\TaskManageController::createAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_task_batch_create
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/batch/modal$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_task_batch_create']), array (  '_controller' => 'AppBundle\\Controller\\TaskManageController::batchCreateTasksAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_task_publish
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<id>[^/]++)/publish$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_task_publish']), array (  '_controller' => 'AppBundle\\Controller\\TaskManageController::publishAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_task_unpublish
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<id>[^/]++)/unpublish$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_task_unpublish']), array (  '_controller' => 'AppBundle\\Controller\\TaskManageController::unPublishAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_task_fields
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task_fields/(?P<mode>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_task_fields']), array (  '_controller' => 'AppBundle\\Controller\\TaskManageController::taskFieldsAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_task_update
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<id>[^/]++)/update$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_task_update']), array (  '_controller' => 'AppBundle\\Controller\\TaskManageController::updateAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_task_delete
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_task_delete']), array (  '_controller' => 'AppBundle\\Controller\\TaskManageController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_manage_task_delete;
                        }

                        return $ret;
                    }
                    not_course_manage_task_delete:

                    // course_manage_task_replay_edit
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/replay/edit$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_task_replay_edit']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::editTaskReplayAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_task_replay_title_update
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/replay/(?P<replayId>[^/]++)/update_title$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_task_replay_title_update']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::updateTaskReplayTitleAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_manage_task_replay_title_update;
                        }

                        return $ret;
                    }
                    not_course_manage_task_replay_title_update:

                    // course_manage_task_replay_upload
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/replay/upload$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_task_replay_upload']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::uploadReplayAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_task_replay_create
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/replay/create$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_task_replay_create']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::createReplayAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_manage_task_replay_create;
                        }

                        return $ret;
                    }
                    not_course_manage_task_replay_create:

                    // course_manage_task_learn_detail
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/learn/detail$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_task_learn_detail']), array (  '_controller' => 'AppBundle\\Controller\\TaskLearnDataController::learnDataDetailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_student_learn_detail_modal
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/student/(?P<userId>[^/]++)/learn/detail$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_student_learn_detail_modal']), array (  '_controller' => 'AppBundle\\Controller\\TaskLearnDataController::studentDataDetailModalAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // task_live_entry
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/activity/(?P<activityId>[^/]++)/live_entry$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'task_live_entry']), array (  '_controller' => 'AppBundle\\Controller\\Activity\\LiveController::liveEntryAction',  '_permission' =>   array (  ),  '_h5' => true,));
                    }

                    // live_activity_replay_entry
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/activity/(?P<activityId>[^/]++)/replay/(?P<replayId>[^/]++)/entry$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'live_activity_replay_entry']), array (  '_controller' => 'AppBundle\\Controller\\Activity\\LiveController::replayEntryAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // live_activity_replay_url
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/activity/(?P<activityId>[^/]++)/replay/(?P<replayId>[^/]++)/play$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'live_activity_replay_url']), array (  '_controller' => 'AppBundle\\Controller\\Activity\\LiveController::replayUrlAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // task_live_replay_player
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/activity/(?P<activityId>[^/]++)/replay$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'task_live_replay_player']), array (  '_controller' => 'AppBundle\\Controller\\Activity\\LiveController::liveReplayAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // task_live_trigger
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/activity/(?P<activityId>[^/]++)/live_trigger$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'task_live_trigger']), array (  '_controller' => 'AppBundle\\Controller\\Activity\\LiveController::triggerAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_task_note_save
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/note/save$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_note_save']), array (  '_controller' => 'AppBundle\\Controller\\NoteController::saveCourseNoteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_task_show_plugins
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/show/plugins$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_show_plugins']), array (  '_controller' => 'AppBundle\\Controller\\TaskController::taskPluginsAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_task_show_plugin_task_list
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/plugin/task_list$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_show_plugin_task_list']), array (  '_controller' => 'AppBundle\\Controller\\TaskPluginController::taskListAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_task_show_plugin_task_list_by_paging
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/plugin/task_list/paging$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_show_plugin_task_list_by_paging']), array (  '_controller' => 'AppBundle\\Controller\\TaskPluginController::taskListByPagingAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_task_plugin_note
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/plugin/note$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_plugin_note']), array (  '_controller' => 'AppBundle\\Controller\\TaskPluginController::noteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_task_plugin_threads
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/plugin/threads$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_plugin_threads']), array (  '_controller' => 'AppBundle\\Controller\\TaskPluginController::threadsAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_task_plugin_thread_create
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/plugin/thread/create$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_plugin_thread_create']), array (  '_controller' => 'AppBundle\\Controller\\TaskPluginController::createThreadAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_task_plugin_thread_create;
                        }

                        return $ret;
                    }
                    not_course_task_plugin_thread_create:

                    // course_task_plugin_thread_show
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/plugin/thread/(?P<threadId>[^/]++)$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_plugin_thread_show']), array (  '_controller' => 'AppBundle\\Controller\\TaskPluginController::threadAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($canonicalMethod, ['GET'])) {
                            $allow = array_merge($allow, ['GET']);
                            goto not_course_task_plugin_thread_show;
                        }

                        return $ret;
                    }
                    not_course_task_plugin_thread_show:

                    // course_task_plugin_thread_answer
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/plugin/thread/(?P<threadId>[^/]++)/answer$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_plugin_thread_answer']), array (  '_controller' => 'AppBundle\\Controller\\TaskPluginController::answerQuestionAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_task_plugin_thread_answer;
                        }

                        return $ret;
                    }
                    not_course_task_plugin_thread_answer:

                    // course_manage_chapter_manage
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/manage/chapter/manage$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_chapter_manage']), array (  '_controller' => 'AppBundle\\Controller\\Course\\ChapterManageController::manageAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_chapter_delete
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/manage/chapter/(?P<chapterId>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_chapter_delete']), array (  '_controller' => 'AppBundle\\Controller\\Course\\ChapterManageController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_manage_chapter_delete;
                        }

                        return $ret;
                    }
                    not_course_manage_chapter_delete:

                    // course_manage_lesson_create
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/lesson/create$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_lesson_create']), array (  '_controller' => 'AppBundle\\Controller\\Course\\LessonManageController::createAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_lesson_batch_create
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/lesson/batch_create$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_lesson_batch_create']), array (  '_controller' => 'AppBundle\\Controller\\Course\\LessonManageController::batchCreateAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_lesson_valid_num
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/lesson/valid_num$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_lesson_valid_num']), array (  '_controller' => 'AppBundle\\Controller\\Course\\LessonManageController::validLessonNumAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_manage_lesson_valid_num;
                        }

                        return $ret;
                    }
                    not_course_manage_lesson_valid_num:

                    // course_manage_lesson_update
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/lesson/(?P<lessonId>[^/]++)/update$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_lesson_update']), array (  '_controller' => 'AppBundle\\Controller\\Course\\LessonManageController::updateAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_lesson_publish
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/manage/lesson/(?P<lessonId>[^/]++)/publish$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_lesson_publish']), array (  '_controller' => 'AppBundle\\Controller\\Course\\LessonManageController::publishAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_lesson_unpublish
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/manage/lesson/(?P<lessonId>[^/]++)/unpublish$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_lesson_unpublish']), array (  '_controller' => 'AppBundle\\Controller\\Course\\LessonManageController::unpublishAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_lesson_delete
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/manage/lesson/(?P<lessonId>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_lesson_delete']), array (  '_controller' => 'AppBundle\\Controller\\Course\\LessonManageController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_lesson_set_optional
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/manage/lesson/(?P<lessonId>[^/]++)/setoptional$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_lesson_set_optional']), array (  '_controller' => 'AppBundle\\Controller\\Course\\LessonManageController::setOptionalAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_manage_lesson_set_optional;
                        }

                        return $ret;
                    }
                    not_course_manage_lesson_set_optional:

                    // course_manage_lesson_unset_optional
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/manage/lesson/(?P<lessonId>[^/]++)/unsetoptional$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_lesson_unset_optional']), array (  '_controller' => 'AppBundle\\Controller\\Course\\LessonManageController::unsetOptionalAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_manage_lesson_unset_optional;
                        }

                        return $ret;
                    }
                    not_course_manage_lesson_unset_optional:

                    // course_manage_change_lesson_show_status
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/manage/change/lesson/show/status$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_change_lesson_show_status']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::hidePublishAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_manage_change_lesson_show_status;
                        }

                        return $ret;
                    }
                    not_course_manage_change_lesson_show_status:

                    // course_set_explore
                    if (0 === strpos($pathinfo, '/course/explore') && preg_match('#^/course/explore(?:/(?P<category>[^/]++))?$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_explore']), array (  '_controller' => 'AppBundle\\Controller\\ExploreController::courseSetsAction',  'category' => '',  '_permission' =>   array (  ),  '_h5' => true,));
                    }

                    if (0 === strpos($pathinfo, '/course_set')) {
                        // course_set_manage_sync
                        if (preg_match('#^/course_set/(?P<id>[^/]++)/manage/sync$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_sync']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseSetManageController::syncInfoAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_unlock
                        if (preg_match('#^/course_set/(?P<id>[^/]++)/manage/unlock$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_unlock']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseSetManageController::unlockAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_unlock_confirm
                        if (preg_match('#^/course_set/(?P<id>[^/]++)/manage/unlock_confirm$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_unlock_confirm']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseSetManageController::unlockConfirmAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_courses
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/courses$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_courses']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::listAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_course_create
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/create$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_create']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::createAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_course_copy
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/copy$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_copy']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::copyAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_course_info
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/info$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_info']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::infoAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_course_overview
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/overview$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_overview']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::overviewAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_live_statistics
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/live_statistics$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_live_statistics']), array (  '_controller' => 'AppBundle\\Controller\\LiveStatistics\\CourseLiveStatisticsController::indexAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                    }

                    // course_set_manage_live_statistics_detail
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/live_statistics_detail$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_live_statistics_detail']), array (  '_controller' => 'AppBundle\\Controller\\LiveStatistics\\CourseLiveStatisticsController::detailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_set_manage_task_detail
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/detail$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_task_detail']), array (  '_controller' => 'AppBundle\\Controller\\TaskLearnDataController::taskDetailListAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_set_manage_student_detail
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/student/detail$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_student_detail']), array (  '_controller' => 'AppBundle\\Controller\\TaskLearnDataController::studentDetailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    if (0 === strpos($pathinfo, '/course_set')) {
                        // course_set_manage_course_trendency
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/trendency$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_trendency']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::trendencyAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_course_tasks
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/tasks$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_tasks']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::tasksAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_course_replay
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/replay$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_replay']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::replayAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_course_marketing
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/marketing$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_marketing']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::marketingAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_course_teachers
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/teachers$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_teachers']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::teachersAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_course_teachers_match
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/teachers_match$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_teachers_match']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::teachersMatchAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_course_students
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/students$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_students']), array (  '_controller' => 'AppBundle\\Controller\\Course\\StudentManageController::studentsAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_course_records
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/(?P<type>[^/]++)/records$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_records']), array (  '_controller' => 'AppBundle\\Controller\\Course\\StudentManageController::studentRecordsAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_course_students_add
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/students/add$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_students_add']), array (  '_controller' => 'AppBundle\\Controller\\Course\\StudentManageController::createCourseStudentAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_course_students_remove
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/students/(?P<userId>[^/]++)/remove$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_students_remove']), array (  '_controller' => 'AppBundle\\Controller\\Course\\StudentManageController::removeCourseStudentAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_course_set_manage_course_students_remove;
                            }

                            return $ret;
                        }
                        not_course_set_manage_course_students_remove:

                        // course_set_manage_course_students_remove_students
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/students/remove$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_students_remove_students']), array (  '_controller' => 'AppBundle\\Controller\\Course\\StudentManageController::removeCourseStudentsAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_course_set_manage_course_students_remove_students;
                            }

                            return $ret;
                        }
                        not_course_set_manage_course_students_remove_students:

                        // course_set_manage_course_students_remark
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/student/(?P<userId>[^/]++)/remark$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_students_remark']), array (  '_controller' => 'AppBundle\\Controller\\Course\\StudentManageController::remarkAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_course_students_deadline_batch
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/student/deadline$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_students_deadline_batch']), array (  '_controller' => 'AppBundle\\Controller\\Course\\StudentManageController::batchUpdateMemberDeadlinesAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_course_students_deadline_batch_day_check
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/student/day/check$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_students_deadline_batch_day_check']), array (  '_controller' => 'AppBundle\\Controller\\Course\\StudentManageController::checkDayAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_course_students_deadline_batch_deadline_check
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/student/deadline/check$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_students_deadline_batch_deadline_check']), array (  '_controller' => 'AppBundle\\Controller\\Course\\StudentManageController::checkDeadlineAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_course_students_process
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/students/(?P<userId>[^/]++)/process$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_students_process']), array (  '_controller' => 'AppBundle\\Controller\\Course\\StudentManageController::studyProcessAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_course_students_check
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/students/check$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_students_check']), array (  '_controller' => 'AppBundle\\Controller\\Course\\StudentManageController::checkStudentAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_course_students_show
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/students/(?P<userId>[^/]++)/show$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_students_show']), array (  '_controller' => 'AppBundle\\Controller\\Course\\StudentManageController::showAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_course_students_defined_show
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/students/(?P<userId>[^/]++)/defined_show$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_students_defined_show']), array (  '_controller' => 'AppBundle\\Controller\\Course\\StudentManageController::definedShowAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_course_orders
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/orders$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_orders']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::ordersAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_manage_question_marker
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/questionmarker$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_question_marker']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::questionMarkerStatsAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_manage_question_marker_analysis
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/course/(?P<courseId>[^/]++)/questionmarker/(?P<questionMarkerId>[^/]++)/analysis$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_question_marker_analysis']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::questionMarkerAnalysisAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_course_close_check
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/course/(?P<courseId>[^/]++)/close_check$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_close_check']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::closeCheckAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_course_set_manage_course_close_check;
                            }

                            return $ret;
                        }
                        not_course_set_manage_course_close_check:

                        // course_set_manage_course_close
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/course/(?P<courseId>[^/]++)/close$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_close']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::closeAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_course_set_manage_course_close;
                            }

                            return $ret;
                        }
                        not_course_set_manage_course_close:

                        // course_set_manage_course_delete
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/course/(?P<courseId>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_delete']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_course_set_manage_course_delete;
                            }

                            return $ret;
                        }
                        not_course_set_manage_course_delete:

                        // course_set_manage_course_publish
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/course/(?P<courseId>[^/]++)/publish$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_publish']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::publishAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_course_set_manage_course_publish;
                            }

                            return $ret;
                        }
                        not_course_set_manage_course_publish:

                        // course_set_manage_course_pre_publish
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/course/(?P<courseId>[^/]++)/pre_publish$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_pre_publish']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::prePublishAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_course_set_manage_course_pre_publish;
                            }

                            return $ret;
                        }
                        not_course_set_manage_course_pre_publish:

                        // course_set_manage_course_publish_set_title
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/course/(?P<courseId>[^/]++)/publish_set_title$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_course_publish_set_title']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::publishSetTitleAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                    }

                    // course_manage_items_sort
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/manage/items/sort$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_items_sort']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseManageController::courseItemsSortAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_manage_items_sort;
                        }

                        return $ret;
                    }
                    not_course_manage_items_sort:

                    if (0 === strpos($pathinfo, '/course_set')) {
                        // course_set_manage_create
                        if ('/course_set/create' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseSetManageController::createAction',  '_route' => 'course_set_manage_create',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // course_set_show
                        if (preg_match('#^/course_set/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_show']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseSetController::showAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                    }

                    // course_qrcode
                    if (preg_match('#^/course/(?P<id>[^/]++)/qrcode$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_qrcode']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseController::qrcodeAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_qrcode;
                        }

                        return $ret;
                    }
                    not_course_qrcode:

                    // course_exit
                    if (preg_match('#^/course/(?P<id>[^/]++)/exit$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_exit']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseController::exitAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_exit;
                        }

                        return $ret;
                    }
                    not_course_exit:

                    // course_exit_modal
                    if ('/course/show_exit_modal' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseController::exitModalAction',  '_route' => 'course_exit_modal',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // course_thread_create
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/thread/create$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_thread_create']), array (  '_controller' => 'AppBundle\\Controller\\Course\\ThreadController::createAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_thread_show
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/thread/(?P<threadId>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_thread_show']), array (  '_controller' => 'AppBundle\\Controller\\Course\\ThreadController::showAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_thread_post
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/thread/(?P<threadId>[^/]++)/post$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_thread_post']), array (  '_controller' => 'AppBundle\\Controller\\Course\\ThreadController::postAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_thread_edit
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/thread/(?P<threadId>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_thread_edit']), array (  '_controller' => 'AppBundle\\Controller\\Course\\ThreadController::editAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_thread_ask_video_show
                    if (0 === strpos($pathinfo, '/course/thread') && preg_match('#^/course/thread/(?P<threadId>[^/]++)/ask_video/show$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_thread_ask_video_show']), array (  '_controller' => 'AppBundle\\Controller\\Course\\ThreadController::askVideoAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_thread_post_delete
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/thread/(?P<threadId>[^/]++)/post/(?P<postId>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_thread_post_delete']), array (  '_controller' => 'AppBundle\\Controller\\Course\\ThreadController::deletePostAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_thread_post_delete;
                        }

                        return $ret;
                    }
                    not_course_thread_post_delete:

                    // course_thread_post_edit
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/thread/(?P<threadId>[^/]++)/post/(?P<postId>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_thread_post_edit']), array (  '_controller' => 'AppBundle\\Controller\\Course\\ThreadController::editPostAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_thread_stick
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/thread/(?P<threadId>[^/]++)/stick$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_thread_stick']), array (  '_controller' => 'AppBundle\\Controller\\Course\\ThreadController::stickAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_thread_stick;
                        }

                        return $ret;
                    }
                    not_course_thread_stick:

                    // course_thread_unstick
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/thread/(?P<threadId>[^/]++)/unstick$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_thread_unstick']), array (  '_controller' => 'AppBundle\\Controller\\Course\\ThreadController::unstickAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_thread_unstick;
                        }

                        return $ret;
                    }
                    not_course_thread_unstick:

                    // course_thread_elite
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/thread/(?P<threadId>[^/]++)/elite$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_thread_elite']), array (  '_controller' => 'AppBundle\\Controller\\Course\\ThreadController::eliteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_thread_elite;
                        }

                        return $ret;
                    }
                    not_course_thread_elite:

                    // course_thread_unelite
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/thread/(?P<threadId>[^/]++)/unelite$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_thread_unelite']), array (  '_controller' => 'AppBundle\\Controller\\Course\\ThreadController::uneliteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_thread_unelite;
                        }

                        return $ret;
                    }
                    not_course_thread_unelite:

                    // course_thread_delete
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/thread/(?P<threadId>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_thread_delete']), array (  '_controller' => 'AppBundle\\Controller\\Course\\ThreadController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_thread_delete;
                        }

                        return $ret;
                    }
                    not_course_thread_delete:

                    if (0 === strpos($pathinfo, '/course_set')) {
                        // course_set_manage
                        if (preg_match('#^/course_set/(?P<id>[^/]++)/manage$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseSetManageController::indexAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_base
                        if (preg_match('#^/course_set/(?P<id>[^/]++)/manage/base$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_base']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseSetManageController::baseAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_cover_crop
                        if (preg_match('#^/course_set/(?P<id>[^/]++)/manage/cover_crop$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_cover_crop']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseSetManageController::coverCropAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_files
                        if (preg_match('#^/course_set/(?P<id>[^/]++)/manage/files$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_files']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseSetFileManageController::indexAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_file_show
                        if (preg_match('#^/course_set/(?P<id>[^/]++)/manage/file/(?P<fileId>[^/]++)$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_file_show']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseSetFileManageController::showAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_file_convert
                        if (preg_match('#^/course_set/(?P<id>[^/]++)/manage/file/(?P<fileId>[^/]++)/convert$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_file_convert']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseSetFileManageController::convertAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_course_set_manage_file_convert;
                            }

                            return $ret;
                        }
                        not_course_set_manage_file_convert:

                        // course_set_manage_file_status
                        if ('/course_set/manage/file/status' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseSetFileManageController::fileStatusAction',  '_route' => 'course_set_manage_file_status',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // course_set_manage_delete_materials_show
                        if (preg_match('#^/course_set/(?P<id>[^/]++)/manage/show/delete/materials$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_delete_materials_show']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseSetFileManageController::deleteMaterialsAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_course_set_manage_delete_materials_show;
                            }

                            return $ret;
                        }
                        not_course_set_manage_delete_materials_show:

                        // course_set_manage_delete_materials
                        if (preg_match('#^/course_set/(?P<id>[^/]++)/manage/delete/materials$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_delete_materials']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseSetFileManageController::deleteCourseFilesAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_course_set_manage_delete_materials;
                            }

                            return $ret;
                        }
                        not_course_set_manage_delete_materials:

                        // course_set_manage_retry_transcode
                        if (preg_match('#^/course_set/(?P<id>[^/]++)/manage/file/(?P<fileId>[^/]++)/retry_transcode$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_retry_transcode']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseSetFileManageController::retryTranscodeAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_course_set_manage_retry_transcode;
                            }

                            return $ret;
                        }
                        not_course_set_manage_retry_transcode:

                        // course_set_manage_file_detail
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/file/(?P<fileId>[^/]++)/detail$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_file_detail']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseSetFileManageController::detailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_files_batch_tag_add
                        if (preg_match('#^/course_set/(?P<id>[^/]++)/batch/tag/add$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_files_batch_tag_add']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseSetFileManageController::batchTagAddAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_publish
                        if (preg_match('#^/course_set/(?P<id>[^/]++)/manage/publish$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_publish']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseSetManageController::publishAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_close
                        if (preg_match('#^/course_set/(?P<id>[^/]++)/manage/close$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_close']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseSetManageController::closeAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                    }

                    // course_material_download
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/material/(?P<materialId>[^/]++)/download$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_material_download']), array (  '_controller' => 'AppBundle\\Controller\\Course\\MaterialController::downloadAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_material_delete
                    if (preg_match('#^/course/(?P<id>[^/]++)/material/(?P<materialId>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_material_delete']), array (  '_controller' => 'AppBundle\\Controller\\Course\\MaterialController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_material_delete;
                        }

                        return $ret;
                    }
                    not_course_material_delete:

                    if (0 === strpos($pathinfo, '/course_set')) {
                        // course_set_manage_question
                        if (preg_match('#^/course_set/(?P<id>[^/]++)/manage/question$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_question']), array (  '_controller' => 'AppBundle\\Controller\\Question\\ManageController::indexAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_show_tasks
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/show/tasks$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_show_tasks']), array (  '_controller' => 'AppBundle\\Controller\\Question\\ManageController::showTasksAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_course_set_manage_show_tasks;
                            }

                            return $ret;
                        }
                        not_course_set_manage_show_tasks:

                        // course_set_manage_question_check_num
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/question/check/num$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_question_check_num']), array (  '_controller' => 'AppBundle\\Controller\\Question\\ManageController::showQuestionTypesNumAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_course_set_manage_question_check_num;
                            }

                            return $ret;
                        }
                        not_course_set_manage_question_check_num:

                        // course_set_manage_testpaper
                        if (preg_match('#^/course_set/(?P<id>[^/]++)/manage/testpaper$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_testpaper']), array (  '_controller' => 'AppBundle\\Controller\\Testpaper\\ManageController::indexAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_testpaper_info
                        if (preg_match('#^/course_set/(?P<id>[^/]++)/manage/testpaper/info$#sD', $pathinfo, $matches)) {
                            $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_testpaper_info']), array (  '_controller' => 'AppBundle\\Controller\\Testpaper\\ManageController::infoAction',  '_permission' =>   array (  ),  '_h5' => false,));
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_course_set_manage_testpaper_info;
                            }

                            return $ret;
                        }
                        not_course_set_manage_testpaper_info:

                    }

                    // course_manage_testpaper_check
                    if (preg_match('#^/course/(?P<id>[^/]++)/manage/testpaper/(?P<answerRecordId>[^/]++)/check$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_testpaper_check']), array (  '_controller' => 'AppBundle\\Controller\\Course\\TestpaperManageController::checkAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_exam_next_result_check
                    if (preg_match('#^/course/(?P<id>[^/]++)/manage/activity/(?P<activityId>[^/]++)/exam/check$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_exam_next_result_check']), array (  '_controller' => 'AppBundle\\Controller\\Course\\TestpaperManageController::resultNextCheckAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_testpaper_result_graph
                    if (preg_match('#^/course/(?P<id>[^/]++)/activity/(?P<activityId>[^/]++)/testpaper/graph$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_testpaper_result_graph']), array (  '_controller' => 'AppBundle\\Controller\\Course\\TestpaperManageController::resultGraphAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_testpaper_check_list
                    if (preg_match('#^/course/(?P<id>[^/]++)/manage/testpaper/check$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_testpaper_check_list']), array (  '_controller' => 'AppBundle\\Controller\\Course\\TestpaperManageController::checkListAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_testpaper_result_list
                    if (preg_match('#^/course/(?P<id>[^/]++)/manage/testpaper/(?P<testpaperId>[^/]++)/(?P<activityId>[^/]++)/result$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_testpaper_result_list']), array (  '_controller' => 'AppBundle\\Controller\\Course\\TestpaperManageController::resultListAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_exam_result_anlysis
                    if (preg_match('#^/course/(?P<id>[^/]++)/manage/exam/activity/(?P<activityId>[^/]++)/analysis$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_exam_result_anlysis']), array (  '_controller' => 'AppBundle\\Controller\\Course\\TestpaperManageController::resultAnalysisAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    if (0 === strpos($pathinfo, '/course_set')) {
                        // course_set_manage_testpaper_build_check
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/(?P<type>[^/]++)/build/check$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_testpaper_build_check']), array (  '_controller' => 'AppBundle\\Controller\\Testpaper\\ManageController::buildCheckAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_homework_question_picker
                        if (preg_match('#^/course_set/(?P<id>[^/]++)/manage/homework/question/picker$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_homework_question_picker']), array (  '_controller' => 'AppBundle\\Controller\\HomeworkManageController::questionPickerAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_set_manage_homework_question_picked
                        if (preg_match('#^/course_set/(?P<courseSetId>[^/]++)/manage/homework/question/picked$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_set_manage_homework_question_picked']), array (  '_controller' => 'AppBundle\\Controller\\HomeworkManageController::pickedQuestionAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                    }

                    // course_manage_homework_check_list
                    if (preg_match('#^/course/(?P<id>[^/]++)/manage/homework/check$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_homework_check_list']), array (  '_controller' => 'AppBundle\\Controller\\Course\\HomeworkManageController::checkListAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_homework_check
                    if (preg_match('#^/course/(?P<id>[^/]++)/manage/homework/(?P<answerRecordId>[^/]++)/check$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_homework_check']), array (  '_controller' => 'AppBundle\\Controller\\Course\\HomeworkManageController::checkAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_manage_exercise_check
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/manage/exercise/check$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_manage_exercise_check']), array (  '_controller' => 'AppBundle\\Controller\\ExerciseManageController::buildCheckAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_member_expired
                    if (preg_match('#^/course/(?P<id>[^/]++)/member/expired$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_member_expired']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseController::memberExpiredAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_member_deadline_reach
                    if (preg_match('#^/course/(?P<id>[^/]++)/member/deadline/reach$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_member_deadline_reach']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseController::deadlineReachAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_buy
                    if (preg_match('#^/course/(?P<id>[^/]++)/buy$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_buy']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseBuyController::buyAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_buy;
                        }

                        return $ret;
                    }
                    not_course_buy:

                    // course_order_repay
                    if ('/course/order/repay' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseOrderController::repayAction',  '_route' => 'course_order_repay',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // course_show
                    if (preg_match('#^/course/(?P<id>[^/]++)(?:/(?P<tab>[^/]++))?$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_show']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseController::showAction',  'tab' => 'summary',  '_permission' =>   array (  ),  '_h5' => true,));
                    }

                    // course_task_paging_show
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/tasks/paging$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_paging_show']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseController::tasksByPagingAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_task_marker_manage
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/marker/manage$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_marker_manage']), array (  '_controller' => 'AppBundle\\Controller\\MarkerController::manageAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_task_marker_manage_preview
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/marker/preview$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_marker_manage_preview']), array (  '_controller' => 'AppBundle\\Controller\\MarkerController::previewAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    if (0 === strpos($pathinfo, '/course/task')) {
                        // course_task_marker_show
                        if (preg_match('#^/course/task/(?P<taskId>[^/]++)/marker/show$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_marker_show']), array (  '_controller' => 'AppBundle\\Controller\\MarkerController::showMarkersAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_task_marker_metas
                        if (preg_match('#^/course/task/(?P<mediaId>[^/]++)/marker/metas$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_marker_metas']), array (  '_controller' => 'AppBundle\\Controller\\MarkerController::markerMetasAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                    }

                    // course_task_marker_merge
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/marker/merge$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_marker_merge']), array (  '_controller' => 'AppBundle\\Controller\\MarkerController::mergeAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_task_marker_merge;
                        }

                        return $ret;
                    }
                    not_course_task_marker_merge:

                    // course_task_marker_update
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/marker/update$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_marker_update']), array (  '_controller' => 'AppBundle\\Controller\\MarkerController::updateMarkerAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_task_marker_update;
                        }

                        return $ret;
                    }
                    not_course_task_marker_update:

                    // course_question_marker_preview
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/question/(?P<id>[^/]++)/marker/preview$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_question_marker_preview']), array (  '_controller' => 'AppBundle\\Controller\\QuestionMarkerController::questionMakerPreviewAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    if (0 === strpos($pathinfo, '/course/task/media')) {
                        // course_task_question_markers_show
                        if (preg_match('#^/course/task/media/(?P<mediaId>[^/]++)/question_markers/show$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_question_markers_show']), array (  '_controller' => 'AppBundle\\Controller\\QuestionMarkerController::showQuestionMakersAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // course_task_question_marker_finish
                        if ('/course/task/media/question_marker/finish' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\QuestionMarkerController::finishQuestionMarkerAction',  '_route' => 'course_task_question_marker_finish',  '_permission' =>   array (  ),  '_h5' => false,);
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_course_task_question_marker_finish;
                            }

                            return $ret;
                        }
                        not_course_task_question_marker_finish:

                    }

                    // course_task_question_marker_add
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/question_marker/add$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_question_marker_add']), array (  '_controller' => 'AppBundle\\Controller\\QuestionMarkerController::addQuestionMarkerAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_task_question_marker_add;
                        }

                        return $ret;
                    }
                    not_course_task_question_marker_add:

                    // course_task_question_marker_delete
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/question_marker/delete$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_question_marker_delete']), array (  '_controller' => 'AppBundle\\Controller\\QuestionMarkerController::deleteQuestionMarkerAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_task_question_marker_delete;
                        }

                        return $ret;
                    }
                    not_course_task_question_marker_delete:

                    // course_task_question_marker_sort
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/question_marker/sort$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_question_marker_sort']), array (  '_controller' => 'AppBundle\\Controller\\QuestionMarkerController::sortQuestionMarkerAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_task_question_marker_sort;
                        }

                        return $ret;
                    }
                    not_course_task_question_marker_sort:

                    // course_task_question_marker_list
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/question_marker/list$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_question_marker_list']), array (  '_controller' => 'AppBundle\\Controller\\QuestionMarkerController::questionAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_task_question_marker_search
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/(?P<taskId>[^/]++)/question_marker/search$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_question_marker_search']), array (  '_controller' => 'AppBundle\\Controller\\QuestionMarkerController::searchAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // course_sort
                    if (0 === strpos($pathinfo, '/courseset') && preg_match('#^/courseset/(?P<courseSetId>[^/]++)/sort$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'course_sort']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseSetManageController::courseSortAction',  'limit' => '',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_course_sort;
                        }

                        return $ret;
                    }
                    not_course_sort:

                    // course_task_list_render
                    if (preg_match('#^/course/(?P<courseId>[^/]++)/task/list/render/(?P<type>[^/]++)(?:/(?P<paged>[^/]++))?$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'course_task_list_render']), array (  '_controller' => 'AppBundle\\Controller\\Course\\CourseController::renderTaskListAction',  'paged' => false,  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                }

                elseif (0 === strpos($pathinfo, '/coupon')) {
                    // coupon_check
                    if ('/coupon/check' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Order\\OrderController::couponCheckAction',  '_route' => 'coupon_check',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // coupon_receive
                    if (preg_match('#^/coupon/(?P<token>[^/]++)/receive$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'coupon_receive']), array (  '_controller' => 'AppBundle\\Controller\\CouponBatchController::couponReceiveAction',  '_permission' =>   array (  ),  '_h5' => true,));
                    }

                    // coupon_resource_list
                    if (preg_match('#^/coupon/(?P<batchId>[^/]++)/resource/list$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'coupon_resource_list']), array (  '_controller' => 'AppBundle\\Controller\\CouponBatchController::couponResourceListAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                }

                elseif (0 === strpos($pathinfo, '/comm')) {
                    // common_qrcode
                    if ('/common/qrcode' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\CommonController::qrcodeAction',  '_route' => 'common_qrcode',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // common_wechat_subscribe_wap
                    if ('/common/subscribe/wap' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\CommonController::weChatOfficialSubscribeAction',  '_route' => 'common_wechat_subscribe_wap',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    if (0 === strpos($pathinfo, '/comment-widget')) {
                        // comment_widget_init
                        if ('/comment-widget/init' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\CommentWidgetController::initAction',  '_route' => 'comment_widget_init',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // comment_widget_create
                        if ('/comment-widget/create' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\CommentWidgetController::createAction',  '_route' => 'comment_widget_create',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        // comment_widget_delete
                        if ('/comment-widget/delete' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\CommentWidgetController::deleteAction',  '_route' => 'comment_widget_delete',  '_permission' =>   array (  ),  '_h5' => false,);
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_comment_widget_delete;
                            }

                            return $ret;
                        }
                        not_comment_widget_delete:

                    }

                }

            }

            elseif (0 === strpos($pathinfo, '/ca')) {
                // register_captcha_num
                if ('/captcha_num' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\RegisterController::captchaAction',  '_route' => 'register_captcha_num',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // category_all
                if ('/category/all' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\CategoryController::allAction',  '_route' => 'category_all',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                if (0 === strpos($pathinfo, '/carticle')) {
                    // content_article_show
                    if (preg_match('#^/carticle/(?P<alias>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'content_article_show']), array (  '_controller' => 'AppBundle\\Controller\\ContentController::articleShowAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // content_article_list
                    if ('/carticle' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\ContentController::articleListAction',  '_route' => 'content_article_list',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

                // card_info
                if ('/card/info' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\My\\CardController::cardInfoAction',  '_route' => 'card_info',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                if (0 === strpos($pathinfo, '/cashier')) {
                    // cashier_show
                    if ('/cashier/standard' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Cashier\\CashierController::showAction',  '_route' => 'cashier_show',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // cashier_redirect
                    if ('/cashier/redirect' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Cashier\\CashierController::redirectAction',  '_route' => 'cashier_redirect',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // cashier_password_check
                    if ('/cashier/password/check' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Cashier\\CashierController::checkPayPasswordAction',  '_route' => 'cashier_password_check',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // cashier_pay_price
                    if (preg_match('#^/cashier/(?P<sn>[^/]++)/price$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'cashier_pay_price']), array (  '_controller' => 'AppBundle\\Controller\\Cashier\\CashierController::priceAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_cashier_pay_price;
                        }

                        return $ret;
                    }
                    not_cashier_pay_price:

                    // cashier_pay_success
                    if ('/cashier/pay/success' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Cashier\\CashierController::successAction',  '_route' => 'cashier_pay_success',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

                elseif (0 === strpos($pathinfo, '/callback')) {
                    // cashier_pay_notify
                    if (preg_match('#^/callback/(?P<payment>[^/]++)/notify$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'cashier_pay_notify']), array (  '_controller' => 'AppBundle\\Controller\\Cashier\\CallbackController::notifyAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_cashier_pay_notify;
                        }

                        return $ret;
                    }
                    not_cashier_pay_notify:

                    // cashier_pay_return_for_app
                    if (preg_match('#^/callback/(?P<payment>[^/]++)/return_for_app$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'cashier_pay_return_for_app']), array (  '_controller' => 'AppBundle\\Controller\\Cashier\\CallbackController::returnForAppAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // cashier_pay_return_for_h5
                    if (preg_match('#^/callback/(?P<payment>[^/]++)/return_for_h5$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'cashier_pay_return_for_h5']), array (  '_controller' => 'AppBundle\\Controller\\Cashier\\CallbackController::returnForH5Action',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // cashier_pay_return
                    if (preg_match('#^/callback/(?P<payment>[^/]++)/return$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'cashier_pay_return']), array (  '_controller' => 'AppBundle\\Controller\\Cashier\\CallbackController::returnAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // callback
                    if (preg_match('#^/callback/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'callback']), array (  '_controller' => 'AppBundle\\Controller\\Callback\\EndpointController::publishAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                }

            }

            elseif (0 === strpos($pathinfo, '/cl')) {
                if (0 === strpos($pathinfo, '/cloud')) {
                    // cloud_search
                    if ('/cloud/search' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\SearchController::cloudSearchAction',  '_route' => 'cloud_search',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // cloud_set_server
                    if ('/cloud/set-server' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\CloudController::setServerAction',  '_route' => 'cloud_set_server',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // cloud_video_fingerprint
                    if ('/cloud/video_fingerprint' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\CloudController::videoFingerprintAction',  '_route' => 'cloud_video_fingerprint',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // cloud_ppt_watermark
                    if ('/cloud/ppt_watermark' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\CloudController::pptWatermarkAction',  '_route' => 'cloud_ppt_watermark',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // cloud_doc_watermark
                    if ('/cloud/doc_watermark' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\CloudController::docWatermarkAction',  '_route' => 'cloud_doc_watermark',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // cloud_testpaper_watermark
                    if ('/cloud/testpaper_watermark' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\CloudController::testpaperWatermarkAction',  '_route' => 'cloud_testpaper_watermark',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

                elseif (0 === strpos($pathinfo, '/classroom')) {
                    // classroom_manage
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::indexAction',  '_permission' =>   array (    0 => 'classroom_manage',  ),  '_h5' => false,));
                    }

                    // classroom_manage_courses
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/courses$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_courses']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::coursesAction',  '_permission' =>   array (    0 => 'classroom_manage_courses',  ),  '_h5' => false,));
                    }

                    // classroom_manage_course_remove
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/course/(?P<courseId>[^/]++)/remove$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_course_remove']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::removeCourseAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_manage_course_delete
                    if (preg_match('#^/classroom/(?P<classroomId>[^/]++)/manage/course_set/(?P<courseSetId>[^/]++)/course/(?P<courseId>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_course_delete']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::deleteCourseSetAction',  '_permission' =>   array (    0 => 'admin_v2_course_manage',  ),  '_h5' => false,));
                    }

                    // classroom_courses_select
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/courses/select$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_courses_select']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::coursesSelectAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_manage_items_sort
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/items/sort$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_items_sort']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::courseItemsSortAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_classroom_manage_items_sort;
                        }

                        return $ret;
                    }
                    not_classroom_manage_items_sort:

                    // classroom_manage_set_info
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/set_info$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_set_info']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::setInfoAction',  '_permission' =>   array (    0 => 'classroom_manage_set_info',  ),  '_h5' => false,));
                    }

                    // classroom_manage_set_picture
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/set_picture$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_set_picture']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::setPictureAction',  '_permission' =>   array (    0 => 'classroom_manage_set_picture',  ),  '_h5' => false,));
                    }

                    // classroom_manage_picture_crop
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/picture_crop$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_picture_crop']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::pictureCropAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_manage_set_price
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/price/set$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_set_price']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::setPriceAction',  '_permission' =>   array (    0 => 'classroom_manage_set_price',  ),  '_h5' => false,));
                    }

                    // classroom_manage_students
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/students$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_students']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::studentsAction',  '_permission' =>   array (    0 => 'classroom_manage_students',  ),  '_h5' => false,));
                    }

                    // classroom_manage_aduitor
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/aduitor$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_aduitor']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::aduitorAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_manage_record
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/record/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_record']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::recordAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_manage_service
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/service$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_service']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::serviceAction',  '_permission' =>   array (    0 => 'classroom_manage_service',  ),  '_h5' => false,));
                    }

                    // classroom_manage_teachers
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/teachers$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_teachers']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::teachersAction',  '_permission' =>   array (    0 => 'classroom_manage_teachers',  ),  '_h5' => false,));
                    }

                    // classroom_manage_headteacher
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/headteacher$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_headteacher']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::headteacherAction',  '_permission' =>   array (    0 => 'classroom_manage_headteacher',  ),  '_h5' => false,));
                    }

                    // classroom_manage_assistants
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/assistants$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_assistants']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::assistantsAction',  '_permission' =>   array (    0 => 'classroom_manage_assistants',  ),  '_h5' => false,));
                    }

                    // classroom_manage_publish
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/publish$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_publish']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::publishAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_classroom_manage_publish;
                        }

                        return $ret;
                    }
                    not_classroom_manage_publish:

                    // classroom_manage_close
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/close$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_close']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::closeAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_classroom_manage_close;
                        }

                        return $ret;
                    }
                    not_classroom_manage_close:

                    // classroom_manage_checkName
                    if ('/classroom/manage/checkName' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::checkNameAction',  '_route' => 'classroom_manage_checkName',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // classroom_manage_student_remark
                    if (preg_match('#^/classroom/(?P<classroomId>[^/]++)/manage/student/(?P<userId>[^/]++)/remark$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_student_remark']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::remarkAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_manage_student_remove
                    if (preg_match('#^/classroom/(?P<classroomId>[^/]++)/manage/student/(?P<userId>[^/]++)/remove$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_student_remove']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::removeAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_classroom_manage_student_remove;
                        }

                        return $ret;
                    }
                    not_classroom_manage_student_remove:

                    // classroom_manage_student_batch_remove
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/student/remove$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_student_batch_remove']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::removeStudentsAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_manage_student_create
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/student/create$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_student_create']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::createAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_manage_student_check
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/student_check$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_student_check']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::checkStudentAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_manage_student_export_datas
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/student/export/(?P<role>[^/]++)/datas$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_student_export_datas']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::exportDatasAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_manage_student_export_csv
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/student/export$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_student_export_csv']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::exportCsvAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_manage_student_import
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/student/import$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_student_import']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::importUsersAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_manage_student_to_base
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/student/importing$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_student_to_base']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::excelDataImportAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_classroom_manage_student_to_base;
                        }

                        return $ret;
                    }
                    not_classroom_manage_student_to_base:

                    // classroom_manage_testpaper
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/testpaper/list$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_testpaper']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::testpaperAction',  '_permission' =>   array (    0 => 'classroom_manage_testpaper',  ),  '_h5' => false,));
                    }

                    // classroom_manage_testpaper_result_list
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/testpaper/(?P<testpaperId>[^/]++)/(?P<activityId>[^/]++)/result$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_testpaper_result_list']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::testpaperResultListAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_manage_testpaper_check
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/testpaper/(?P<answerRecordId>[^/]++)/check$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_testpaper_check']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::testpaperCheckAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_manage_exam_result_anlysis
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/exam/activity/(?P<activityId>[^/]++)/analysis$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_exam_result_anlysis']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::resultAnalysisAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_manage_exam_next_result_check
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/activity/(?P<activityId>[^/]++)/exam/check$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_exam_next_result_check']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::resultNextCheckAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_manage_testpaper_result_graph
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/activity/(?P<activityId>[^/]++)/testpaper/graph$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_testpaper_result_graph']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::resultGraphAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_manage_homework
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/homework/list$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_homework']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::homeworkAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_manage_homework_check
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/manage/homework/(?P<answerRecordId>[^/]++)/check$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_homework_check']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::homeworkCheckAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_manage_students_defined_show
                    if (preg_match('#^/classroom/(?P<classroomId>[^/]++)/manage/students/(?P<userId>[^/]++)/defined_show$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_students_defined_show']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::studentDefinedShowAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_manage_students_show
                    if (preg_match('#^/classroom/(?P<classroomId>[^/]++)/manage/students/(?P<userId>[^/]++)/show$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_students_show']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::studentShowAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_manage_member_deadline
                    if (preg_match('#^/classroom/(?P<classroomId>[^/]++)/manage/member/deadline$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_member_deadline']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::setClassroomMemberDeadlineAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_manage_member_deadline_check_deadline
                    if (preg_match('#^/classroom/(?P<classroomId>[^/]++)/manage/member/deadline/check$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_member_deadline_check_deadline']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::checkDeadlineAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_manage_member_deadline_check_day
                    if (preg_match('#^/classroom/(?P<classroomId>[^/]++)/manage/member/day/check$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_manage_member_deadline_check_day']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::checkDayAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_member_deadline_reach
                    if (preg_match('#^/classroom/(?P<classroomId>[^/]++)/member/deadline/reach$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_member_deadline_reach']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomController::deadlineReachAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_expiry_date_rule
                    if ('/classroom_expiry_date_rule' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomManageController::expiryDateRuleAction',  '_route' => 'classroom_expiry_date_rule',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // classroom_explore
                    if (0 === strpos($pathinfo, '/classroom/explore') && preg_match('#^/classroom/explore(?:/(?P<category>[^/]++))?$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_explore']), array (  '_controller' => 'AppBundle\\Controller\\ExploreController::classroomAction',  'category' => '',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_show
                    if (preg_match('#^/classroom/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_show']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomController::showAction',  '_permission' =>   array (  ),  '_h5' => true,));
                    }

                    // classroom_qrcode
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/qrcode$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_qrcode']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomController::qrcodeAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_reviews
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/review$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_reviews']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ReviewController::listAction',  '_permission' =>   array (  ),  '_h5' => true,));
                    }

                    // classroom_introductions
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/introduction$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_introductions']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomController::introductionAction',  '_permission' =>   array (  ),  '_h5' => true,));
                    }

                    // classroom_buy
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/buy$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_buy']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomBuyController::buyAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_classroom_buy;
                        }

                        return $ret;
                    }
                    not_classroom_buy:

                    if (0 === strpos($pathinfo, '/classroom/sign')) {
                        // classroom_sign
                        if (preg_match('#^/classroom/sign/(?P<classroomId>[^/]++)$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_sign']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomController::signAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // classroom_signed_records
                        if (preg_match('#^/classroom/sign/(?P<classroomId>[^/]++)/records$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_signed_records']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomController::getSignedRecordsByPeriodAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                    }

                    // classroom_become_auditor
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/becomeAuditor$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_become_auditor']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomController::becomeAuditorAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_exit
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/exit$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_exit']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomController::exitAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_canview
                    if (preg_match('#^/classroom/(?P<classroomId>[^/]++)/canview$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_canview']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomController::canviewAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_courses
                    if (preg_match('#^/classroom/(?P<classroomId>[^/]++)/courses$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_courses']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\CourseController::listAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_threads
                    if (preg_match('#^/classroom/(?P<classroomId>[^/]++)/threads$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_threads']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomThreadController::listAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_thread_create
                    if (preg_match('#^/classroom/(?P<classroomId>[^/]++)/thread/(?P<type>[^/]++)/create$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_thread_create']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomThreadController::createAction',  'type' => 'discussion',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_thread_show
                    if (preg_match('#^/classroom/(?P<classroomId>[^/]++)/thread/(?P<threadId>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_thread_show']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomThreadController::showAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_thread_update
                    if (preg_match('#^/classroom/(?P<classroomId>[^/]++)/thread/(?P<threadId>[^/]++)/update$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_thread_update']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomThreadController::updateAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_vip_buy
                    if (preg_match('#^/classroom/(?P<id>[^/]++)/vip_buy$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_vip_buy']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ClassroomController::becomeStudentAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_thread_members_become
                    if (preg_match('#^/classroom/(?P<classroomId>[^/]++)/thread/(?P<threadId>[^/]++)/members/become$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_thread_members_become']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ThreadMemberController::becomeAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_thread_members_quit
                    if (preg_match('#^/classroom/(?P<classroomId>[^/]++)/thread/(?P<threadId>[^/]++)/member/(?P<memberId>[^/]++)/quit$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_thread_members_quit']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\ThreadMemberController::quitAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_headteacher_match
                    if (preg_match('#^/classroom/(?P<classroomId>[^/]++)/headteacher/match$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_headteacher_match']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\UtilityController::headteacherMatchAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_assistants_match
                    if (preg_match('#^/classroom/(?P<classroomId>[^/]++)/assistants/match$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_assistants_match']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\UtilityController::assistantsMatchAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_courses_pick
                    if (preg_match('#^/classroom/(?P<classroomId>[^/]++)/course/pick$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_courses_pick']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\CourseController::pickAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_course_search
                    if (preg_match('#^/classroom/(?P<classroomId>[^/]++)/course/search$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_course_search']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\CourseController::searchAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_course_notes_list
                    if (preg_match('#^/classroom/(?P<classroomId>[^/]++)/courses/notes$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_course_notes_list']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\CourseNoteController::listAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_teachers
                    if (preg_match('#^/classroom/(?P<classroomId>[^/]++)/teachers/list$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_teachers']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\TeacherController::listAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_teacherIds_catch
                    if (preg_match('#^/classroom/(?P<classroomId>[^/]++)/teacherIds/catch$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_teacherIds_catch']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\TeacherController::catchIdsAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classroom_buy_hint
                    if (0 === strpos($pathinfo, '/classroom/courses') && preg_match('#^/classroom/courses/(?P<courseId>[^/]++)/buy/hint$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classroom_buy_hint']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\CourseTaskController::buyHintAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // classrom_course_tasks_list
                    if (preg_match('#^/classroom/(?P<classroomId>[^/]++)/course/(?P<courseId>[^/]++)/tasks/list$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'classrom_course_tasks_list']), array (  '_controller' => 'AppBundle\\Controller\\Classroom\\CourseTaskController::listAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                }

                // client_time_check
                if ('/client_time_check' === $pathinfo) {
                    return array (  '_controller' => 'CustomBundle\\Controller\\DefaultController::clientTimeCheckAction',  '_route' => 'client_time_check',  '_permission' =>   array (  ),  '_h5' => false,);
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_client_time_check;
                    }

                    return $ret;
                }
                not_client_time_check:

            }

            // changelog_list
            if ('/changelog/list' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\ChangelogController::listAction',  '_route' => 'changelog_list',  '_permission' =>   array (  ),  '_h5' => false,);
            }

        }

        elseif (0 === strpos($pathinfo, '/o')) {
            if (0 === strpos($pathinfo, '/oauth')) {
                if (0 === strpos($pathinfo, '/oauth2/login')) {
                    // oauth2_login_index
                    if ('/oauth2/login/main' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\OAuth2\\LoginController::mainAction',  '_route' => 'oauth2_login_index',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // oauth2_login_app
                    if ('/oauth2/login/app' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\OAuth2\\LoginController::appAction',  '_route' => 'oauth2_login_app',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // oauth2_login_bind_account
                    if ('/oauth2/login/bind_account' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\OAuth2\\LoginController::bindAccountAction',  '_route' => 'oauth2_login_bind_account',  '_permission' =>   array (  ),  '_h5' => false,);
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_oauth2_login_bind_account;
                        }

                        return $ret;
                    }
                    not_oauth2_login_bind_account:

                    // oauth2_login_bind_login
                    if ('/oauth2/login/bind_login' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\OAuth2\\LoginController::bindLoginAction',  '_route' => 'oauth2_login_bind_login',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // oauth2_login_create
                    if ('/oauth2/login/create' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\OAuth2\\LoginController::createAction',  '_route' => 'oauth2_login_create',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // oauth2_login_success
                    if ('/oauth2/login/success' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\OAuth2\\LoginController::successAction',  '_route' => 'oauth2_login_success',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

                // oauth2_es_authorize
                if ('/oauth/authorize' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\OAuth2\\Server\\AuthorizationController::authorizeAction',  '_route' => 'oauth2_es_authorize',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // oauth2_es_token_verify
                if ('/oauth/access_token' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\OAuth2\\Server\\AuthorizationController::verifyAction',  '_route' => 'oauth2_es_token_verify',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // oauth2_es_token
                if ('/oauth/token' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\OAuth2\\Server\\AuthorizationController::tokenAction',  '_route' => 'oauth2_es_token',  '_permission' =>   array (  ),  '_h5' => false,);
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_oauth2_es_token;
                    }

                    return $ret;
                }
                not_oauth2_es_token:

                // oauth2_es_user_info
                if (0 === strpos($pathinfo, '/oauth/user_info') && preg_match('#^/oauth/user_info/(?P<userId>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'oauth2_es_user_info']), array (  '_controller' => 'AppBundle\\Controller\\OAuth2\\Server\\AuthorizationController::getUserInfoAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

            }

            elseif (0 === strpos($pathinfo, '/order')) {
                // order_detail
                if (preg_match('#^/order/(?P<id>[^/]++)/detail$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'order_detail']), array (  '_controller' => 'AppBundle\\Controller\\Order\\OrderController::detailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // order_cancel_refund
                if (preg_match('#^/order/(?P<orderId>[^/]++)/cancel_refund$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'order_cancel_refund']), array (  '_controller' => 'AppBundle\\Controller\\Order\\OrderRefundController::cancelRefundAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_order_cancel_refund;
                    }

                    return $ret;
                }
                not_order_cancel_refund:

                // order_show
                if ('/order/show' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\Order\\OrderController::showAction',  '_route' => 'order_show',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // order_create
                if ('/order/create' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\Order\\OrderController::createAction',  '_route' => 'order_create',  '_permission' =>   array (  ),  '_h5' => false,);
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_order_create;
                    }

                    return $ret;
                }
                not_order_create:

                // order_calculate_price
                if ('/order/price/calculate' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\Order\\OrderController::priceAction',  'limit' => '',  '_route' => 'order_calculate_price',  '_permission' =>   array (  ),  '_h5' => false,);
                }

            }

            // org_tree
            if ('/org-tree.json' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\OrgController::orgTreeJsonAction',  '_route' => 'org_tree',  '_permission' =>   array (  ),  '_h5' => false,);
                if (!in_array($canonicalMethod, ['GET'])) {
                    $allow = array_merge($allow, ['GET']);
                    goto not_org_tree;
                }

                return $ret;
            }
            not_org_tree:

            if (0 === strpos($pathinfo, '/open/course')) {
                // open_course_explore
                if (0 === strpos($pathinfo, '/open/course/explore') && preg_match('#^/open/course/explore(?:/(?P<category>[^/]++))?$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_explore']), array (  '_controller' => 'AppBundle\\Controller\\ExploreController::openCourseAction',  'category' => '',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage
                if (preg_match('#^/open/course/(?P<id>[^/]++)/manage$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseManageController::indexAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage_publish
                if (preg_match('#^/open/course/(?P<id>[^/]++)/manage/publish$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_publish']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseManageController::publishAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage_base
                if (preg_match('#^/open/course/(?P<id>[^/]++)/manage/base$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_base']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseManageController::baseAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage_lesson
                if (preg_match('#^/open/course/(?P<id>[^/]++)/manage/lesson$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_lesson']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseLessonManageController::lessonAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage_lesson_create
                if (preg_match('#^/open/course/(?P<id>[^/]++)/manage/lesson/create$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_lesson_create']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseLessonManageController::createAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage_lesson_edit
                if (preg_match('#^/open/course/(?P<courseId>[^/]++)/manage/lesson/(?P<lessonId>[^/]++)/edit$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_lesson_edit']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseLessonManageController::editAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage_lesson_publish
                if (preg_match('#^/open/course/(?P<courseId>[^/]++)/manage/lesson/(?P<lessonId>[^/]++)/publish$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_lesson_publish']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseLessonManageController::publishAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage_lesson_delete
                if (preg_match('#^/open/course/(?P<courseId>[^/]++)/manage/lesson/(?P<lessonId>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_lesson_delete']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseLessonManageController::deleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage_lesson_unpublish
                if (preg_match('#^/open/course/(?P<courseId>[^/]++)/manage/lesson/(?P<lessonId>[^/]++)/unpublish$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_lesson_unpublish']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseLessonManageController::unpublishAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage_lesson_sort
                if (preg_match('#^/open/course/(?P<id>[^/]++)/manage/lesson/sort$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_lesson_sort']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseLessonManageController::sortAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_open_course_manage_lesson_sort;
                    }

                    return $ret;
                }
                not_open_course_manage_lesson_sort:

                // open_course_draft_create
                if ('/open/course/draft/create' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\OpenCourseLessonManageController::draftCreateAction',  '_route' => 'open_course_draft_create',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // open_course_manage_picture_crop
                if (preg_match('#^/open/course/(?P<id>[^/]++)/manage/picture/crop$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_picture_crop']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseManageController::pictureCropAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage_teachers
                if (preg_match('#^/open/course/(?P<id>[^/]++)/manage/teachers$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_teachers']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseManageController::teachersAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage_teachers_match
                if (preg_match('#^/open/course/(?P<id>[^/]++)/manage/teachers/match$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_teachers_match']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseManageController::teachersMatchAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage_live_time_set
                if (preg_match('#^/open/course/(?P<id>[^/]++)/manage/live/time$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_live_time_set']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseManageController::liveOpenTimeSetAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage_marketing
                if (preg_match('#^/open/course/(?P<id>[^/]++)/manage/marketing$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_marketing']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseManageController::marketingAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage_students
                if (preg_match('#^/open/course/(?P<id>[^/]++)/manage/students$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_students']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseManageController::studentsAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage_students_show
                if (preg_match('#^/open/course/(?P<id>[^/]++)/manage/students/(?P<userId>[^/]++)/show$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_students_show']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseManageController::studentDetailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage_files
                if (preg_match('#^/open/course/(?P<id>[^/]++)/manage/files$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_files']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseFileManageController::indexAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage_file_show
                if (preg_match('#^/open/course/(?P<id>[^/]++)/manage/file/(?P<fileId>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_file_show']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseFileManageController::showAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage_file_convert
                if (preg_match('#^/open/course/(?P<id>[^/]++)/manage/file/(?P<fileId>[^/]++)/convert$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_file_convert']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseFileManageController::convertAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_open_course_manage_file_convert;
                    }

                    return $ret;
                }
                not_open_course_manage_file_convert:

                // open_course_manage_file_status
                if ('/open/course/manage/file/status' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\OpenCourseFileManageController::fileStatusAction',  '_route' => 'open_course_manage_file_status',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // open_course_manage_delete_materials_show
                if (preg_match('#^/open/course/(?P<id>[^/]++)/manage/show/delete/materials$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_delete_materials_show']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseFileManageController::deleteMaterialShowAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_open_course_manage_delete_materials_show;
                    }

                    return $ret;
                }
                not_open_course_manage_delete_materials_show:

                // open_course_manage_files_delete
                if (preg_match('#^/open/course/(?P<id>[^/]++)/manage/materials/delete$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_files_delete']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseFileManageController::deleteCourseFilesAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_open_course_manage_files_delete;
                    }

                    return $ret;
                }
                not_open_course_manage_files_delete:

                // open_course_manage_files_batch_tag_add
                if (preg_match('#^/open/course/(?P<id>[^/]++)/batch/tag/add$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_files_batch_tag_add']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseFileManageController::batchTagAddAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage_course_pick
                if (preg_match('#^/open/course/(?P<id>[^/]++)/manage/recommend/pick(?:/(?P<filter>[^/]++))?$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_course_pick']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseManageController::pickAction',  'filter' => 'openCourse',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage_recommend_course_delete
                if (preg_match('#^/open/course/(?P<id>[^/]++)/manage/recommend/(?P<recommendId>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_recommend_course_delete']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseManageController::deleteRecommendCourseAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_open_course_manage_recommend_course_delete;
                    }

                    return $ret;
                }
                not_open_course_manage_recommend_course_delete:

                // open_course_manage_lesson_replays_edit
                if (preg_match('#^/open/course/(?P<courseId>[^/]++)/manage/lesson/(?P<lessonId>[^/]++)/replays/edit$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_lesson_replays_edit']), array (  '_controller' => 'AppBundle\\Controller\\LiveOpenCourseController::editLessonReplayAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage_replay_title_update
                if (preg_match('#^/open/course/(?P<courseId>[^/]++)/manage/lesson/(?P<lessonId>[^/]++)/replay/(?P<replayId>[^/]++)/update$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_replay_title_update']), array (  '_controller' => 'AppBundle\\Controller\\LiveOpenCourseController::updateReplayTitleAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_open_course_manage_replay_title_update;
                    }

                    return $ret;
                }
                not_open_course_manage_replay_title_update:

                // open_course_manage_student_export_csv
                if (preg_match('#^/open/course/(?P<id>[^/]++)/manage/student/export$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_student_export_csv']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseManageController::studentsExportAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage_student_export_datas
                if (preg_match('#^/open/course/(?P<id>[^/]++)/manage/student/export/datas$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_student_export_datas']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseManageController::studentsExportDatasAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage_material
                if (preg_match('#^/open/course/(?P<courseId>[^/]++)/manage/lesson/(?P<lessonId>[^/]++)/material$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_material']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseLessonManageController::materialModalAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage_material_upload
                if (preg_match('#^/open/course/(?P<courseId>[^/]++)/manage/lesson/(?P<lessonId>[^/]++)/material/upload$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_material_upload']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseLessonManageController::materialUploadAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_open_course_manage_material_upload;
                    }

                    return $ret;
                }
                not_open_course_manage_material_upload:

                // open_course_manage_material_delete
                if (preg_match('#^/open/course/(?P<courseId>[^/]++)/manage/material/(?P<materialId>[^/]++)/delete$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_material_delete']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseLessonManageController::materialDeleteAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_open_course_manage_material_delete;
                    }

                    return $ret;
                }
                not_open_course_manage_material_delete:

                // open_course_material_download
                if (preg_match('#^/open/course/(?P<courseId>[^/]++)/material/(?P<materialId>[^/]++)/download$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_material_download']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseController::materialDownloadAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_manage_material_browser
                if (preg_match('#^/open/course/(?P<courseId>[^/]++)/manage/material/browser$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_manage_material_browser']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseLessonManageController::materialBrowserAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_course_search
                if (preg_match('#^/open/course/(?P<id>[^/]++)/recommended/search/(?P<filter>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_course_search']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseManageController::searchAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_recommended_course_select
                if (preg_match('#^/open/course/(?P<id>[^/]++)/recommended/select$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_recommended_course_select']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseManageController::recommendedCoursesSelectAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_show
                if (preg_match('#^/open/course/(?P<courseId>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_show']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseController::showAction',  'lessonId' => NULL,  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_lesson_learn
                if (preg_match('#^/open/course/(?P<courseId>[^/]++)/lesson/(?P<lessonId>[^/]++)/learn$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_lesson_learn']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseController::showAction',  'lessonId' => NULL,  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_lesson_show
                if (preg_match('#^/open/course/(?P<courseId>[^/]++)/lesson/(?P<lessonId>[^/]++)/show$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_lesson_show']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseController::lessonShowAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_like
                if (preg_match('#^/open/course/(?P<id>[^/]++)/like$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_like']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseController::likeAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_open_course_like;
                    }

                    return $ret;
                }
                not_open_course_like:

                // open_course_unlike
                if (preg_match('#^/open/course/(?P<id>[^/]++)/unlike$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_unlike']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseController::unlikeAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_open_course_unlike;
                    }

                    return $ret;
                }
                not_open_course_unlike:

                // open_course_post
                if (preg_match('#^/open/course/(?P<id>[^/]++)/post$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_post']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseController::postAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_post_reply
                if (preg_match('#^/open/course/(?P<id>[^/]++)/post/(?P<postId>[^/]++)$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_post_reply']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseController::postReplyAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_open_course_post_reply;
                    }

                    return $ret;
                }
                not_open_course_post_reply:

                // live_open_course_play
                if (preg_match('#^/open/course/(?P<courseId>[^/]++)/lesson/(?P<lessonId>[^/]++)/live_entry$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'live_open_course_play']), array (  '_controller' => 'AppBundle\\Controller\\LiveOpenCourseController::entryAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // live_open_course_manage_replay
                if (preg_match('#^/open/course/(?P<id>[^/]++)/manage/replay$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'live_open_course_manage_replay']), array (  '_controller' => 'AppBundle\\Controller\\LiveOpenCourseController::replayManageAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // live_open_course_lesson_replay_create
                if (preg_match('#^/open/course/(?P<courseId>[^/]++)/lesson/(?P<lessonId>[^/]++)/live/replay/create$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'live_open_course_lesson_replay_create']), array (  '_controller' => 'AppBundle\\Controller\\LiveOpenCourseController::createLessonReplayAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // live_open_course_lesson_replay_upload
                if (preg_match('#^/open/course/(?P<courseId>[^/]++)/lesson/(?P<lessonId>[^/]++)/replay/upload$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'live_open_course_lesson_replay_upload']), array (  '_controller' => 'AppBundle\\Controller\\LiveOpenCourseController::uploadModalAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // live_open_course_live_replay_entry
                if (preg_match('#^/open/course/(?P<courseId>[^/]++)/lesson/(?P<lessonId>[^/]++)/live/replay/(?P<replayId>[^/]++)/entry$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'live_open_course_live_replay_entry']), array (  '_controller' => 'AppBundle\\Controller\\LiveOpenCourseController::entryReplayAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // live_open_course_live_replay_url
                if (preg_match('#^/open/course/(?P<courseId>[^/]++)/lesson/(?P<lessonId>[^/]++)/live/replay/(?P<replayId>[^/]++)/url$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'live_open_course_live_replay_url']), array (  '_controller' => 'AppBundle\\Controller\\LiveOpenCourseController::getReplayUrlAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // live_open_lesson_time_check
                if (preg_match('#^/open/course/(?P<courseId>[^/]++)/manage/live/time/check$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'live_open_lesson_time_check']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseManageController::lessonTimeCheckAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_member_sms
                if (preg_match('#^/open/course/(?P<id>[^/]++)/member/sms$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_member_sms']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseController::memberSmsAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_member_create
                if (preg_match('#^/open/course/(?P<id>[^/]++)/member/create$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_member_create']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseController::createMemberAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_lesson_player
                if (preg_match('#^/open/course/(?P<courseId>[^/]++)/lesson/(?P<lessonId>[^/]++)/player$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_lesson_player']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseController::playerAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_mobile_check
                if (preg_match('#^/open/course/(?P<courseId>[^/]++)/mobile/check$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_mobile_check']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseController::mobileCheckAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // open_course_ad_modal_recommend_course
                if (preg_match('#^/open/course/(?P<id>[^/]++)/ad\\-modal/recommend/course$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'open_course_ad_modal_recommend_course']), array (  '_controller' => 'AppBundle\\Controller\\OpenCourseController::adModalRecommendCourseAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($canonicalMethod, ['GET'])) {
                        $allow = array_merge($allow, ['GET']);
                        goto not_open_course_ad_modal_recommend_course;
                    }

                    return $ret;
                }
                not_open_course_ad_modal_recommend_course:

            }

            // online_sample
            if ('/online/sample' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\OnlineController::sampleAction',  '_route' => 'online_sample',  '_permission' =>   array (  ),  '_h5' => false,);
            }

        }

        elseif (0 === strpos($pathinfo, '/p')) {
            if (0 === strpos($pathinfo, '/pa')) {
                // password_init
                if ('/password/init' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\PasswordInitController::initPasswordAction',  '_route' => 'password_init',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                if (0 === strpos($pathinfo, '/password/reset')) {
                    // password_reset
                    if ('/password/reset' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\PasswordResetController::indexAction',  '_route' => 'password_reset',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // password_reset_update
                    if ('/password/reset/update' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\PasswordResetController::updateAction',  '_route' => 'password_reset_update',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // password_reset_check_mobile
                    if ('/password/reset/check/mobile' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\PasswordResetController::checkMobileExistsAction',  '_route' => 'password_reset_check_mobile',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // password_reset_by_sms
                    if ('/password/reset/by_sms' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\PasswordResetController::resetBySmsAction',  '_route' => 'password_reset_by_sms',  '_permission' =>   array (  ),  '_h5' => false,);
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_password_reset_by_sms;
                        }

                        return $ret;
                    }
                    not_password_reset_by_sms:

                    // password_reset_by_email_success
                    if ('/password/reset/email/success' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\PasswordResetController::emailResetSuccessAction',  '_route' => 'password_reset_by_email_success',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

                elseif (0 === strpos($pathinfo, '/page')) {
                    // content_page_show
                    if (preg_match('#^/page/(?P<alias>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'content_page_show']), array (  '_controller' => 'AppBundle\\Controller\\ContentController::pageShowAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // content_page_list
                    if ('/page' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\ContentController::pageListAction',  '_route' => 'content_page_list',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

                elseif (0 === strpos($pathinfo, '/partner')) {
                    // partner_login
                    if ('/partner/login' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\PartnerController::loginAction',  '_route' => 'partner_login',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // partner_logout
                    if ('/partner/logout' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\PartnerController::logoutAction',  '_route' => 'partner_logout',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // partner_discuz_notify
                    if ('/partner/discuz/api/notify' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\PartnerDiscuzController::notifyAction',  '_route' => 'partner_discuz_notify',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // partner_phpwind_notify
                    if ('/partner/phpwind/api/notify' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle:PartnerPhpwind:notify',  '_route' => 'partner_phpwind_notify',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

                elseif (0 === strpos($pathinfo, '/pay')) {
                    if (0 === strpos($pathinfo, '/pay/center')) {
                        if (0 === strpos($pathinfo, '/pay/center/wxpay')) {
                            // cashier_wechat_js_pay
                            if ('/pay/center/wxpay' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Cashier\\WechatController::wechatJsPayAction',  '_route' => 'cashier_wechat_js_pay',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // cashier_wechat_js_pay_h5
                            if ('/pay/center/wxpay_h5' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Cashier\\WechatController::wechatJsPayH5Action',  '_route' => 'cashier_wechat_js_pay_h5',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                            // cashier_wechat_mweb_app_trade
                            if ('/pay/center/wxpay_mweb_app_trade' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\Cashier\\WechatController::wechatAppMwebTradeAction',  '_route' => 'cashier_wechat_mweb_app_trade',  '_permission' =>   array (  ),  '_h5' => false,);
                            }

                        }

                        // pay_center_auth_unbind
                        if ('/pay/center/auth_unbind' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle:PayCenter:unbindAuth',  '_route' => 'pay_center_auth_unbind',  '_permission' =>   array (  ),  '_h5' => false,);
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_pay_center_auth_unbind;
                            }

                            return $ret;
                        }
                        not_pay_center_auth_unbind:

                        // auth_unbind_mobile_show
                        if ('/pay/center/mobile_show' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle:PayCenter:showMobile',  '_route' => 'auth_unbind_mobile_show',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                        if (0 === strpos($pathinfo, '/pay/center/pay')) {
                            // pay_return
                            if (preg_match('#^/pay/center/pay/(?P<name>[^/]++)/return$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'pay_return']), array (  '_controller' => 'AppBundle:PayCenter:payReturn',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // pay_return_for_app
                            if (preg_match('#^/pay/center/pay/(?P<name>[^/]++)/return_for_app$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'pay_return_for_app']), array (  '_controller' => 'AppBundle:PayCenter:payReturnForApp',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                            // pay_notify
                            if (preg_match('#^/pay/center/pay/(?P<name>[^/]++)/notify$#sD', $pathinfo, $matches)) {
                                return $this->mergeDefaults(array_replace($matches, ['_route' => 'pay_notify']), array (  '_controller' => 'AppBundle:PayCenter:payNotify',  '_permission' =>   array (  ),  '_h5' => false,));
                            }

                        }

                        // pay_success_show
                        if ('/pay/center/success/show' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle:PayCenter:showTarget',  '_route' => 'pay_success_show',  '_permission' =>   array (  ),  '_h5' => false,);
                        }

                    }

                    // pay_password_check
                    if ('/pay/password/check' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle:PayCenter:payPasswordCheck',  '_route' => 'pay_password_check',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // pay_error
                    if ('/pay/error' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle:PayCenter:payError',  '_route' => 'pay_error',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // pay_result_notice
                    if ('/pay/result/notice' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle:PayCenter:resultNotice',  '_route' => 'pay_result_notice',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // wxpay_roll
                    if ('/pay/wxpay/roll' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle:PayCenter:wxpayRoll',  '_route' => 'wxpay_roll',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

            }

            // privacy_policy
            if ('/privacyPolicy' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\RegisterController::privacyPolicyAction',  '_route' => 'privacy_policy',  '_permission' =>   array (  ),  '_h5' => false,);
            }

            // pre_export
            if (0 === strpos($pathinfo, '/pre/export') && preg_match('#^/pre/export/(?P<name>[^/]++)$#sD', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, ['_route' => 'pre_export']), array (  '_controller' => 'AppBundle\\Controller\\Export\\ExportController::preExportAction',  '_permission' =>   array (  ),  '_h5' => false,));
            }

            // player_local_media
            if (0 === strpos($pathinfo, '/player') && preg_match('#^/player/(?P<id>[^/]++)/file/(?P<token>[^/\\.]++)\\.(?P<ext>[^/]++)$#sD', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, ['_route' => 'player_local_media']), array (  '_controller' => 'AppBundle\\Controller\\PlayerController::localMediaAction',  '_permission' =>   array (  ),  '_h5' => false,));
            }

        }

        elseif (0 === strpos($pathinfo, '/u')) {
            if (0 === strpos($pathinfo, '/user')) {
                // user_terms
                if ('/userterms' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\RegisterController::userTermsAction',  '_route' => 'user_terms',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // user_show
                if (preg_match('#^/user/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'user_show']), array (  '_controller' => 'AppBundle\\Controller\\UserController::showAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // user_info_fill
                if (preg_match('#^/user/(?P<id>[^/]++)/saveinfo$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'user_info_fill']), array (  '_controller' => 'AppBundle\\Controller\\UserController::fillInfoWhenBuyAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_user_info_fill;
                    }

                    return $ret;
                }
                not_user_info_fill:

                if (0 === strpos($pathinfo, '/user/course_set')) {
                    // user_course_set_stick
                    if (preg_match('#^/user/course_set/(?P<courseSetId>[^/]++)/stick$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'user_course_set_stick']), array (  '_controller' => 'AppBundle\\Controller\\UserController::stickCourseSetAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_user_course_set_stick;
                        }

                        return $ret;
                    }
                    not_user_course_set_stick:

                    // user_course_set_unstick
                    if (preg_match('#^/user/course_set/(?P<courseSetId>[^/]++)/unstick$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'user_course_set_unstick']), array (  '_controller' => 'AppBundle\\Controller\\UserController::unStickCourseSetAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_user_course_set_unstick;
                        }

                        return $ret;
                    }
                    not_user_course_set_unstick:

                }

                // user_about
                if (preg_match('#^/user/(?P<id>[^/]++)/about$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'user_about']), array (  '_controller' => 'AppBundle\\Controller\\UserController::aboutAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // user_teach
                if (preg_match('#^/user/(?P<id>[^/]++)/teach$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'user_teach']), array (  '_controller' => 'AppBundle\\Controller\\UserController::teachAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // user_learn
                if (preg_match('#^/user/(?P<id>[^/]++)/learn$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'user_learn']), array (  '_controller' => 'AppBundle\\Controller\\UserController::learnAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // user_favorited
                if (preg_match('#^/user/(?P<id>[^/]++)/favorited$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'user_favorited']), array (  '_controller' => 'AppBundle\\Controller\\UserController::favoritedAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // user_group
                if (preg_match('#^/user/(?P<id>[^/]++)/group$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'user_group']), array (  '_controller' => 'AppBundle\\Controller\\UserController::groupAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // user_following
                if (preg_match('#^/user/(?P<id>[^/]++)/following$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'user_following']), array (  '_controller' => 'AppBundle\\Controller\\UserController::followingAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // user_follower
                if (preg_match('#^/user/(?P<id>[^/]++)/follower$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'user_follower']), array (  '_controller' => 'AppBundle\\Controller\\UserController::followerAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // user_follow
                if (preg_match('#^/user/(?P<id>[^/]++)/follow$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'user_follow']), array (  '_controller' => 'AppBundle\\Controller\\UserController::followAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_user_follow;
                    }

                    return $ret;
                }
                not_user_follow:

                // user_unfollow
                if (preg_match('#^/user/(?P<id>[^/]++)/unfollow$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'user_unfollow']), array (  '_controller' => 'AppBundle\\Controller\\UserController::unfollowAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_user_unfollow;
                    }

                    return $ret;
                }
                not_user_unfollow:

                // user_remind_counter
                if ('/user_remind_counter' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\UserController::remindCounterAction',  '_route' => 'user_remind_counter',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // user_teaching_classrooms
                if (preg_match('#^/user/(?P<id>[^/]++)/teaching/classrooms$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'user_teaching_classrooms']), array (  '_controller' => 'AppBundle\\Controller\\UserController::teachingAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // user_learning_classrooms
                if (preg_match('#^/user/(?P<id>[^/]++)/learning/classrooms$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'user_learning_classrooms']), array (  '_controller' => 'AppBundle\\Controller\\UserController::learningAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // user_card_show
                if (preg_match('#^/user/(?P<userId>[^/]++)/card/show$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'user_card_show']), array (  '_controller' => 'AppBundle\\Controller\\UserController::cardShowAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // user_password_check
                if ('/user/password/check' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\UserController::checkPasswordAction',  '_route' => 'user_password_check',  '_permission' =>   array (  ),  '_h5' => false,);
                }

            }

            elseif (0 === strpos($pathinfo, '/uploader')) {
                // uploader_entry
                if ('/uploader' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\UploaderController::entryAction',  '_route' => 'uploader_entry',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // uploader_init
                if ('/uploader/init' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\UploaderController::initAction',  '_route' => 'uploader_init',  '_permission' =>   array (  ),  '_h5' => false,);
                    if (!in_array($canonicalMethod, ['GET', 'POST'])) {
                        $allow = array_merge($allow, ['GET', 'POST']);
                        goto not_uploader_init;
                    }

                    return $ret;
                }
                not_uploader_init:

                // uploader_auth
                if ('/uploader/auth' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\UploaderController::uploadAuthAction',  '_route' => 'uploader_auth',  '_permission' =>   array (  ),  '_h5' => false,);
                    if (!in_array($canonicalMethod, ['GET', 'POST', 'OPTIONS'])) {
                        $allow = array_merge($allow, ['GET', 'POST', 'OPTIONS']);
                        goto not_uploader_auth;
                    }

                    return $ret;
                }
                not_uploader_auth:

                // uploader_batch_upload
                if ('/uploader/batch_upload' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\UploaderController::batchUploadAction',  '_route' => 'uploader_batch_upload',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // uploader_finished
                if ('/uploader/finished' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\UploaderController::finishedAction',  '_route' => 'uploader_finished',  '_permission' =>   array (  ),  '_h5' => false,);
                    if (!in_array($canonicalMethod, ['GET', 'POST'])) {
                        $allow = array_merge($allow, ['GET', 'POST']);
                        goto not_uploader_finished;
                    }

                    return $ret;
                }
                not_uploader_finished:

                // uploader_upload_callback
                if ('/uploader/upload_callback' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\UploaderController::uploadCallbackAction',  '_route' => 'uploader_upload_callback',  '_permission' =>   array (  ),  '_h5' => false,);
                    if (!in_array($canonicalMethod, ['GET', 'POST'])) {
                        $allow = array_merge($allow, ['GET', 'POST']);
                        goto not_uploader_upload_callback;
                    }

                    return $ret;
                }
                not_uploader_upload_callback:

                // uploader_process_callback
                if ('/uploader/process_callback' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\UploaderController::processCallbackAction',  '_route' => 'uploader_process_callback',  '_permission' =>   array (  ),  '_h5' => false,);
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_uploader_process_callback;
                    }

                    return $ret;
                }
                not_uploader_process_callback:

                // uploader_chunks_start
                if ('/uploader/chunks/start' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\UploaderController::chunksStartAction',  '_route' => 'uploader_chunks_start',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // uploader_chunks_finish
                if ('/uploader/chunks/finish' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\UploaderController::chunksFinishAction',  '_route' => 'uploader_chunks_finish',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                if (0 === strpos($pathinfo, '/uploader/v2')) {
                    // uploader_auth_v2
                    if ('/uploader/v2/auth' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\UploaderController::authAction',  '_route' => 'uploader_auth_v2',  '_permission' =>   array (  ),  '_h5' => false,);
                        if (!in_array($canonicalMethod, ['GET'])) {
                            $allow = array_merge($allow, ['GET']);
                            goto not_uploader_auth_v2;
                        }

                        return $ret;
                    }
                    not_uploader_auth_v2:

                    // uploader_init_v2
                    if ('/uploader/v2/init' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\UploaderController::initAction',  '_route' => 'uploader_init_v2',  '_permission' =>   array (  ),  '_h5' => false,);
                        if (!in_array($canonicalMethod, ['GET'])) {
                            $allow = array_merge($allow, ['GET']);
                            goto not_uploader_init_v2;
                        }

                        return $ret;
                    }
                    not_uploader_init_v2:

                    // uploader_finished_v2
                    if ('/uploader/v2/finished' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\UploaderController::finishedAction',  '_route' => 'uploader_finished_v2',  '_permission' =>   array (  ),  '_h5' => false,);
                        if (!in_array($canonicalMethod, ['GET'])) {
                            $allow = array_merge($allow, ['GET']);
                            goto not_uploader_finished_v2;
                        }

                        return $ret;
                    }
                    not_uploader_finished_v2:

                }

            }

            elseif (0 === strpos($pathinfo, '/uploadfile')) {
                // uploadfile_upload
                if ('/uploadfile/upload' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\UploadFileController::uploadAction',  '_route' => 'uploadfile_upload',  '_permission' =>   array (  ),  '_h5' => false,);
                    if (!in_array($requestMethod, ['POST', 'OPTIONS'])) {
                        $allow = array_merge($allow, ['POST', 'OPTIONS']);
                        goto not_uploadfile_upload;
                    }

                    return $ret;
                }
                not_uploadfile_upload:

                if (0 === strpos($pathinfo, '/uploadfile/browser')) {
                    // uploadfile_browser
                    if ('/uploadfile/browser' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\UploadFileController::browserAction',  '_route' => 'uploadfile_browser',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // uploadfile_browsers
                    if ('/uploadfile/browsers' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\UploadFileController::browsersAction',  '_route' => 'uploadfile_browsers',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

                // uploadfile_params
                if ('/uploadfile/params' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\UploadFileController::paramsAction',  '_route' => 'uploadfile_params',  '_permission' =>   array (  ),  '_h5' => false,);
                }

            }

        }

        elseif (0 === strpos($pathinfo, '/d')) {
            // distributor_register
            if ('/distributor_register' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\DistributorController::registerAction',  '_route' => 'distributor_register',  '_permission' =>   array (  ),  '_h5' => false,);
            }

            // distributor_product
            if ('/distributor_product' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\DistributorController::productAction',  '_route' => 'distributor_product',  '_permission' =>   array (  ),  '_h5' => false,);
            }

            // drag_captcha
            if (0 === strpos($pathinfo, '/drag_captcha') && preg_match('#^/drag_captcha/(?P<token>[^/]++)$#sD', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, ['_route' => 'drag_captcha']), array (  '_controller' => 'AppBundle\\Controller\\CommonController::dragCaptchaAction',  '_permission' =>   array (  ),  '_h5' => false,));
            }

        }

        elseif (0 === strpos($pathinfo, '/register')) {
            // register
            if ('/register' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\RegisterController::indexAction',  '_route' => 'register',  '_permission' =>   array (  ),  '_h5' => false,);
            }

            // register_success
            if ('/register/success' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\RegisterController::successAction',  '_route' => 'register_success',  '_permission' =>   array (  ),  '_h5' => false,);
            }

            // register_submited
            if (0 === strpos($pathinfo, '/register/submited') && preg_match('#^/register/submited/(?P<id>[^/]++)/(?P<hash>[^/]++)$#sD', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, ['_route' => 'register_submited']), array (  '_controller' => 'AppBundle\\Controller\\RegisterController::submitedAction',  '_permission' =>   array (  ),  '_h5' => false,));
            }

            if (0 === strpos($pathinfo, '/register/email')) {
                if (0 === strpos($pathinfo, '/register/email/reset')) {
                    // register_reset_email
                    if (preg_match('#^/register/email/reset/(?P<id>[^/]++)/(?P<hash>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'register_reset_email']), array (  '_controller' => 'AppBundle\\Controller\\RegisterController::resetEmailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // register_reset_email_check
                    if ('/register/email/reset/check' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\RegisterController::resetEmailCheckAction',  '_route' => 'register_reset_email_check',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                    // register_reset_email_verify
                    if ('/register/email/reset/verify' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\RegisterController::resetEmailVerifyAction',  '_route' => 'register_reset_email_verify',  '_permission' =>   array (  ),  '_h5' => false,);
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_register_reset_email_verify;
                        }

                        return $ret;
                    }
                    not_register_reset_email_verify:

                }

                // register_email_send
                if (0 === strpos($pathinfo, '/register/email/send') && preg_match('#^/register/email/send/(?P<id>[^/]++)/(?P<hash>[^/]++)$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'register_email_send']), array (  '_controller' => 'AppBundle\\Controller\\RegisterController::emailSendAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_register_email_send;
                    }

                    return $ret;
                }
                not_register_email_send:

                // register_email_verify
                if (0 === strpos($pathinfo, '/register/email/verify') && preg_match('#^/register/email/verify/(?P<token>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'register_email_verify']), array (  '_controller' => 'AppBundle\\Controller\\RegisterController::emailVerifyAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // register_email_check
                if ('/register/email/check' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\RegisterController::emailCheckAction',  '_route' => 'register_email_check',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // register_email_or_mobile_check
                if ('/register/email_or_mobile/check' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\RegisterController::emailOrMobileCheckAction',  '_route' => 'register_email_or_mobile_check',  '_permission' =>   array (  ),  '_h5' => false,);
                }

            }

            // register_mobile_check
            if ('/register/mobile/check' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\RegisterController::mobileCheckAction',  '_route' => 'register_mobile_check',  '_permission' =>   array (  ),  '_h5' => false,);
            }

            // register_nickname_check
            if ('/register/nickname/check' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\RegisterController::nicknameCheckAction',  '_route' => 'register_nickname_check',  '_permission' =>   array (  ),  '_h5' => false,);
            }

            // invitecode_check
            if ('/register/invitecode/check' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\RegisterController::invitecodeCheckAction',  '_route' => 'invitecode_check',  '_permission' =>   array (  ),  '_h5' => false,);
            }

            // register_captcha_check
            if ('/register/captcha/check' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\RegisterController::captchaCheckAction',  '_route' => 'register_captcha_check',  '_permission' =>   array (  ),  '_h5' => false,);
            }

            // register_captcha_modal
            if ('/register/captcha/modal' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\RegisterController::captchaModalAction',  '_route' => 'register_captcha_modal',  '_permission' =>   array (  ),  '_h5' => false,);
            }

            // register_analysis
            if ('/register/analysis' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\RegisterController::analysisAction',  '_route' => 'register_analysis',  '_permission' =>   array (  ),  '_h5' => false,);
            }

        }

        // raw_password_update
        if ('/raw/password/update' === $pathinfo) {
            return array (  '_controller' => 'AppBundle\\Controller\\PasswordResetController::changeRawPasswordAction',  '_route' => 'raw_password_update',  '_permission' =>   array (  ),  '_h5' => false,);
        }

        if (0 === strpos($pathinfo, '/f')) {
            if (0 === strpos($pathinfo, '/fil')) {
                // file_upload
                if ('/file/upload' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\FileController::uploadAction',  '_route' => 'file_upload',  '_permission' =>   array (  ),  '_h5' => false,);
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_file_upload;
                    }

                    return $ret;
                }
                not_file_upload:

                // file_img_crop
                if ('/file/img/crop' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\FileController::cropImgAction',  '_route' => 'file_img_crop',  '_permission' =>   array (  ),  '_h5' => false,);
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_file_img_crop;
                    }

                    return $ret;
                }
                not_file_img_crop:

                // login_after_fill_userinfo
                if ('/fill/userinfo' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\UserController::fillUserInfoAction',  '_route' => 'login_after_fill_userinfo',  '_permission' =>   array (  ),  '_h5' => false,);
                }

            }

            // following_match_bynickname
            if ('/following/bynickname/match_jsonp' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\MessageController::matchAction',  '_route' => 'following_match_bynickname',  '_permission' =>   array (  ),  '_h5' => false,);
            }

            if (0 === strpos($pathinfo, '/facein')) {
                // facein_capture_upload
                if (0 === strpos($pathinfo, '/facein/capture') && preg_match('#^/facein/capture/(?P<code>[^/]++)/upload$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'facein_capture_upload']), array (  '_controller' => 'AppBundle\\Controller\\FaceInspection\\CaptureController::uploadAction',  'code' => 'face',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_facein_capture_upload;
                    }

                    return $ret;
                }
                not_facein_capture_upload:

                // facein_capture_check
                if ('/facein/user_face/check' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\FaceInspection\\CaptureController::checkAction',  '_route' => 'facein_capture_check',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                if (0 === strpos($pathinfo, '/facein/inspection')) {
                    // facein_inspection_save
                    if (preg_match('#^/facein/inspection/(?P<recordId>[^/]++)/save$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'facein_inspection_save']), array (  '_controller' => 'AppBundle\\Controller\\FaceInspection\\CaptureController::saveAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_facein_inspection_save;
                        }

                        return $ret;
                    }
                    not_facein_inspection_save:

                    // facein_inspection_results
                    if (preg_match('#^/facein/inspection/(?P<activityId>[^/]++)/results$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'facein_inspection_results']), array (  '_controller' => 'AppBundle\\Controller\\FaceInspection\\InspectionResultController::indexAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                }

                // facein_inspection_results_detail
                if (preg_match('#^/facein/(?P<activityId>[^/]++)/inspection/(?P<userId>[^/]++)/results$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'facein_inspection_results_detail']), array (  '_controller' => 'AppBundle\\Controller\\FaceInspection\\InspectionResultController::detailAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

            }

        }

        elseif (0 === strpos($pathinfo, '/h')) {
            if (0 === strpos($pathinfo, '/hls')) {
                // hls_playlist
                if (preg_match('#^/hls/(?P<id>[^/]++)/playlist/(?P<token>[^/\\.]++)\\.m3u8$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'hls_playlist']), array (  '_controller' => 'AppBundle\\Controller\\HLSVideoController::playlistAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // hls_audio_playlist
                if (preg_match('#^/hls/(?P<id>[^/]++)/audio/playlist/(?P<token>[^/\\.]++)\\.m3u8$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'hls_audio_playlist']), array (  '_controller' => 'AppBundle\\Controller\\HLSAudioController::playlistAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // hls_stream
                if (preg_match('#^/hls/(?P<id>[^/]++)/stream/(?P<level>[^/]++)/(?P<token>[^/\\.]++)\\.m3u8$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'hls_stream']), array (  '_controller' => 'AppBundle\\Controller\\HLSVideoController::streamAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // hls_audio_stream
                if (preg_match('#^/hls/(?P<id>[^/]++)/audio/stream/(?P<level>[^/]++)/(?P<token>[^/\\.]++)\\.m3u8$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'hls_audio_stream']), array (  '_controller' => 'AppBundle\\Controller\\HLSAudioController::streamAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // hls_clef
                if (preg_match('#^/hls/(?P<id>[^/]++)/clef/(?P<token>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'hls_clef']), array (  '_controller' => 'AppBundle\\Controller\\HLSVideoController::clefAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // hls_audio_clef
                if (preg_match('#^/hls/(?P<id>[^/]++)/audio/clef/(?P<token>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'hls_audio_clef']), array (  '_controller' => 'AppBundle\\Controller\\HLSAudioController::clefAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

            }

            // cashier_redirect_for_h5
            if ('/h5cashier/redirect' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\Cashier\\CashierH5Controller::redirectAction',  '_route' => 'cashier_redirect_for_h5',  '_permission' =>   array (  ),  '_h5' => false,);
            }

            // cashier_pay_success_for_h5
            if ('/h5cashier/pay/success' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\Cashier\\CashierH5Controller::successAction',  '_route' => 'cashier_pay_success_for_h5',  '_permission' =>   array (  ),  '_h5' => false,);
            }

            // homework_show
            if (0 === strpos($pathinfo, '/homework') && preg_match('#^/homework/(?P<resultId>[^/]++)/show$#sD', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, ['_route' => 'homework_show']), array (  '_controller' => 'AppBundle\\Controller\\HomeworkController::doTestAction',  '_permission' =>   array (  ),  '_h5' => false,));
            }

            if (0 === strpos($pathinfo, '/homework/result')) {
                // homework_result_show
                if (preg_match('#^/homework/result/(?P<answerRecordId>[^/]++)/show$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'homework_result_show']), array (  '_controller' => 'AppBundle\\Controller\\HomeworkController::showResultAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // homework_finish
                if (preg_match('#^/homework/result/(?P<resultId>[^/]++)/finish$#sD', $pathinfo, $matches)) {
                    $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'homework_finish']), array (  '_controller' => 'AppBundle\\Controller\\HomeworkController::submitAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_homework_finish;
                    }

                    return $ret;
                }
                not_homework_finish:

            }

            // custom_homepage
            if ('/hello' === $pathinfo) {
                return array (  '_controller' => 'CustomBundle\\Controller\\DefaultController::helloAction',  '_route' => 'custom_homepage',  '_permission' =>   array (  ),  '_h5' => false,);
            }

        }

        elseif (0 === strpos($pathinfo, '/e')) {
            if (0 === strpos($pathinfo, '/ed')) {
                // editor_upload
                if ('/editor/upload' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\EditorController::uploadAction',  '_route' => 'editor_upload',  '_permission' =>   array (  ),  '_h5' => false,);
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_editor_upload;
                    }

                    return $ret;
                }
                not_editor_upload:

                // editor_download
                if ('/editor/download' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\EditorController::downloadAction',  '_route' => 'editor_download',  '_permission' =>   array (  ),  '_h5' => false,);
                    if (!in_array($requestMethod, ['POST'])) {
                        $allow = array_merge($allow, ['POST']);
                        goto not_editor_download;
                    }

                    return $ret;
                }
                not_editor_download:

                if (0 === strpos($pathinfo, '/edu_cloud/s')) {
                    if (0 === strpos($pathinfo, '/edu_cloud/sms_')) {
                        if (0 === strpos($pathinfo, '/edu_cloud/sms_send')) {
                            // edu_cloud_sms_send
                            if ('/edu_cloud/sms_send' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\EduCloudController::smsSendAction',  '_route' => 'edu_cloud_sms_send',  '_permission' =>   array (  ),  '_h5' => false,);
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_edu_cloud_sms_send;
                                }

                                return $ret;
                            }
                            not_edu_cloud_sms_send:

                            // edu_cloud_sms_send_registration
                            if ('/edu_cloud/sms_send_registration' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\EduCloudController::smsSendRegistrationAction',  '_route' => 'edu_cloud_sms_send_registration',  '_permission' =>   array (  ),  '_h5' => false,);
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_edu_cloud_sms_send_registration;
                                }

                                return $ret;
                            }
                            not_edu_cloud_sms_send_registration:

                            // edu_cloud_sms_send_check_captcha
                            if ('/edu_cloud/sms_send_check_captcha' === $pathinfo) {
                                return array (  '_controller' => 'AppBundle\\Controller\\EduCloudController::smsSendCheckCaptchaAction',  '_route' => 'edu_cloud_sms_send_check_captcha',  '_permission' =>   array (  ),  '_h5' => false,);
                                if (!in_array($requestMethod, ['POST'])) {
                                    $allow = array_merge($allow, ['POST']);
                                    goto not_edu_cloud_sms_send_check_captcha;
                                }

                                return $ret;
                            }
                            not_edu_cloud_sms_send_check_captcha:

                        }

                        // edu_cloud_sms_check
                        if (0 === strpos($pathinfo, '/edu_cloud/sms_check') && preg_match('#^/edu_cloud/sms_check/(?P<type>[^/]++)$#sD', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, ['_route' => 'edu_cloud_sms_check']), array (  '_controller' => 'AppBundle\\Controller\\EduCloudController::smsCheckAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        }

                        // edu_cloud_sms_callback
                        if ('/edu_cloud/sms_callback' === $pathinfo) {
                            return array (  '_controller' => 'AppBundle\\Controller\\EduCloudController::cloudCallBackAction',  '_route' => 'edu_cloud_sms_callback',  '_permission' =>   array (  ),  '_h5' => false,);
                            if (!in_array($requestMethod, ['POST'])) {
                                $allow = array_merge($allow, ['POST']);
                                goto not_edu_cloud_sms_callback;
                            }

                            return $ret;
                        }
                        not_edu_cloud_sms_callback:

                    }

                    // edu_cloud_sms_send_callback
                    if (0 === strpos($pathinfo, '/edu_cloud/sms/callback') && preg_match('#^/edu_cloud/sms/callback/(?P<targetType>[^/]++)/(?P<targetId>[^/]++)$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'edu_cloud_sms_send_callback']), array (  '_controller' => 'AppBundle\\Controller\\EduCloudController::smsCallBackAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // edu_cloud_search_callback
                    if ('/edu_cloud/search/callback' === $pathinfo) {
                        return array (  '_controller' => 'AppBundle\\Controller\\EduCloudController::searchCallBackAction',  '_route' => 'edu_cloud_search_callback',  '_permission' =>   array (  ),  '_h5' => false,);
                    }

                }

            }

            elseif (0 === strpos($pathinfo, '/esbar/my')) {
                // esbar_my_classroom
                if ('/esbar/my/classroom' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\EsBar\\EsBarController::classroomAction',  '_route' => 'esbar_my_classroom',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // esbar_my_course
                if ('/esbar/my/course' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\EsBar\\EsBarController::courseAction',  '_route' => 'esbar_my_course',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // esbar_my_notify
                if ('/esbar/my/notify' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\EsBar\\EsBarController::notifyAction',  '_route' => 'esbar_my_notify',  '_permission' =>   array (  ),  '_h5' => false,);
                }

                // esbar_my_practice
                if (0 === strpos($pathinfo, '/esbar/my/practice') && preg_match('#^/esbar/my/practice/(?P<status>[^/]++)$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'esbar_my_practice']), array (  '_controller' => 'AppBundle\\Controller\\EsBar\\EsBarController::practiceAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                // esbar_my_study_center
                if ('/esbar/my/study_center' === $pathinfo) {
                    return array (  '_controller' => 'AppBundle\\Controller\\EsBar\\EsBarController::studyCenterAction',  '_route' => 'esbar_my_study_center',  '_permission' =>   array (  ),  '_h5' => false,);
                }

            }

            // es_live_room_replay_show
            if (0 === strpos($pathinfo, '/es_live') && preg_match('#^/es_live/(?P<targetType>[^/]++)/(?P<targetId>[^/]++)/lesson/(?P<lessonId>[^/]++)/replay/(?P<replayId>[^/]++)/show$#sD', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, ['_route' => 'es_live_room_replay_show']), array (  '_controller' => 'AppBundle\\Controller\\LiveroomController::playESLiveReplayAction',  '_permission' =>   array (  ),  '_h5' => false,));
            }

            if (0 === strpos($pathinfo, '/ex')) {
                // exercise_show
                if (0 === strpos($pathinfo, '/exercise') && preg_match('#^/exercise/(?P<resultId>[^/]++)/show$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'exercise_show']), array (  '_controller' => 'AppBundle\\Controller\\ExerciseController::doTestAction',  '_permission' =>   array (  ),  '_h5' => false,));
                }

                if (0 === strpos($pathinfo, '/exercise/result')) {
                    // exercise_result_show
                    if (preg_match('#^/exercise/result/(?P<resultId>[^/]++)/show$#sD', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, ['_route' => 'exercise_result_show']), array (  '_controller' => 'AppBundle\\Controller\\ExerciseController::showResultAction',  '_permission' =>   array (  ),  '_h5' => false,));
                    }

                    // exercise_finish
                    if (preg_match('#^/exercise/result/(?P<resultId>[^/]++)/finish$#sD', $pathinfo, $matches)) {
                        $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'exercise_finish']), array (  '_controller' => 'AppBundle\\Controller\\ExerciseController::submitAction',  '_permission' =>   array (  ),  '_h5' => false,));
                        if (!in_array($requestMethod, ['POST'])) {
                            $allow = array_merge($allow, ['POST']);
                            goto not_exercise_finish;
                        }

                        return $ret;
                    }
                    not_exercise_finish:

                }

                // export
                if (0 === strpos($pathinfo, '/export') && preg_match('#^/export/(?P<name>[^/]++)(?:/(?P<type>[^/]++))?$#sD', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, ['_route' => 'export']), array (  '_controller' => 'AppBundle\\Controller\\Export\\ExportController::exportAction',  'type' => 'csv',  '_permission' =>   array (  ),  '_h5' => false,));
                }

            }

            // event_dispatch
            if ('/event/dispatch' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\EventController::dispatchAction',  '_route' => 'event_dispatch',  '_permission' =>   array (  ),  '_h5' => false,);
                if (!in_array($requestMethod, ['POST'])) {
                    $allow = array_merge($allow, ['POST']);
                    goto not_event_dispatch;
                }

                return $ret;
            }
            not_event_dispatch:

        }

        // browser_upgrade
        if ('/browser/upgrade' === $pathinfo) {
            return array (  '_controller' => 'AppBundle\\Controller\\BrowserController::upgradeAction',  '_route' => 'browser_upgrade',  '_permission' =>   array (  ),  '_h5' => false,);
        }

        if (0 === strpos($pathinfo, '/notification')) {
            // notification
            if ('/notification' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\NotificationController::indexAction',  '_route' => 'notification',  '_permission' =>   array (  ),  '_h5' => false,);
            }

            // batch_notification_show
            if (preg_match('#^/notification/(?P<id>[^/]++)$#sD', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, ['_route' => 'batch_notification_show']), array (  '_controller' => 'AppBundle\\Controller\\NotificationController::showAction',  '_permission' =>   array (  ),  '_h5' => false,));
            }

        }

        elseif (0 === strpos($pathinfo, '/note')) {
            // note_like
            if (preg_match('#^/note/(?P<id>[^/]++)/like$#sD', $pathinfo, $matches)) {
                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'note_like']), array (  '_controller' => 'AppBundle\\Controller\\NoteController::likeAction',  '_permission' =>   array (  ),  '_h5' => false,));
                if (!in_array($requestMethod, ['POST'])) {
                    $allow = array_merge($allow, ['POST']);
                    goto not_note_like;
                }

                return $ret;
            }
            not_note_like:

            // note_cancel_like
            if (preg_match('#^/note/(?P<id>[^/]++)/cancel_like$#sD', $pathinfo, $matches)) {
                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'note_cancel_like']), array (  '_controller' => 'AppBundle\\Controller\\NoteController::cancelLikeAction',  '_permission' =>   array (  ),  '_h5' => false,));
                if (!in_array($requestMethod, ['POST'])) {
                    $allow = array_merge($allow, ['POST']);
                    goto not_note_cancel_like;
                }

                return $ret;
            }
            not_note_cancel_like:

        }

        elseif (0 === strpos($pathinfo, '/vip')) {
            // vip
            if ('/vip' === $trimmedPathinfo) {
                return array('_route' => 'vip','_permission' => array (
    ),'_h5' => false);
                if ('/' === substr($pathinfo, -1)) {
                    // no-op
                } elseif ('GET' !== $canonicalMethod) {
                    goto not_vip;
                } else {
                    return array_replace($ret, $this->redirect($rawPathinfo.'/', 'vip'));
                }

                return $ret;
            }
            not_vip:

            // vip_buy
            if ('/vip/buy' === $pathinfo) {
                return array('_route' => 'vip_buy','_permission' => array (
    ),'_h5' => false);
            }

            // vip_renew
            if ('/vip/renew' === $pathinfo) {
                return array('_route' => 'vip_renew','_permission' => array (
    ),'_h5' => false);
            }

            // vip_upgrade
            if ('/vip/upgrade' === $pathinfo) {
                return array('_route' => 'vip_upgrade','_permission' => array (
    ),'_h5' => false);
            }

        }

        elseif (0 === strpos($pathinfo, '/importer')) {
            // importer_check
            if (preg_match('#^/importer/(?P<type>[^/]++)/check$#sD', $pathinfo, $matches)) {
                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'importer_check']), array (  '_controller' => 'AppBundle\\Controller\\ImporterController::checkAction',  '_permission' =>   array (  ),  '_h5' => false,));
                if (!in_array($requestMethod, ['POST'])) {
                    $allow = array_merge($allow, ['POST']);
                    goto not_importer_check;
                }

                return $ret;
            }
            not_importer_check:

            // importer_import
            if (preg_match('#^/importer/(?P<type>[^/]++)/import$#sD', $pathinfo, $matches)) {
                $ret = $this->mergeDefaults(array_replace($matches, ['_route' => 'importer_import']), array (  '_controller' => 'AppBundle\\Controller\\ImporterController::importAction',  '_permission' =>   array (  ),  '_h5' => false,));
                if (!in_array($requestMethod, ['POST'])) {
                    $allow = array_merge($allow, ['POST']);
                    goto not_importer_import;
                }

                return $ret;
            }
            not_importer_import:

            // importer_index
            if (preg_match('#^/importer/(?P<type>[^/]++)/index$#sD', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, ['_route' => 'importer_index']), array (  '_controller' => 'AppBundle\\Controller\\ImporterController::templateAction',  '_permission' =>   array (  ),  '_h5' => false,));
            }

        }

        elseif (0 === strpos($pathinfo, '/item/attachment')) {
            // item_attachment_init_upload
            if ('/item/attachment/upload/init' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\Item\\AttachmentController::initUploadAction',  '_route' => 'item_attachment_init_upload',  '_permission' =>   array (  ),  '_h5' => false,);
            }

            // item_attachment_finish_upload
            if ('/item/attachment/upload/finish' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\Item\\AttachmentController::finishUploadAction',  '_route' => 'item_attachment_finish_upload',  '_permission' =>   array (  ),  '_h5' => false,);
            }

            // item_attachment_delete
            if ('/item/attachment/delete' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\Item\\AttachmentController::deleteAction',  '_route' => 'item_attachment_delete',  '_permission' =>   array (  ),  '_h5' => false,);
            }

            // item_attachment_download
            if ('/item/attachment/download' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\Item\\AttachmentController::downloadAction',  '_route' => 'item_attachment_download',  '_permission' =>   array (  ),  '_h5' => false,);
            }

            // item_attachment_preview
            if ('/item/attachment/preview' === $pathinfo) {
                return array (  '_controller' => 'AppBundle\\Controller\\Item\\AttachmentController::previewAction',  '_route' => 'item_attachment_preview',  '_permission' =>   array (  ),  '_h5' => false,);
            }

        }

        if ('/' === $pathinfo && !$allow) {
            throw new Symfony\Component\Routing\Exception\NoConfigurationException();
        }

        throw 0 < count($allow) ? new MethodNotAllowedException(array_unique($allow)) : new ResourceNotFoundException();
    }
}
